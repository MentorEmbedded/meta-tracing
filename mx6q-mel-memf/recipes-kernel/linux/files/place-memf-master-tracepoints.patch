From 3aaee69f51c0ab47293190316ec0fe36a2c3a701 Mon Sep 17 00:00:00 2001
From: Fahad Arslan <Fahad_Arslan@mentor.com>
Date: Tue, 26 Apr 2016 18:23:01 +0500
Subject: [PATCH 1/1] place memf master tracepoints

Signed-off-by: Fahad Arslan <Fahad_Arslan@mentor.com>
---
 drivers/remoteproc/imx6q_remoteproc.c | 73 +++++++++++++++++++++++++++++++++--
 1 file changed, 70 insertions(+), 3 deletions(-)

diff --git a/drivers/remoteproc/imx6q_remoteproc.c b/drivers/remoteproc/imx6q_remoteproc.c
index 7a238d7..e592870 100644
--- a/drivers/remoteproc/imx6q_remoteproc.c
+++ b/drivers/remoteproc/imx6q_remoteproc.c
@@ -23,6 +23,10 @@
  * GNU General Public License for more details.
  */
 
+#define CREATE_TRACE_POINTS
+#include <trace/events/MEMF.h>
+#include <trace/events/Synchronization.h>
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/err.h>
@@ -58,6 +62,11 @@
 #define         SRC_SCR_COREx_ENABLE(x)                 (1 << (SRC_SCR_CORES_DBG_RST + x))
 #define         SRC_SCR_COREx_RESET(x)                  (1 << (SRC_SCR_CORE0_RST + x))
 
+#define 	RPROC_SUCCESS				0
+#define 	RPROC_FAILURE				1
+#define 	REMOTEPROC_BOOT				0
+#define 	REMOTEPROC_SHUTDOWN			1
+#define 	REMOTEPROC_ACTIVE			2
 
 DEFINE_MUTEX(iomem_lock);
 
@@ -159,12 +168,20 @@ unmap_io:
 static void handle_event_0(struct work_struct *work)
 {
 	struct imx6q_rproc_pdata *local = platform_get_drvdata(remoteprocdev[0]);
+	static bool initialized = false;
 
 	flush_cache_all();
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
 		dev_dbg(&remoteprocdev[0]->dev, "no message found in vqid 0\n");
+	else {
+		if (!initialized) {
+			initialized = true;
+			trace_MEMF_Remoteproc_State(local->rproc, REMOTEPROC_ACTIVE, RPROC_SUCCESS);
+		}
+
+	}
 }
 
 static void ipi_kick_0(void)
@@ -177,12 +194,20 @@ static void ipi_kick_0(void)
 static void handle_event_1(struct work_struct *work)
 {
         struct imx6q_rproc_pdata *local = platform_get_drvdata(remoteprocdev[1]);
+        static bool initialized = false;
 
         flush_cache_all();
         outer_flush_range(local->mem_start, local->mem_end);
 
         if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
                 dev_dbg(&remoteprocdev[1]->dev, "no message found in vqid 0\n");
+        else {
+                if (!initialized) {
+                        initialized = true;
+                        trace_MEMF_Remoteproc_State(local->rproc, REMOTEPROC_ACTIVE, RPROC_SUCCESS);
+                }
+
+        }
 }
 
 static void ipi_kick_1(void)
@@ -195,12 +220,20 @@ static void ipi_kick_1(void)
 static void handle_event_2(struct work_struct *work)
 {
         struct imx6q_rproc_pdata *local = platform_get_drvdata(remoteprocdev[2]);
+        static bool initialized = false;
 
         flush_cache_all();
         outer_flush_range(local->mem_start, local->mem_end);
 
         if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
                 dev_dbg(&remoteprocdev[2]->dev, "no message found in vqid 0\n");
+        else {
+                if (!initialized) {
+                        initialized = true;
+                        trace_MEMF_Remoteproc_State(local->rproc, REMOTEPROC_ACTIVE, RPROC_SUCCESS);
+                }
+
+        }
 }
 
 static void ipi_kick_2(void)
@@ -233,6 +266,7 @@ static int imx6q_rproc_start(struct rproc *rproc)
                 break;
 	default:
 		dev_err(&pdev->dev, "invalid remote_id\n");
+		trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_BOOT, RPROC_FAILURE);
                 return -EINVAL;	
 	}	
 
@@ -240,7 +274,9 @@ static int imx6q_rproc_start(struct rproc *rproc)
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	ret = cpu_start(local->cpu, local->remote_id, rproc->bootaddr);
-    
+
+	trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_BOOT, ret);
+
 	return ret;
 }
 
@@ -250,6 +286,7 @@ static void imx6q_rproc_kick(struct rproc *rproc, int vqid)
 	struct device *dev = rproc->dev.parent;
 	struct platform_device *pdev = to_platform_device(dev);
 	struct imx6q_rproc_pdata *local = platform_get_drvdata(pdev);
+	static bool initialized = false;
 
 	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
@@ -258,6 +295,11 @@ static void imx6q_rproc_kick(struct rproc *rproc, int vqid)
 		gic_raise_softirq(cpumask_of(local->cpu), local->vring0);
 	else
 		gic_raise_softirq(cpumask_of(local->cpu), local->vring1);
+	if (!initialized) {
+		initialized = true;
+		trace_Synchronization_TriggerSend(100, 0, "Trigger");
+	}
+
 }
 
 /* power off the remote processor */
@@ -265,6 +307,7 @@ static int imx6q_rproc_stop(struct rproc *rproc)
 {
 	dev_dbg(rproc->dev.parent, "%s\n", __func__);
 
+	trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_SHUTDOWN, RPROC_SUCCESS);
 	/* FIXME missing reset option */
 	return 0;
 }
@@ -326,8 +369,10 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 
 	local = devm_kzalloc(&pdev->dev, sizeof(struct imx6q_rproc_pdata),
 			     GFP_KERNEL);
-	if (!local)
+	if (!local) {
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		return -ENOMEM;
+	}
 
 	platform_set_drvdata(pdev, local);
 
@@ -335,6 +380,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "invalid address\n");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		return -ENODEV;
 	}
 
@@ -351,12 +397,14 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 	if (!ret) {
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		ret = -ENOMEM;
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_fault;
 	}
 
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (ret) {
 		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_mask_fault;
 	}
 
@@ -375,6 +423,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 		if (!tmp) {
 			dev_err(&pdev->dev, "Unable to alloc irq list\n");
 			ret = -ENOMEM;
+			trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 			goto irq_fault;
 		}
 
@@ -389,6 +438,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 		if (ret) {
 			dev_err(&pdev->dev, "IRQ %d already allocated\n",
 								tmp->irq);
+			trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 			goto irq_fault;
 		}
 
@@ -406,6 +456,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 	ret = of_property_read_u32(pdev->dev.of_node, "vring0_intr_num", &local->vring0);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -413,6 +464,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 	ret = of_property_read_u32(pdev->dev.of_node, "vring1_intr_num", &local->vring1);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -420,6 +472,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
         ret = of_property_read_u32(pdev->dev.of_node, "cpu", &local->cpu);
         if (ret < 0) {
                 dev_err(&pdev->dev, "unable to read cpu property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
                 goto irq_fault;
         }
 
@@ -427,6 +480,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
         ret = of_property_read_u32(pdev->dev.of_node, "remote_id", &local->remote_id);
         if (ret < 0) {
                 dev_err(&pdev->dev, "unable to read remote_id property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
                 goto irq_fault;
         }
 
@@ -443,11 +497,13 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
                 break;
 	default:
 		dev_err(&pdev->dev, "Invalid remote_id specified\n");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
 		goto irq_fault;
         }
 
 	if (ret) {
                 dev_err(&pdev->dev, "IPI handler already registered\n");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
                 goto irq_fault;
         }
 
@@ -466,6 +522,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
                 if (!tmp) {
                         dev_err(&pdev->dev, "Unable to alloc irq list\n");
                         ret = -ENOMEM;
+                        trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
                         goto ipi_fault;
                 }
 
@@ -480,6 +537,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
                 if (ret) {
                         dev_err(&pdev->dev, "IRQ %d already allocated\n",
                                                                 tmp->irq);
+                        trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
                         goto ipi_fault;
                 }
 
@@ -516,6 +574,7 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
                 break;
         default:
                 dev_err(&pdev->dev, "Invalid remote_id specified\n");
+                trace_MEMF_Remoteproc_Init(NULL, prop, local->cpu, RPROC_FAILURE);
                 goto ipi_fault;
         }
 
@@ -528,15 +587,21 @@ static int imx6q_remoteproc_probe(struct platform_device *pdev)
 				&imx6q_rproc_ops, prop, sizeof(struct rproc));
 		if (!local->rproc) {
 			dev_err(&pdev->dev, "rproc allocation failed\n");
+			trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, RPROC_FAILURE);
 			goto ipi_fault;
 		}
 
+		local->rproc->cpu = local->cpu;
+
 		ret = rproc_add(local->rproc);
 		if (ret) {
 			dev_err(&pdev->dev, "rproc registration failed\n");
+			trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, RPROC_FAILURE);
 			goto rproc_fault;
 		}
 
+		trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, ret);
+
 		return ret;
 	} else
 		ret = -ENODEV;
@@ -569,6 +634,8 @@ static int imx6q_remoteproc_remove(struct platform_device *pdev)
 	clear_ipi_handler(local->vring0);
 	clear_irq(pdev);
 
+	trace_MEMF_Remoteproc_DeInit(local->rproc, RPROC_SUCCESS);
+
 	rproc_del(local->rproc);
 	rproc_put(local->rproc);
 
@@ -578,7 +645,7 @@ static int imx6q_remoteproc_remove(struct platform_device *pdev)
 		if (ret)
 			dev_err(&pdev->dev, "Can't power on cpu%d\n", local->cpu);
 	}
-	
+
 
 	return 0;
 }
-- 
2.8.1

