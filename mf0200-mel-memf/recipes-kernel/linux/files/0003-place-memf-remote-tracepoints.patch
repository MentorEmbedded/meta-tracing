From 29457988b34aa1c37d08378dac8dc7bf6960cec2 Mon Sep 17 00:00:00 2001
From: AbdulKarim <HafizAbdul_Karim@mentor.com>
Date: Thu, 28 Sep 2017 19:08:38 +0500
Subject: [PATCH 1/1] place-memf-remote-tracepoints.patch

Signed-off-by: AbdulKarim <HafizAbdul_Karim@mentor.com>
---
 drivers/rpmsg/rpmsg_imx6q_driver.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/drivers/rpmsg/rpmsg_imx6q_driver.c b/drivers/rpmsg/rpmsg_imx6q_driver.c
index cabaedf..2af7e2b 100644
--- a/drivers/rpmsg/rpmsg_imx6q_driver.c
+++ b/drivers/rpmsg/rpmsg_imx6q_driver.c
@@ -23,6 +23,9 @@
  * GNU General Public License for more details.
  */
 
+#include <trace/events/MEMF.h>
+#include <trace/events/Synchronization.h>
+
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/module.h>
@@ -47,6 +50,9 @@
 
 #include "rpmsg_imx6q_internals.h"
 
+#define SUCCESS			0
+#define FAILURE			1
+
 static DEFINE_IDA(rpmsg_imx6q_dev_index);
 
 /* Globals. */
@@ -91,6 +97,8 @@ static void setup_shared_memory(void)
 
 static bool imx6q_rpmsg_virtio_notify(struct virtqueue *vq)
 {
+	static bool executed = false;
+
 	/* Notify the other core. */
 	if (vq == imx6q_rpmsg_p->vrings[0].vq)
 		/* Raise soft IRQ on GIC. */
@@ -98,6 +106,11 @@ static bool imx6q_rpmsg_virtio_notify(struct virtqueue *vq)
 	else
 		gic_raise_softirq_unicore(0, imx6q_rpmsg_p->vring1);
 
+	if (!executed) {
+		executed = true;
+		trace_Synchronization_TriggerSend(100, 0, "Trigger");
+	}
+
 	return true;
 }
 
@@ -253,6 +266,8 @@ static void ipi_handler(void)
 
 static int imx6q_rpmsg_deinitialize(struct platform_device *pdev)
 {
+	trace_MEMF_Remoteproc_Rsc_Deinit(imx6q_rpmsg_p, SUCCESS);
+
 	unregister_virtio_device(&(imx6q_rpmsg_p->virtio_dev));
 
 	put_device(&(imx6q_rpmsg_p->mid_dev));
@@ -270,12 +285,14 @@ static int imx6q_rpmsg_initialize(struct platform_device *pdev)
 	int index;
 	struct virtio_device *virtio_dev;
 	int size;
+	int cpu_id = smp_processor_id();
 
 	/* Register ipi handler. */
 	ret = set_ipi_handler(imx6q_rpmsg_p->vring0, ipi_handler,
 				"Firmware kick");
 
 	if (ret) {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, FAILURE);
 		dev_err(&pdev->dev, "IPI handler already registered\n");
 		return -ENODEV;
 	}
@@ -296,6 +313,7 @@ static int imx6q_rpmsg_initialize(struct platform_device *pdev)
 					DMA_MEMORY_IO);
 
 	if (!ret) {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, FAILURE);
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		return -ENODEV;
 	}
@@ -303,6 +321,7 @@ static int imx6q_rpmsg_initialize(struct platform_device *pdev)
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 
 	if (ret) {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, FAILURE);
 		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
 		return -ENODEV;
 	}
@@ -319,6 +338,7 @@ static int imx6q_rpmsg_initialize(struct platform_device *pdev)
 	index = ida_simple_get(&rpmsg_imx6q_dev_index, 0, 0, GFP_KERNEL);
 
 	if (index < 0) {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, FAILURE);
 		put_device(&(imx6q_rpmsg_p->mid_dev));
 		return -ENODEV;
 	}
@@ -338,6 +358,13 @@ static int imx6q_rpmsg_initialize(struct platform_device *pdev)
 	/* Register the virtio device. */
 	ret = register_virtio_device(virtio_dev);
 
+	if (ret) {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, FAILURE);
+ 	} else {
+		trace_MEMF_Remoteproc_Rsc_Init(imx6q_rpmsg_p, cpu_id, SUCCESS);
+	}
+
+
 	dev_info(&(imx6q_rpmsg_platform->dev), "virtio device registered \r\n");
 
 	return ret;
-- 
2.8.1

