From 653d2a4c2c7cd32cca1979660188eaa45d1ec58f Mon Sep 17 00:00:00 2001
From: Fahad Arslan <Fahad_Arslan@mentor.com>
Date: Mon, 6 Mar 2017 22:24:22 +0500
Subject: [PATCH 1/3] place memf master a53 tracepoints

Signed-off-by: Fahad Arslan <Fahad_Arslan@mentor.com>
---
 drivers/remoteproc/zynqmp_a53_remoteproc.c | 52 ++++++++++++++++++++++++++++--
 1 file changed, 50 insertions(+), 2 deletions(-)

diff --git a/drivers/remoteproc/zynqmp_a53_remoteproc.c b/drivers/remoteproc/zynqmp_a53_remoteproc.c
index fc082df..f104fe3 100644
--- a/drivers/remoteproc/zynqmp_a53_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_a53_remoteproc.c
@@ -25,6 +25,10 @@
  * GNU General Public License for more details.
  */
 
+#include <trace/events/MEMF.h>
+#define CREATE_TRACE_POINTS
+#include <trace/events/Synchronization.h>
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/err.h>
@@ -42,6 +46,12 @@
 
 #include "remoteproc_internal.h"
 
+#define	       RPROC_SUCCESS		0
+#define	       RPROC_FAILURE		1
+#define	       REMOTEPROC_BOOT		0
+#define	       REMOTEPROC_SHUTDOWN	1
+#define	       REMOTEPROC_ACTIVE	2
+
 #define GIC_BASE			0xF9000000
 #define GIC_CPU_ID_BASE			(1 << 4)
 #define GIC_DIST_BASE			(GIC_BASE + 0x0010000)
@@ -87,6 +97,7 @@ static struct work_struct memf_master_work;
 static void handle_event(struct work_struct *work)
 {
 	struct zynqmp_a53_rproc_pdata *local = platform_get_drvdata(remoteprocdev);
+	static bool initialized = false;
 
 	if (local == NULL) {
 		dev_err(&remoteprocdev->dev, "null pointer to remote private data\n");
@@ -94,6 +105,12 @@ static void handle_event(struct work_struct *work)
 	}
 	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
 		dev_dbg(&remoteprocdev->dev, "no message found in vqid 0\n");
+	else {
+		if (!initialized) {
+			initialized = true;
+			trace_MEMF_Remoteproc_State(local->rproc, REMOTEPROC_ACTIVE, RPROC_SUCCESS);
+		}
+	}
 }
 
 static void ipi_kick(void)
@@ -141,9 +158,13 @@ static int zynqmp_a53_rproc_start(struct rproc *rproc)
 	dev_dbg(dev, "rproc->bootaddr: %x, result:%x\n", rproc->bootaddr, x0);
 
 	ret = x0;
-	if (ret)
+	if (ret) {
 		dev_err(dev, "Failed to boot CPU[%d] using boot address: 0x%x. Return value: %d\n",
 				local->cpu, rproc->bootaddr, ret);
+		trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_BOOT, RPROC_FAILURE);
+	}
+	else
+		trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_BOOT, ret);
 
 	return ret;
 }
@@ -154,6 +175,7 @@ static void zynqmp_a53_rproc_kick(struct rproc *rproc, int vqid)
 	struct device *dev = rproc->dev.parent;
 	struct platform_device *pdev = to_platform_device(dev);
 	struct zynqmp_a53_rproc_pdata *local = platform_get_drvdata(pdev);
+	static bool initialized = false;
 
 	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
@@ -162,6 +184,11 @@ static void zynqmp_a53_rproc_kick(struct rproc *rproc, int vqid)
 		gic_raise_softirq(cpumask_of(local->cpu), local->vring0);
 	else
 		gic_raise_softirq(cpumask_of(local->cpu), local->vring1);
+
+	if (!initialized) {
+		initialized = true;
+		trace_Synchronization_TriggerSend(100, 0, "Trigger");
+	}
 }
 
 /* power off the remote processor */
@@ -185,6 +212,7 @@ static int zynqmp_a53_rproc_stop(struct rproc *rproc)
 	{
 		release_mem_region(GIC_DIST_BASE, 0xFFF);
 		dev_err(&pdev->dev, "unable to map GIC_DIST_BASE register\n");
+		trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_SHUTDOWN, RPROC_FAILURE);
 		return -ENOMEM;
 	}
 
@@ -194,6 +222,8 @@ static int zynqmp_a53_rproc_stop(struct rproc *rproc)
 	 */
 	reg_write(src_base, GIC_DIST_SOFTINT, mask);
 
+	trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_SHUTDOWN, RPROC_SUCCESS);
+
 	return 0;
 }
 
@@ -261,8 +291,10 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 
 	local = devm_kzalloc(&pdev->dev, sizeof(struct zynqmp_a53_rproc_pdata),
 			     GFP_KERNEL);
-	if (!local)
+	if (!local) {
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		return -ENOMEM;
+	}
 
 	platform_set_drvdata(pdev, local);
 
@@ -270,6 +302,7 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "invalid address\n");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		return -ENODEV;
 	}
 
@@ -283,12 +316,14 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 	if (!ret) {
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		ret = -ENOMEM;
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_fault;
 	}
 
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (ret) {
 		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_mask_fault;
 	}
 
@@ -307,6 +342,7 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 		if (!tmp) {
 			dev_err(&pdev->dev, "Unable to alloc irq list\n");
 			ret = -ENOMEM;
+			trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 			goto irq_fault;
 		}
 
@@ -321,6 +357,7 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 		if (ret) {
 			dev_err(&pdev->dev, "IRQ %d already allocated\n",
 								tmp->irq);
+			trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 			goto irq_fault;
 		}
 
@@ -339,12 +376,14 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 	ret = of_property_read_u32(pdev->dev.of_node, "vring0", &local->vring0);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto ipi_fault;
 	}
 
 	ret = set_ipi_handler(local->vring0, ipi_kick, "Firmware kick");
 	if (ret) {
 		dev_err(&pdev->dev, "IPI handler already registered\n");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -352,6 +391,7 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 	ret = of_property_read_u32(pdev->dev.of_node, "vring1", &local->vring1);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto ipi_fault;
 	}
 
@@ -359,6 +399,7 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 	ret = of_property_read_u32(pdev->dev.of_node, "cpu", &local->cpu);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read cpu property");
+		trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -374,15 +415,20 @@ static int zynqmp_a53_remoteproc_probe(struct platform_device *pdev)
 				&zynqmp_a53_rproc_ops, prop, sizeof(struct rproc));
 		if (!local->rproc) {
 			dev_err(&pdev->dev, "rproc allocation failed\n");
+			trace_MEMF_Remoteproc_Init(NULL, NULL, local->cpu, RPROC_FAILURE);
 			goto ipi_fault;
 		}
 
+		local->rproc->cpu = local->cpu;
+
 		ret = rproc_add(local->rproc);
 		if (ret) {
 			dev_err(&pdev->dev, "rproc registration failed\n");
+			trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, RPROC_FAILURE);
 			goto rproc_fault;
 		}
 
+		trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, ret);
 		return ret;
 	} else
 		ret = -ENODEV;
@@ -417,6 +463,8 @@ static int zynqmp_a53_remoteproc_remove(struct platform_device *pdev)
 	clear_ipi_handler(local->vring0);
 	clear_irq(pdev);
 
+	trace_MEMF_Remoteproc_DeInit(local->rproc, RPROC_SUCCESS);
+
 	rproc_del(local->rproc);
 	rproc_put(local->rproc);
 
-- 
2.8.1

