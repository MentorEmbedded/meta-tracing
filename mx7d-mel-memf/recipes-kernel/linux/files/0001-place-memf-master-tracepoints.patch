--- a/drivers/remoteproc/imx7d_remoteproc.c
+++ b/drivers/remoteproc/imx7d_remoteproc.c
@@ -45,6 +45,18 @@
 #include "imx7d_platform.h" /* defines for remote core */
 #include "remoteproc_internal.h"
 
+
+#include <trace/events/MEMF.h>
+#define CREATE_TRACE_POINTS
+#include <trace/events/Synchronization.h>
+
+#define        RPROC_SUCCESS                           0
+#define        RPROC_FAILURE                           1
+#define        REMOTEPROC_BOOT                         0
+#define        REMOTEPROC_SHUTDOWN                     1
+#define        REMOTEPROC_ACTIVE 			2 
+
+
 DEFINE_MUTEX(iomem_lock);
 
 static void __iomem *src_base;		//pointer to SRC Control Register
@@ -149,12 +161,21 @@
 static void handle_event(struct work_struct *work)
 {
 	struct imx7d_rproc_pdata *local = platform_get_drvdata(remoteprocdev);
+       static bool initialized = false;
 
 	flush_cache_all();
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	if (rproc_vq_interrupt(local->rproc, 0) == IRQ_NONE)
 		dev_dbg(&remoteprocdev->dev, "no message found in vqid 0\n");
+        else {
+               if (!initialized) {
+                       initialized = true;
+                       trace_MEMF_Remoteproc_State(local->rproc, REMOTEPROC_ACTIVE, RPROC_SUCCESS);
+               }
+       }
+
+
 }
 
 static irqreturn_t mu_interrupt_handler(int irq, void *dev_id)
@@ -193,7 +214,8 @@
 	outer_flush_range(local->mem_start, local->mem_end);
 
 	ret = cpu_start(rproc->bootaddr);
-    
+        trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_BOOT, ret);
+ 
 	return ret;
 }
 
@@ -204,9 +226,17 @@
 	struct platform_device *pdev = to_platform_device(dev);
 	struct imx7d_rproc_pdata *local = platform_get_drvdata(pdev);
 	u32 reg;
+       static bool initialized = false;
 
 	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
+
+       if (!initialized) {
+               initialized = true;
+               trace_Synchronization_TriggerSend(100, 0, "Trigger");
+       }
+
+
 	/* kick */
 	if(!vqid) {
 		reg = ioread32(mu_base + PR_MU_CR);
@@ -227,6 +257,7 @@
 
 	dev_info(dev, "imx7d_rproc_stop\n");
 	dev_info(dev, "disable MU interrupts ..\n");
+        trace_MEMF_Remoteproc_State(rproc, REMOTEPROC_SHUTDOWN, RPROC_SUCCESS);
 
 	/* FIXME missing reset option */
 	/* Disable MU interrupts */
@@ -260,14 +291,18 @@
 
 	local = devm_kzalloc(&pdev->dev, sizeof(struct imx7d_rproc_pdata),
 				GFP_KERNEL);
-	if (!local)
-		return -ENOMEM;
+       if (!local) {
+               trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
+               return -ENOMEM;
+       }
+
 
 	platform_set_drvdata(pdev, local);
 
 	/* Declare memory for firmware */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
+               trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		dev_err(&pdev->dev, "invalid address\n");
 		return -ENODEV;
 	}
@@ -285,12 +320,14 @@
 	if (!ret) {
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_fault;
 	}
 
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (ret) {
 		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto dma_mask_fault;
 	}
 	
@@ -298,13 +335,15 @@
 	if (irq == -ENXIO || irq == -EINVAL) {
 		dev_err(&pdev->dev, "Failed to get irq number");
 		ret = irq;
-		goto dma_mask_fault;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
+ 		goto dma_mask_fault;
 	}
 	
 	/* Read vring0 ipi number */
 	ret = of_property_read_u32(pdev->dev.of_node, "vring0-interrupt", &local->vring0);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -312,6 +351,7 @@
 	ret = of_property_read_u32(pdev->dev.of_node, "vring1-interrupt", &local->vring1);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to read property");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -320,6 +360,7 @@
 				0, dev_name(&pdev->dev), &pdev->dev);
 	if (ret) {
 		dev_err(&pdev->dev, "IRQ %d already allocated\n", irq);
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -333,6 +374,7 @@
 	if (!res) {
 		dev_err(&pdev->dev, "Unable to get SRC I/O memory\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
         
@@ -341,6 +383,7 @@
 		release_mem_region(PERIPH_SRC_BASE, SRC_SIZE);
 		dev_err(&pdev->dev, "unable to map SCR register\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -349,6 +392,7 @@
 	if (!res) {
 		dev_err(&pdev->dev, "Unable to get OCRAM I/O memory\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -357,6 +401,7 @@
 		release_mem_region(PR_M4_OCRAM_BASE, OCRAM_SIZE);
 		dev_err(&pdev->dev, "unable to map OCRAM register\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -365,6 +410,7 @@
 	if (!res) {
 		dev_err(&pdev->dev, "Unable to get MU I/O memory\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -373,6 +419,7 @@
 		release_mem_region(PR_MU_BASE, MU_SIZE);
 		dev_err(&pdev->dev, "unable to map MU register\n");
 		ret = -ENOMEM;
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -381,12 +428,14 @@
 	if (IS_ERR(mu_clk)) {
 		ret = PTR_ERR(mu_clk);
 		dev_err(&pdev->dev, "Unable to obtain MU clk\n");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	} else {
 		ret = clk_prepare_enable(mu_clk);
 		if (ret) {
 			dev_err(&pdev->dev,
 				"unable to enable mu clock\n");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 			goto irq_fault;
 		}
 	}
@@ -396,6 +445,7 @@
 	if (IS_ERR(m4_clk_mux)) {
 		dev_err(&pdev->dev, "devm_clk_get m4_root_src failed");
 		ret = PTR_ERR(m4_clk_mux);
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -404,6 +454,7 @@
 	if (IS_ERR(pll_240m)) {
 		dev_err(&pdev->dev, "devm_clk_get pll_240m failed");
 		ret = PTR_ERR(pll_240m);
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -412,6 +463,7 @@
 	if (IS_ERR(m4_clk)) {
 		dev_err(&pdev->dev, "clk_get m4_root_clk failed");
 		ret = PTR_ERR(m4_clk);
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -419,12 +471,14 @@
 	ret = clk_set_parent(m4_clk_mux, pll_240m);
 	if (ret) {
 		dev_err(&pdev->dev, "Failed to set parent of m4 mux clock");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
 	ret = clk_prepare_enable(m4_clk);
 	if (ret) {
 		dev_err(&pdev->dev, "unable to enable Cortex M4 clock\n");
+                trace_MEMF_Remoteproc_Init(NULL, NULL, NULL, RPROC_FAILURE);
 		goto irq_fault;
 	}
 
@@ -444,12 +498,15 @@
 			dev_err(&pdev->dev, "rproc allocation failed\n");
 			goto irq_fault;
 		}
+               local->rproc->cpu = local->cpu;
 
 		ret = rproc_add(local->rproc);
 		if (ret) {
 			dev_err(&pdev->dev, "rproc registration failed\n");
+                        trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, RPROC_FAILURE);
 			goto rproc_fault;
 		}
+               trace_MEMF_Remoteproc_Init(local->rproc, prop, local->cpu, ret);
 
 		return ret;
 	} else
@@ -484,6 +541,7 @@
 	release_mem_region(PERIPH_SRC_BASE, SRC_SIZE);
 	release_mem_region(PR_M4_OCRAM_BASE, OCRAM_SIZE);
 	release_mem_region(PR_MU_BASE, MU_SIZE);
+        trace_MEMF_Remoteproc_DeInit(local->rproc, RPROC_SUCCESS);
 
 	rproc_del(local->rproc);
 	rproc_put(local->rproc);
