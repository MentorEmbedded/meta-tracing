--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -17,6 +17,15 @@
  * GNU General Public License for more details.
  */
 
+
+#define CREATE_TRACE_POINTS
+#include <trace/events/MEMF.h>
+
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_Init);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_DeInit);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_State);
+
+
 #define pr_fmt(fmt) "%s: " fmt, __func__
 
 #include <linux/kernel.h>
@@ -35,6 +44,13 @@
 #include <linux/mutex.h>
 #include <linux/delay.h>
 
+#define RPMSG_SUCCESS          0
+#define RPMSG_FAILURE          1
+#define RPROC_REMOTE           0
+#define RPROC_MASTER           1
+
+
+
 /**
  * struct virtproc_info - virtual remote processor state
  * @vdev:	the virtio device
@@ -226,6 +242,8 @@
 	ept = kzalloc(sizeof(*ept), GFP_KERNEL);
 	if (!ept) {
 		dev_err(dev, "failed to kzalloc a new ept\n");
+               trace_MEMF_RPMsg_Ept_Create(vrp, NULL, NULL, RPMSG_FAILURE);
+
 		return NULL;
 	}
 
@@ -251,6 +269,7 @@
 	id = idr_alloc(&vrp->endpoints, ept, id_min, id_max, GFP_KERNEL);
 	if (id < 0) {
 		dev_err(dev, "idr_alloc failed: %d\n", id);
+                trace_MEMF_RPMsg_Ept_Create(vrp, ept, NULL, RPMSG_FAILURE);
 		goto free_ept;
 	}
 	ept->addr = id;
@@ -308,7 +327,14 @@
 struct rpmsg_endpoint *rpmsg_create_ept(struct rpmsg_channel *rpdev,
 				rpmsg_rx_cb_t cb, void *priv, u32 addr)
 {
-	return __rpmsg_create_ept(rpdev->vrp, rpdev, cb, priv, addr);
+       struct rpmsg_endpoint *ept;
+       ept =  __rpmsg_create_ept(rpdev->vrp, rpdev, cb, priv, addr);
+       if (ept) {
+               trace_MEMF_RPMsg_Ept_Create(rpdev->vrp, ept, ept->addr, RPMSG_SUCCESS);
+               return ept;
+       }
+
+
 }
 EXPORT_SYMBOL(rpmsg_create_ept);
 
@@ -325,6 +351,8 @@
 static void
 __rpmsg_destroy_ept(struct virtproc_info *vrp, struct rpmsg_endpoint *ept)
 {
+
+       trace_MEMF_RPMsg_Ept_Delete(ept, RPMSG_SUCCESS);
 	/* make sure new inbound messages can't find this ept anymore */
 	mutex_lock(&vrp->endpoints_lock);
 	idr_remove(&vrp->endpoints, ept->addr);
@@ -513,12 +541,18 @@
 		put_device(tmp);
 		dev_err(dev, "channel %s:%x:%x already exist\n",
 				chinfo->name, chinfo->src, chinfo->dst);
+	        trace_MEMF_RPMsg_Channel_Create(vrp, NULL, NULL, NULL, NULL,
+                       RPMSG_FAILURE);
+
 		return NULL;
 	}
 
 	rpdev = kzalloc(sizeof(struct rpmsg_channel), GFP_KERNEL);
 	if (!rpdev) {
 		pr_err("kzalloc failed\n");
+                trace_MEMF_RPMsg_Channel_Create(vrp, rpdev, NULL, NULL, NULL,
+                       RPMSG_FAILURE);
+
 		return NULL;
 	}
 
@@ -562,8 +596,12 @@
 	struct device *dev;
 
 	dev = device_find_child(&vdev->dev, chinfo, rpmsg_channel_match);
-	if (!dev)
-		return -EINVAL;
+       if (!dev) {
+               trace_MEMF_RPMsg_Channel_Delete(NULL, RPMSG_FAILURE);
+               return -EINVAL;
+       }
+
+       trace_MEMF_RPMsg_Channel_Delete(to_rpmsg_channel(dev), RPMSG_SUCCESS);
 
 	device_unregister(dev);
 
@@ -1027,6 +1065,7 @@
 	print_hex_dump(KERN_DEBUG, "rpmsg_virtio RX: ", DUMP_PREFIX_NONE, 16, 1,
 					msg, sizeof(*msg) + msg->len, true);
 #endif
+       trace_MEMF_RPMsg_Rx_Start(vrp, msg->src, msg->dst, msg->len, RPMSG_SUCCESS);
 
 	/* use the dst addr to fetch the callback of the appropriate user */
 	mutex_lock(&vrp->endpoints_lock);
@@ -1065,6 +1104,7 @@
 		__rpmsg_deinit_rx_buf(vrp->rvq, rxb);
 		rpmsg_dealloc(rxb);
 	}
+       trace_MEMF_RPMsg_Rx_Stop(vrp, msg->src, msg->dst, msg->len, RPMSG_SUCCESS);
 
         return 0;
 }
@@ -1128,6 +1168,7 @@
 
 	/* bcasting isn't allowed */
 	if (src == RPMSG_ADDR_ANY || dst == RPMSG_ADDR_ANY) {
+               trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_FAILURE);
 		dev_err(dev, "invalid addr (src 0x%x, dst 0x%x)\n", src, dst);
 		return -EINVAL;
 	}
@@ -1147,6 +1188,8 @@
 
 		if (ret && !wait) {
 			dev_err(dev, "Failed to create rpmsg tx buffer\n");
+                       trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_FAILURE);
+
 			return -ENOMEM;
 		}
 
@@ -1171,12 +1214,15 @@
 			/* timeout ? */
 			if (!err) {
 				dev_err(dev, "timeout waiting for a tx buffer\n");
+                                trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_FAILURE);
 				return -ERESTARTSYS;
 			}
 		}
 	} else {
 		tx_buf = (struct rpmsg_buffer *)data;
 	}
+       trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_SUCCESS);
+
 	/* Initialize scatterlist which will hold physical addresses of buffers to transmit */
 	sg_init_table(sgl, tx_buf->buffer_count);
 
@@ -1193,7 +1239,9 @@
 
 	if (!rp_hdr) {
 		dev_err(dev, "Unable to get rpmsg header buffer\n");
+                trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_FAILURE);
 		return -ENOMEM;
+
 	}
 
 	rp_hdr->len = len;
@@ -1250,11 +1298,15 @@
 		 * this will wait for a buffer management overhaul.
 		 */
 		dev_err(dev, "virtqueue_add_outbuf failed: %d\n", err);
+                trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_FAILURE);
+
 		goto out;
 	}
 
 	/* tell the remote processor it has a pending message to read */
 	virtqueue_kick(vrp->svq);
+       trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_SUCCESS);
+
 out:
 	/* free-up the rpmsg tx buffer */
 	if (!zc) {
@@ -1314,7 +1366,9 @@
 
 	/* bcasting isn't allowed */
 	if (src == RPMSG_ADDR_ANY || dst == RPMSG_ADDR_ANY) {
-		dev_err(dev, "invalid addr (src 0x%x, dst 0x%x)\n", src, dst);
+               trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_FAILURE);
+	
+    	        dev_err(dev, "invalid addr (src 0x%x, dst 0x%x)\n", src, dst);
 		return -EINVAL;
 	}
 
@@ -1329,8 +1383,11 @@
 	 */
 	if (len > RPMSG_BUF_SIZE - sizeof(struct rpmsg_hdr)) {
 		dev_err(dev, "message is too big (%d)\n", len);
+               trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_FAILURE);
+
 		return -EMSGSIZE;
 	}
+       trace_MEMF_RPMsg_Tx_Start(rpdev, src, dst, len, RPMSG_SUCCESS);
 
 	/* grab a buffer */
 #ifdef CONFIG_MEMF
@@ -1339,8 +1396,11 @@
 	msg = get_a_tx_buf(vrp);
 
 #endif
-	if (!msg && !wait)
-		return -ENOMEM;
+       if (!msg && !wait) {
+               trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_FAILURE);
+               return -ENOMEM;
+       }
+
 
 	/* no free buffer ? wait for one (but bail after 15 seconds) */
 	while (!msg) {
@@ -1367,6 +1427,8 @@
 		/* timeout ? */
 		if (!err) {
 			dev_err(dev, "timeout waiting for a tx buffer\n");
+                       trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_FAILURE);
+
 			return -ERESTARTSYS;
 		}
 	}
@@ -1409,11 +1471,15 @@
 		 * this will wait for a buffer management overhaul.
 		 */
 		dev_err(dev, "virtqueue_add_outbuf failed: %d\n", err);
+               trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_FAILURE);
+
 		goto out;
 	}
 
 	/* tell the remote processor it has a pending message to read */
 	virtqueue_kick(vrp->svq);
+       trace_MEMF_RPMsg_Tx_Stop(rpdev, src, dst, len, RPMSG_SUCCESS);
+
 out:
 	mutex_unlock(&vrp->tx_lock);
 	return err;
@@ -1624,10 +1690,19 @@
 	bool notify;
 	void *cookie[1];
 	struct shmem_buffer *buffer;
+       int remote_cpu_id;
+
+       remote_cpu_id = *((int *)vdev->priv);
+
 
 	vrp = kzalloc(sizeof(*vrp), GFP_KERNEL);
-	if (!vrp)
-		return -ENOMEM;
+
+       if (!vrp) {
+               trace_MEMF_RPMsg_Init(NULL, remote_cpu_id, RPROC_REMOTE,
+                       RPMSG_FAILURE);
+                return -ENOMEM;
+       }
+
 
 	vrp->vdev = vdev;
 
@@ -1638,8 +1713,12 @@
 
 	/* We expect two virtqueues, rx and tx (and in this order) */
 	err = vdev->config->find_vqs(vdev, 2, vqs, vq_cbs, names);
-	if (err)
-		goto free_vrp;
+       if (err) {
+               trace_MEMF_RPMsg_Init((unsigned int)vrp, remote_cpu_id,
+                       RPROC_REMOTE, RPMSG_FAILURE);
+                goto free_vrp;
+       }
+
 
 	vrp->rvq = vqs[0];
 	vrp->svq = vqs[1];
@@ -1662,6 +1741,8 @@
 				     GFP_KERNEL);
 	if (!bufs_va) {
 		err = -ENOMEM;
+               trace_MEMF_RPMsg_Init((unsigned int)vrp, remote_cpu_id,
+                       RPROC_REMOTE, RPMSG_FAILURE);
 		goto vqs_del;
 	}
 
@@ -1754,8 +1835,12 @@
 	 * this might be concurrent with callbacks, but we are only
 	 * doing notify, not a full kick here, so that's ok.
 	 */
-	if (notify)
-		virtqueue_notify(vrp->rvq);
+
+       if (notify) {
+               trace_MEMF_RPMsg_Init((unsigned int)vrp, remote_cpu_id, RPROC_REMOTE, RPMSG_SUCCESS);
+                virtqueue_notify(vrp->rvq);
+       }
+
 
 	dev_info(&vdev->dev, "rpmsg host is online\n");
 
@@ -1788,6 +1873,9 @@
 	if (ret)
 		dev_warn(&vdev->dev, "can't remove rpmsg device: %d\n", ret);
 
+       trace_MEMF_RPMsg_DeInit(vrp, ret);
+
+
 	if (vrp->ns_ept)
 		__rpmsg_destroy_ept(vrp, vrp->ns_ept);
 
