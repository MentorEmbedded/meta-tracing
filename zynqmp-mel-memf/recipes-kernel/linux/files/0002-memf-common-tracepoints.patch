From a7f76912805d94d70e5aff8be1b2601c10e819e4 Mon Sep 17 00:00:00 2001
From: Ahsan Hussain <ahsan_hussain@mentor.com>
Date: Thu, 12 Apr 2018 18:43:30 +0500
Subject: [PATCH 2/3] MEMF common tracepoints

Signed-off-by: Ahsan Hussain <ahsan_hussain@mentor.com>
---
 drivers/remoteproc/Makefile              |  1 +
 drivers/remoteproc/remoteproc_core.c     | 34 +++++++++++-
 drivers/remoteproc/remoteproc_internal.h |  6 ++
 drivers/remoteproc/remoteproc_tracing.c  | 40 ++++++++++++++
 drivers/remoteproc/remoteproc_virtio.c   |  3 +
 drivers/rpmsg/virtio_rpmsg_bus.c         | 95 +++++++++++++++++++++++++++++---
 include/linux/remoteproc.h               |  2 +
 7 files changed, 171 insertions(+), 10 deletions(-)
 create mode 100644 drivers/remoteproc/remoteproc_tracing.c

diff --git a/drivers/remoteproc/Makefile b/drivers/remoteproc/Makefile
index 007d7b6..8140e48 100644
--- a/drivers/remoteproc/Makefile
+++ b/drivers/remoteproc/Makefile
@@ -8,6 +8,7 @@ remoteproc-y				+= remoteproc_debugfs.o
 remoteproc-y				+= remoteproc_sysfs.o
 remoteproc-y				+= remoteproc_virtio.o
 remoteproc-y				+= remoteproc_elf_loader.o
+remoteproc-y				+= remoteproc_tracing.o
 obj-$(CONFIG_OMAP_REMOTEPROC)		+= omap_remoteproc.o
 obj-$(CONFIG_STE_MODEM_RPROC)	 	+= ste_modem_rproc.o
 obj-$(CONFIG_WKUP_M3_RPROC)		+= wkup_m3_rproc.o
diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 3c25f90..67886a2 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -24,6 +24,9 @@
 
 #define pr_fmt(fmt)    "%s: " fmt, __func__
 
+#include <trace/events/MEMF.h>
+#include <trace/events/Synchronization.h>
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/device.h>
@@ -996,6 +999,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	ret = rproc_enable_iommu(rproc);
 	if (ret) {
 		dev_err(dev, "can't enable iommu: %d\n", ret);
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_FAILURE);
 		return ret;
 	}
 
@@ -1006,6 +1011,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	table = rproc_find_rsc_table(rproc, fw, &tablesz);
 	if (!table) {
 		dev_err(dev, "Failed to find resource table\n");
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_FAILURE);
 		goto clean_up;
 	}
 
@@ -1042,6 +1049,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	if (ret) {
 		dev_err(dev, "Failed to declare rproc memory resource: %d\n",
 			ret);
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_FAILURE);
 		goto clean_up_resources;
 	}
 
@@ -1049,6 +1058,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	ret = rproc_handle_resources(rproc, tablesz, rproc_vdev_handler);
 	if (ret) {
 		dev_err(dev, "Failed to handle vdev resources: %d\n", ret);
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_FAILURE);
 		goto clean_up_resources;
 	}
 
@@ -1056,6 +1067,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	ret = rproc_handle_resources(rproc, tablesz, rproc_loading_handlers);
 	if (ret) {
 		dev_err(dev, "Failed to process resources: %d\n", ret);
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_FAILURE);
 		goto clean_up_resources;
 	}
 
@@ -1067,6 +1080,9 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 			if (ret) {
 				atomic_inc(&rproc->power);
 				dev_err(dev, "can't stop rproc: %d\n", ret);
+				trace_MEMF_Remoteproc_State((u64)rproc,
+							    REMOTEPROC_BOOT,
+							    RPROC_FAILURE);
 				goto clean_up_resources;
 			}
 		}
@@ -1076,6 +1092,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 		if (ret) {
 			dev_err(dev, "Failed to load program segments: %d\n",
 				ret);
+			trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+						    RPROC_FAILURE);
 			goto clean_up_resources;
 		}
 
@@ -1099,11 +1117,15 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 		if (ret) {
 			dev_err(dev, "can't start rproc %s: %d\n",
 				rproc->name, ret);
+			trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+						    RPROC_FAILURE);
 			goto clean_up_resources;
 		}
 
 		rproc->state = RPROC_RUNNING;
 		dev_info(dev, "remote processor %s is now up\n", rproc->name);
+		trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_BOOT,
+					    RPROC_SUCCESS);
 	} else {
 		dev_info(dev, "remote is already running. Do not restart\n");
 	}
@@ -1237,6 +1259,7 @@ static int __rproc_boot(struct rproc *rproc)
 	const struct firmware *firmware_p;
 	struct device *dev;
 	int ret;
+	u32 cpu_id = rproc->cpu;
 
 	if (!rproc) {
 		pr_err("invalid rproc handle\n");
@@ -1247,6 +1270,7 @@ static int __rproc_boot(struct rproc *rproc)
 
 	ret = mutex_lock_interruptible(&rproc->lock);
 	if (ret) {
+		trace_MEMF_Remoteproc_Init(0, NULL, cpu_id, RPROC_FAILURE);
 		dev_err(dev, "can't lock rproc %s: %d\n", rproc->name, ret);
 		return ret;
 	}
@@ -1254,6 +1278,7 @@ static int __rproc_boot(struct rproc *rproc)
 	if (rproc->state == RPROC_DELETED) {
 		ret = -ENODEV;
 		dev_err(dev, "can't boot deleted rproc %s\n", rproc->name);
+		trace_MEMF_Remoteproc_Init(0, NULL, cpu_id, RPROC_FAILURE);
 		goto unlock_mutex;
 	}
 
@@ -1269,6 +1294,8 @@ static int __rproc_boot(struct rproc *rproc)
 	ret = request_firmware(&firmware_p, rproc->firmware, dev);
 	if (ret < 0) {
 		dev_err(dev, "request_firmware failed: %d\n", ret);
+		trace_MEMF_Remoteproc_Init(0, rproc->firmware,
+					   cpu_id, RPROC_FAILURE);
 		goto downref_rproc;
 	}
 
@@ -1277,10 +1304,15 @@ static int __rproc_boot(struct rproc *rproc)
 	release_firmware(firmware_p);
 
 downref_rproc:
-	if (ret)
+	if (ret){
 		atomic_dec(&rproc->power);
+		trace_MEMF_Remoteproc_Init(0, rproc->firmware,
+					   cpu_id, RPROC_FAILURE);
+	}
 unlock_mutex:
 	mutex_unlock(&rproc->lock);
+	trace_MEMF_Remoteproc_Init(0, rproc->firmware,
+					cpu_id, RPROC_SUCCESS);
 	return ret;
 }
 
diff --git a/drivers/remoteproc/remoteproc_internal.h b/drivers/remoteproc/remoteproc_internal.h
index ce59ab5..1601fd6 100644
--- a/drivers/remoteproc/remoteproc_internal.h
+++ b/drivers/remoteproc/remoteproc_internal.h
@@ -23,6 +23,12 @@
 #include <linux/irqreturn.h>
 #include <linux/firmware.h>
 
+#define	       RPROC_SUCCESS            0
+#define	       RPROC_FAILURE            1
+#define	       REMOTEPROC_BOOT          0
+#define	       REMOTEPROC_SHUTDOWN      1
+#define	       REMOTEPROC_ACTIVE        2
+
 
 /**
  * enum rproc_id_rsc_type -  types of data which needs idr
diff --git a/drivers/remoteproc/remoteproc_tracing.c b/drivers/remoteproc/remoteproc_tracing.c
new file mode 100644
index 0000000..07b8379
--- /dev/null
+++ b/drivers/remoteproc/remoteproc_tracing.c
@@ -0,0 +1,40 @@
+/*
+ * Remote Processor Tracing
+ *
+ * Copyright (C) 2017 Mentor Graphics Corporation
+ *
+ * Fahad Arslan <fahad_arslan@mentor.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#define CREATE_TRACE_POINTS
+#include <trace/events/Synchronization.h>
+#define CREATE_TRACE_POINTS
+#include <trace/events/MEMF.h>
+
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Init);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_DeInit);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Channel_Create);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Channel_Delete);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Ept_Create);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Ept_Delete);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Tx_Start);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Tx_Stop);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Rx_Start);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_RPMsg_Rx_Stop);
+
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_Init);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_DeInit);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_State);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_Rsc_Init);
+EXPORT_TRACEPOINT_SYMBOL(MEMF_Remoteproc_Rsc_Deinit);
+
+EXPORT_TRACEPOINT_SYMBOL(Synchronization_TriggerSend);
diff --git a/drivers/remoteproc/remoteproc_virtio.c b/drivers/remoteproc/remoteproc_virtio.c
index 6f877c2..e383f3f 100644
--- a/drivers/remoteproc/remoteproc_virtio.c
+++ b/drivers/remoteproc/remoteproc_virtio.c
@@ -385,6 +385,9 @@ int rproc_add_virtio_dev(struct rproc_vdev *rvdev, int id)
 	 */
 	get_device(&rproc->dev);
 
+	/* store cpu id of remote proc to pass it to rpmsg framework */
+	vdev->priv = &rproc->cpu;
+
 	/*
 	 * Assign an rproc-wide unique index for this rvdev
 	 */
diff --git a/drivers/rpmsg/virtio_rpmsg_bus.c b/drivers/rpmsg/virtio_rpmsg_bus.c
index 42f64b1..4d0cd87 100644
--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -19,6 +19,8 @@
 
 #define pr_fmt(fmt) "%s: " fmt, __func__
 
+#include <trace/events/MEMF.h>
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -39,6 +41,11 @@
 
 #include "rpmsg_internal.h"
 
+#define RPMSG_SUCCESS		0
+#define RPMSG_FAILURE		1
+#define RPROC_REMOTE		0
+#define RPROC_MASTER		1
+
 /**
  * struct virtproc_info - virtual remote processor state
  * @vdev:	the virtio device
@@ -255,8 +262,11 @@ static struct rpmsg_endpoint *__rpmsg_create_ept(struct virtproc_info *vrp,
 	struct device *dev = rpdev ? &rpdev->dev : &vrp->vdev->dev;
 
 	ept = kzalloc(sizeof(*ept), GFP_KERNEL);
-	if (!ept)
+	if (!ept) {
+		/* use 999 as invalid id, instead of wrongly setting 0/NULL */
+		trace_MEMF_RPMsg_Ept_Create((u64)vrp, 0, 999, RPMSG_FAILURE);
 		return NULL;
+	}
 
 	kref_init(&ept->refcount);
 	mutex_init(&ept->cb_lock);
@@ -281,12 +291,15 @@ static struct rpmsg_endpoint *__rpmsg_create_ept(struct virtproc_info *vrp,
 	id = idr_alloc(&vrp->endpoints, ept, id_min, id_max, GFP_KERNEL);
 	if (id < 0) {
 		dev_err(dev, "idr_alloc failed: %d\n", id);
+		trace_MEMF_RPMsg_Ept_Create((u64)vrp, 0, 999, RPMSG_FAILURE);
 		goto free_ept;
 	}
 	ept->addr = id;
 
 	mutex_unlock(&vrp->endpoints_lock);
 
+	trace_MEMF_RPMsg_Ept_Create((u64)vrp, (u64)ept, (u64)id, RPMSG_SUCCESS);
+
 	return ept;
 
 free_ept:
@@ -422,7 +435,7 @@ static const struct rpmsg_device_ops virtio_rpmsg_ops = {
  * channels.
  */
 static struct rpmsg_device *rpmsg_create_channel(struct virtproc_info *vrp,
-						 struct rpmsg_channel_info *chinfo)
+					 struct rpmsg_channel_info *chinfo)
 {
 	struct virtio_rpmsg_channel *vch;
 	struct rpmsg_device *rpdev;
@@ -436,12 +449,17 @@ static struct rpmsg_device *rpmsg_create_channel(struct virtproc_info *vrp,
 		put_device(tmp);
 		dev_err(dev, "channel %s:%x:%x already exist\n",
 				chinfo->name, chinfo->src, chinfo->dst);
+		trace_MEMF_RPMsg_Channel_Create((u64)vrp, 0, NULL, 0, 0,
+				RPMSG_FAILURE);
 		return NULL;
 	}
 
 	vch = kzalloc(sizeof(*vch), GFP_KERNEL);
-	if (!vch)
+	if (!vch) {
+		trace_MEMF_RPMsg_Channel_Create((u64)vrp, 0, NULL, 0, 0,
+			RPMSG_FAILURE);
 		return NULL;
+	}
 
 	/* Link the channel to our vrp */
 	vch->vrp = vrp;
@@ -465,8 +483,14 @@ static struct rpmsg_device *rpmsg_create_channel(struct virtproc_info *vrp,
 
 	rpdev->dev.parent = &vrp->vdev->dev;
 	ret = rpmsg_register_device(rpdev);
-	if (ret)
+	if (ret) {
+		trace_MEMF_RPMsg_Channel_Create((u64)vrp, 0, NULL, 0, 0,
+			RPMSG_FAILURE);
 		return NULL;
+	}
+
+	trace_MEMF_RPMsg_Channel_Create((u64)vrp, (u64)rpdev, rpdev->id.name,
+		(u64)rpdev->src, (u64)rpdev->dst, RPMSG_SUCCESS);
 
 	return rpdev;
 }
@@ -922,6 +946,9 @@ static int rpmsg_recv_large(struct virtproc_info *vrp, struct device *dev,
 					msg, sizeof(*msg) + msg->len, true);
 #endif
 
+	trace_MEMF_RPMsg_Rx_Start((u64)vrp, msg->src, msg->dst, msg->len,
+				  RPMSG_SUCCESS);
+
 	/* use the dst addr to fetch the callback of the appropriate user */
 	mutex_lock(&vrp->endpoints_lock);
 	ept = idr_find(&vrp->endpoints, msg->dst);
@@ -960,6 +987,9 @@ static int rpmsg_recv_large(struct virtproc_info *vrp, struct device *dev,
 		rpmsg_dealloc(rxb);
 	}
 
+        trace_MEMF_RPMsg_Rx_Stop((u64)vrp, msg->src, msg->dst, msg->len,
+				 RPMSG_SUCCESS);
+
         return 0;
 }
 
@@ -1023,21 +1053,25 @@ int rpmsg_send_offchannel_raw_large(struct rpmsg_device *rpdev, u32 src,
 	/* bcasting isn't allowed */
 	if (src == RPMSG_ADDR_ANY || dst == RPMSG_ADDR_ANY) {
 		dev_err(dev, "invalid addr (src 0x%x, dst 0x%x)\n", src, dst);
+		trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -EINVAL;
 	}
 
 	sgl = vmalloc(sizeof(struct scatterlist) * 256);
 	if (NULL == sgl) {
 		dev_err(dev, "Unable to allocate scatterlist\n");
+		trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -ENOMEM;
 	}
 
 	cookie = vmalloc(sizeof(void*) * 256);
 	if (NULL == cookie) {
 		dev_err(dev, "Unable to allocate cookies for sglist\n");
+		trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -ENOMEM;
 	}
 
+	trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_SUCCESS);
 	if(!zc) {
 		/* Instantiate rpmsg buffer based on data size here.
 		 * Make sure to deinit it using rpmsg_release_buffer
@@ -1047,12 +1081,16 @@ int rpmsg_send_offchannel_raw_large(struct rpmsg_device *rpdev, u32 src,
 		tx_buf = rpmsg_alloc();
 		if (!tx_buf) {
 			dev_err(dev, "Failed to create tx buffer \n");
+			trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len,
+						 RPMSG_FAILURE);
 			goto err_mem;
 		}
 		ret = rpmsg_init_tx_buf(rpdev, tx_buf, len);
 
 		if (ret && !wait) {
 			dev_err(dev, "Failed to create rpmsg tx buffer\n");
+			trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len,
+						 RPMSG_FAILURE);
 			goto err_mem;
 		}
 
@@ -1077,6 +1115,8 @@ int rpmsg_send_offchannel_raw_large(struct rpmsg_device *rpdev, u32 src,
 			/* timeout ? */
 			if (!err) {
 				dev_err(dev, "timeout waiting for tx buffer\n");
+				trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len,
+							 RPMSG_FAILURE);
 				vfree(sgl);
 				vfree(cookie);
 				return -ERESTARTSYS;
@@ -1102,6 +1142,7 @@ int rpmsg_send_offchannel_raw_large(struct rpmsg_device *rpdev, u32 src,
 
 	if (!rp_hdr) {
 		dev_err(dev, "Unable to get rpmsg header buffer\n");
+		trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		err = -ENOMEM;
 		goto err_mem;
 	}
@@ -1166,6 +1207,7 @@ int rpmsg_send_offchannel_raw_large(struct rpmsg_device *rpdev, u32 src,
 
 	/* tell the remote processor it has a pending message to read */
 	virtqueue_kick(vrp->svq);
+	trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len, RPMSG_SUCCESS);
 out:
 	/* free-up the rpmsg tx buffer */
 	if (!zc) {
@@ -1236,6 +1278,7 @@ static int rpmsg_send_offchannel_raw(struct rpmsg_device *rpdev,
 	/* bcasting isn't allowed */
 	if (src == RPMSG_ADDR_ANY || dst == RPMSG_ADDR_ANY) {
 		dev_err(dev, "invalid addr (src 0x%x, dst 0x%x)\n", src, dst);
+		trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -EINVAL;
 	}
 
@@ -1250,17 +1293,22 @@ static int rpmsg_send_offchannel_raw(struct rpmsg_device *rpdev,
 	 */
 	if (len > RPMSG_BUF_SIZE - sizeof(struct rpmsg_hdr)) {
 		dev_err(dev, "message is too big (%d)\n", len);
+		trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -EMSGSIZE;
 	}
 
+	trace_MEMF_RPMsg_Tx_Start((u64)rpdev, src, dst, len, RPMSG_SUCCESS);
+
 	/* grab a buffer */
 #ifdef CONFIG_MEMF
 	msg = get_shmem_buffer(vrp);
 #else
 	msg = get_a_tx_buf(vrp);
 #endif
-	if (!msg && !wait)
+	if (!msg && !wait) {
+		trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		return -ENOMEM;
+	}
 
 	/* no free buffer ? wait for one (but bail after 15 seconds) */
 	while (!msg) {
@@ -1287,6 +1335,8 @@ static int rpmsg_send_offchannel_raw(struct rpmsg_device *rpdev,
 		/* timeout ? */
 		if (!err) {
 			dev_err(dev, "timeout waiting for a tx buffer\n");
+			trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len,
+						 RPMSG_FAILURE);
 			return -ERESTARTSYS;
 		}
 	}
@@ -1332,11 +1382,13 @@ static int rpmsg_send_offchannel_raw(struct rpmsg_device *rpdev,
 		 * this will wait for a buffer management overhaul.
 		 */
 		dev_err(dev, "virtqueue_add_outbuf failed: %d\n", err);
+		trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len, RPMSG_FAILURE);
 		goto out;
 	}
 
 	/* tell the remote processor it has a pending message to read */
 	virtqueue_kick(vrp->svq);
+	trace_MEMF_RPMsg_Tx_Stop((u64)rpdev, src, dst, len, RPMSG_SUCCESS);
 out:
 	mutex_unlock(&vrp->tx_lock);
 	return err;
@@ -1579,8 +1631,13 @@ static int rpmsg_ns_cb(struct rpmsg_device *rpdev, void *data, int len,
 
 	if (msg->flags & RPMSG_NS_DESTROY) {
 		ret = rpmsg_unregister_device(&vrp->vdev->dev, &chinfo);
-		if (ret)
+		if (ret) {
 			dev_err(dev, "rpmsg_destroy_channel failed: %d\n", ret);
+			trace_MEMF_RPMsg_Channel_Delete(0, RPMSG_FAILURE);
+		} else {
+			trace_MEMF_RPMsg_Channel_Delete((u64)to_rpmsg_device(dev),
+							RPMSG_SUCCESS);
+		}
 	} else {
 		newch = rpmsg_create_channel(vrp, &chinfo);
 		if (!newch)
@@ -1605,10 +1662,16 @@ static int rpmsg_probe(struct virtio_device *vdev)
 	struct shmem_buffer *buffer;
 	dma_addr_t dma_address;
 #endif
+	int remote_cpu_id;
+
+	remote_cpu_id = *((int *)vdev->priv);
 
 	vrp = kzalloc(sizeof(*vrp), GFP_KERNEL);
-	if (!vrp)
+	if (!vrp) {
+		trace_MEMF_RPMsg_Init(0, remote_cpu_id, RPROC_REMOTE,
+				      RPMSG_FAILURE);
 		return -ENOMEM;
+	}
 
 	vrp->vdev = vdev;
 
@@ -1619,8 +1682,11 @@ static int rpmsg_probe(struct virtio_device *vdev)
 
 	/* We expect two virtqueues, rx and tx (and in this order) */
 	err = vdev->config->find_vqs(vdev, 2, vqs, vq_cbs, names);
-	if (err)
+	if (err) {
+		trace_MEMF_RPMsg_Init((u64)vrp, remote_cpu_id,
+				      RPROC_REMOTE, RPMSG_FAILURE);
 		goto free_vrp;
+	}
 
 	vrp->rvq = vqs[0];
 	vrp->svq = vqs[1];
@@ -1643,6 +1709,8 @@ static int rpmsg_probe(struct virtio_device *vdev)
 				     GFP_KERNEL);
 	if (!bufs_va) {
 		err = -ENOMEM;
+		trace_MEMF_RPMsg_Init((u64)vrp, remote_cpu_id,
+				      RPROC_REMOTE, RPMSG_FAILURE);
 		goto vqs_del;
 	}
 
@@ -1686,6 +1754,8 @@ static int rpmsg_probe(struct virtio_device *vdev)
 		buffer = kzalloc(sizeof(struct shmem_buffer), GFP_KERNEL);
 		if (!buffer) {
 			dev_err(&vdev->dev, "Failed to allocate list of shmem buffers \n");
+			trace_MEMF_RPMsg_Init((u64)vrp, remote_cpu_id,
+					      RPROC_REMOTE, RPMSG_FAILURE);
 			/* free up resources */
 			list_for_each_entry(buffer, &vrp->mem_pool.pool_head,
 					    buffer_head) {
@@ -1718,6 +1788,8 @@ static int rpmsg_probe(struct virtio_device *vdev)
 						vrp, RPMSG_NS_ADDR);
 		if (!vrp->ns_ept) {
 			dev_err(&vdev->dev, "failed to create the ns ept\n");
+			trace_MEMF_RPMsg_Init((u64)vrp, remote_cpu_id,
+					      RPROC_REMOTE, RPMSG_FAILURE);
 			err = -ENOMEM;
 			goto free_coherent;
 		}
@@ -1737,8 +1809,11 @@ static int rpmsg_probe(struct virtio_device *vdev)
 	 * this might be concurrent with callbacks, but we are only
 	 * doing notify, not a full kick here, so that's ok.
 	 */
-	if (notify)
+	if (notify) {
+		trace_MEMF_RPMsg_Init((u64)vrp, remote_cpu_id,
+				      RPROC_REMOTE, RPMSG_SUCCESS);
 		virtqueue_notify(vrp->rvq);
+	}
 
 	dev_info(&vdev->dev, "rpmsg host is online\n");
 
@@ -1773,6 +1848,8 @@ static void rpmsg_remove(struct virtio_device *vdev)
 	if (ret)
 		dev_warn(&vdev->dev, "can't remove rpmsg device: %d\n", ret);
 
+	trace_MEMF_RPMsg_DeInit((u64)vrp, ret);
+
 	if (vrp->ns_ept)
 		__rpmsg_destroy_ept(vrp, vrp->ns_ept);
 
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index 73d094a..86a1af3 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -450,6 +450,7 @@ enum rproc_crash_type {
  * @table_ptr: pointer to the resource table in effect
  * @cached_table: copy of the resource table
  * @has_iommu: flag to indicate if remote processor is behind an MMU
+ * @cpu: cpu id for remote fw
  */
 struct rproc {
 	struct list_head node;
@@ -481,6 +482,7 @@ struct rproc {
 	struct resource_table *cached_table;
 	bool has_iommu;
 	bool auto_boot;
+	u32 cpu;
 };
 
 /* we currently support only two vrings per rvdev */
-- 
2.7.4

