From 57641264b2d62ead9a87ecb64eb24ca1c68ea90d Mon Sep 17 00:00:00 2001
From: Ahsan Hussain <ahsan_hussain@mentor.com>
Date: Thu, 12 Apr 2018 18:44:13 +0500
Subject: [PATCH 3/3] memf tracepoints for R5 remote driver

Signed-off-by: Ahsan Hussain <ahsan_hussain@mentor.com>
---
 drivers/remoteproc/zynqmp_r5_remoteproc.c | 52 +++++++++++++++++++++++++++++--
 1 file changed, 50 insertions(+), 2 deletions(-)

diff --git a/drivers/remoteproc/zynqmp_r5_remoteproc.c b/drivers/remoteproc/zynqmp_r5_remoteproc.c
index 19780a6..012f55d 100644
--- a/drivers/remoteproc/zynqmp_r5_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_r5_remoteproc.c
@@ -21,6 +21,9 @@
  * GNU General Public License for more details.
  */
 
+#include <trace/events/MEMF.h>
+#include <trace/events/Synchronization.h>
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/err.h>
@@ -325,8 +328,16 @@ static inline void enable_ipi(struct zynqmp_r5_rproc_pdata *pdata)
 static int event_notified_idr_cb(int id, void *ptr, void *data)
 {
 	struct rproc *rproc = data;
-
-	(void)rproc_virtio_interrupt(rproc, id);
+	static bool initialized = false;
+
+	if (rproc_virtio_interrupt(rproc, id) != IRQ_NONE) {
+		if (!initialized) {
+			initialized = true;
+			trace_MEMF_Remoteproc_State((u64)rproc,
+						    REMOTEPROC_ACTIVE,
+						    RPROC_SUCCESS);
+		}
+	}
 
 	return 0;
 }
@@ -393,6 +404,7 @@ static void zynqmp_r5_rproc_kick(struct rproc *rproc, int vqid)
 	struct zynqmp_r5_rproc_pdata *local = rproc->priv;
 	struct ipi_info *ipi = (struct ipi_info *) local->scratchpad_base;
 
+	static bool initialized = false;
 	/*
 	 * temporary hack to support incorrect notifyid in vring from MEMF
 	 * resource table; correct and remove in future release
@@ -415,6 +427,11 @@ static void zynqmp_r5_rproc_kick(struct rproc *rproc, int vqid)
 	 */
 	if (local->ipi_base)
 		reg_write(local->ipi_base, TRIG_OFFSET, local->ipi_dest_mask);
+
+	if (!initialized) {
+		initialized = true;
+		trace_Synchronization_TriggerSend(100, 0, "Trigger");
+	}
 }
 
 /* power off the remote processor */
@@ -440,6 +457,8 @@ static int zynqmp_r5_rproc_stop(struct rproc *rproc)
 			memset(mem->va, 0, mem->len);
 	}
 
+	trace_MEMF_Remoteproc_State((u64)rproc, REMOTEPROC_SHUTDOWN, RPROC_SUCCESS);
+
 	return 0;
 }
 
@@ -617,6 +636,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 		sizeof(struct zynqmp_r5_rproc_pdata));
 	if (!rproc) {
 		dev_err(&pdev->dev, "rproc allocation failed\n");
+		/* set random 999 value in place of unknown rpu id, instead of 0/NULL */
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		return -ENOMEM;
 	}
 	local = rproc->priv;
@@ -628,6 +649,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "invalid address\n");
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		return -ENODEV;
 	}
 	r5_reg_res = kmalloc(sizeof(*r5_reg_res), GFP_KERNEL);
@@ -654,6 +676,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if (ret) {
 		dev_err(&pdev->dev, "dma_declare_coherent_memory failed\n");
 		ret = -ENOMEM;
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -666,6 +689,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if (IS_ERR(local->scratchpad_base)) {
 		dev_err(&pdev->dev, "Unable to map scratchpad I/O memory\n");
 		ret = PTR_ERR(local->scratchpad_base);
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -678,6 +702,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (ret) {
 		dev_err(&pdev->dev, "dma_set_coherent_mask: %d\n", ret);
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -688,6 +713,7 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	} else {
 		dev_err(&pdev->dev, "No power domain ID is specified.\n");
 		ret = -EINVAL;
+		trace_MEMF_Remoteproc_Init(0, NULL, 999, RPROC_FAILURE);
 		goto rproc_fault;
 	}
 	dev_dbg(&pdev->dev, "RPU[%d] pd_id = %d.\n",
@@ -725,6 +751,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if(!r5_regs_node) {
 		dev_err(&pdev->dev, "Unable to get rpu registers node\n");
 		ret = -ENODEV;
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -732,6 +760,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	ret = of_address_to_resource(r5_regs_node, 0, r5_reg_res);
 	if (ret) {
 		dev_err(&pdev->dev, "RPU I/O memory not specified\n");
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 	dev_dbg(&pdev->dev, "DEBUG: RPU mem start: %lx, end: %lx \n",
@@ -744,6 +774,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if (IS_ERR(local->rpu_base)) {
 		dev_err(&pdev->dev, "Unable to map RPU I/O memory\n");
 		ret = PTR_ERR(local->rpu_base);
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -751,6 +783,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	ret = of_address_to_resource(r5_regs_node, 1, r5_reg_res);
 	if (ret) {
 		dev_err(&pdev->dev, "IPI I/O memory not specified\n");
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 	dev_dbg(&pdev->dev, "DEBUG: IPI mem start: %lx, end: %lx \n",
@@ -763,6 +797,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if (IS_ERR(local->ipi_base)) {
 		dev_err(&pdev->dev, "Unable to map IPI I/O memory\n");
 		ret = PTR_ERR(local->ipi_base);
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -770,6 +806,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	ret = of_address_to_resource(r5_regs_node, 2, r5_reg_res);
 	if (ret) {
 		dev_err(&pdev->dev, "RPU Gloabl I/O memory not specified\n");
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 	dev_dbg(&pdev->dev, "DEBUG: RPU Global mem start: %lx, end: %lx \n",
@@ -782,6 +820,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	if (IS_ERR(local->rpu_glbl_base)) {
 		dev_err(&pdev->dev, "Unable to map RPU Global I/O memory\n");
 		ret = PTR_ERR(local->rpu_glbl_base);
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -790,6 +830,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 	local->tcm_base = devm_ioremap_nocache(&pdev->dev, TCM_BASE, TCM_SIZE);
 	if (IS_ERR(local->tcm_base)) {
 		dev_err(&pdev->dev, "Unable to map TCM memory\n");
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		ret = PTR_ERR(local->tcm_base);
 		goto rproc_fault;
 	}
@@ -851,6 +893,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev,
 			"no 'srams' firmware mmio-sram memories specified in DTB.");
 		ret = -EINVAL;
+		trace_MEMF_Remoteproc_Init(0, NULL, local->rpu_id,
+					   RPROC_FAILURE);
 		goto rproc_fault;
 	}
 
@@ -897,6 +941,8 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 		goto rproc_fault;
 	}
 
+	local->rproc->cpu = local->rpu_id;
+
 	return ret;
 
 rproc_fault:
@@ -914,6 +960,8 @@ static int zynqmp_r5_remoteproc_remove(struct platform_device *pdev)
 
 	dev_info(&pdev->dev, "%s\n", __func__);
 
+	trace_MEMF_Remoteproc_DeInit((u64)rproc, RPROC_SUCCESS);
+
 	rproc_del(rproc);
 
 	list_for_each_entry(mem, &local->mems, node) {
-- 
2.7.4

