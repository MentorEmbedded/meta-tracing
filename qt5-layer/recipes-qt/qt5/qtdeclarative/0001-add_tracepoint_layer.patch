Index: git/src/qml/qml.pro
===================================================================
--- git.orig/src/qml/qml.pro
+++ git/src/qml/qml.pro
@@ -41,6 +41,7 @@ include(qml/qml.pri)
 include(debugger/debugger.pri)
 include(animations/animations.pri)
 include(types/types.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
 
 MODULE_PLUGIN_TYPES = \
     qmltooling
Index: git/src/qml/qml/qqmlbinding.cpp
===================================================================
--- git.orig/src/qml/qml/qqmlbinding.cpp
+++ git/src/qml/qml/qqmlbinding.cpp
@@ -49,6 +49,10 @@
 #include <QVariant>
 #include <QtCore/qdebug.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 QQmlBinding::QQmlBinding(const QString &str, QObject *obj, QQmlContext *ctxt)
@@ -162,6 +166,12 @@ void QQmlBinding::update(QQmlPropertyPri
         return;
     }
 
+#ifdef ENABLE_SA_TRACE
+        QQmlSourceLocation loc = f->sourceLocation();
+        QString url = loc.sourceFile;
+        qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(url));
+#endif // ENABLE_SA_TRACE
+
     QQmlBindingProfiler prof(ep->profiler, f);
     setUpdatingFlag(true);
 
@@ -210,6 +220,10 @@ void QQmlBinding::update(QQmlPropertyPri
 
     if (!watcher.wasDeleted())
         setUpdatingFlag(false);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(url));
+#endif // ENABLE_SA_TRACE
 }
 
 // Returns true if successful, false if an error description was set on expression
Index: git/src/qml/qml/qqmlcomponent.cpp
===================================================================
--- git.orig/src/qml/qml/qqmlcomponent.cpp
+++ git/src/qml/qml/qqmlcomponent.cpp
@@ -62,6 +62,10 @@
 #include <qqmlinfo.h>
 #include "qqmlmemoryprofiler_p.h"
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h> 
+#endif // ENABLE_SA_TRACE
+
 namespace {
     QThreadStorage<int> creationDepth;
 }
@@ -860,6 +864,10 @@ QQmlComponentPrivate::beginCreate(QQmlCo
 
     QQmlEnginePrivate *enginePriv = QQmlEnginePrivate::get(engine);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(cc->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     enginePriv->inProgressCreations++;
     state.errors.clear();
     state.completePending = true;
@@ -953,6 +961,10 @@ void QQmlComponentPrivate::completeCreat
     if (state.completePending) {
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(engine);
         complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 
     if (depthIncreased) {
Index: git/src/qml/qml/qqmlengine.cpp
===================================================================
--- git.orig/src/qml/qml/qqmlengine.cpp
+++ git/src/qml/qml/qqmlengine.cpp
@@ -100,6 +100,11 @@
 #endif
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 Q_DECLARE_METATYPE(QQmlProperty)
 
 QT_BEGIN_NAMESPACE
@@ -1397,6 +1402,11 @@ void qmlExecuteDeferred(QObject *object)
     QQmlData *data = QQmlData::get(object);
 
     if (data && data->deferredData && !data->wasDeleted(object)) {
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(data->outerContext->urlString()));
+#endif // ENABLE_SA_TRACE
+
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(data->context->engine);
 
         QQmlComponentPrivate::ConstructionState state;
@@ -1408,6 +1418,11 @@ void qmlExecuteDeferred(QObject *object)
         data->deferredData = 0;
 
         QQmlComponentPrivate::complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(data->outerContext->urlString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
Index: git/src/qml/qml/qqmltypeloader.cpp
===================================================================
--- git.orig/src/qml/qml/qqmltypeloader.cpp
+++ git/src/qml/qml/qqmltypeloader.cpp
@@ -56,6 +56,10 @@
 #include <QtCore/qwaitcondition.h>
 #include <QtQml/qqmlextensioninterface.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #if defined (Q_OS_UNIX)
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -971,6 +975,10 @@ void QQmlTypeLoader::doLoad(const Loader
 #endif
     blob->startLoading();
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 1, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     if (m_thread->isThisThread()) {
         unlock();
         loader.loadThread(this, blob);
@@ -1067,6 +1075,9 @@ void QQmlTypeLoader::loadThread(QQmlData
                 if (blob->m_data.isAsync())
                     m_thread->callDownloadProgressChanged(blob, 1.);
                 setData(blob, debugCache.value(url, QByteArray()));
+#ifdef ENABLE_SA_TRACE
+                if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
                 return;
             }
         }
@@ -1089,6 +1100,10 @@ void QQmlTypeLoader::loadThread(QQmlData
 
         setData(blob, &file);
 
+#ifdef ENABLE_SA_TRACE
+        if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     } else {
 
         QNetworkReply *reply = m_thread->networkAccessManager()->get(QNetworkRequest(blob->m_url));
@@ -1151,6 +1166,10 @@ void QQmlTypeLoader::networkReplyFinishe
         setData(blob, data);
     }
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     blob->release();
 }
 
@@ -2060,6 +2079,10 @@ void QQmlTypeData::unregisterCallback(Ty
 
 void QQmlTypeData::done()
 {
+#ifdef ENABLE_SA_TRACE
+       qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     // Check all script dependencies for errors
     for (int ii = 0; !isError() && ii < m_scripts.count(); ++ii) {
         const ScriptReference &script = m_scripts.at(ii);
@@ -2294,6 +2317,10 @@ void QQmlTypeData::compile()
 {
     Q_ASSERT(m_compiledData == 0);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 1, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     m_compiledData = new QQmlCompiledData(typeLoader()->engine());
 
     QQmlTypeCompiler compiler(QQmlEnginePrivate::get(typeLoader()->engine()), m_compiledData, this, m_document.data());
@@ -2302,6 +2329,10 @@ void QQmlTypeData::compile()
         m_compiledData->release();
         m_compiledData = 0;
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
 }
 
 void QQmlTypeData::resolveTypes()
Index: git/src/quick/items/qquickwindow.cpp
===================================================================
--- git.orig/src/quick/items/qquickwindow.cpp
+++ git/src/quick/items/qquickwindow.cpp
@@ -68,6 +68,11 @@
 
 #include <private/qopenglvertexarrayobject_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 Q_LOGGING_CATEGORY(DBG_TOUCH, "qt.quick.touch");
@@ -1398,6 +1403,11 @@ bool QQuickWindow::event(QEvent *e)
 {
     Q_D(QQuickWindow);
 
+#ifdef ENABLE_SA_TRACE
+    if (e)
+        qt_tracepoint(Qt, qtGraphicsSceneEvents, e->type());
+#endif // ENABLE_SA_TRACE
+
     switch (e->type()) {
 
     case QEvent::TouchBegin:
@@ -1493,6 +1503,10 @@ void QQuickWindowPrivate::deliverKeyEven
 
     if (activeFocusItem)
         q->sendEvent(activeFocusItem, e);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtKeyEventConsumed, e->type(), e->key(), e->modifiers());
+#endif // ENABLE_SA_TRACE
 }
 
 QMouseEvent *QQuickWindowPrivate::cloneMouseEvent(QMouseEvent *event, QPointF *transformedLocalPos)
@@ -1561,6 +1575,11 @@ bool QQuickWindowPrivate::deliverMouseEv
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
         return event->isAccepted();
     }
 
@@ -1570,10 +1589,19 @@ bool QQuickWindowPrivate::deliverMouseEv
         me->accept();
         q->sendEvent(mouseGrabberItem, me.data());
         event->setAccepted(me->isAccepted());
-        if (me->isAccepted())
+        if (me->isAccepted()) {
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, me->buttons());
+#endif // ENABLE_SA_TRACE
+
             return true;
+	  }
     }
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     return false;
 }
 
@@ -1605,6 +1633,10 @@ void QQuickWindow::mouseReleaseEvent(QMo
 
     if (!d->mouseGrabberItem) {
         QWindow::mouseReleaseEvent(event);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1630,6 +1662,10 @@ void QQuickWindow::mouseDoubleClickEvent
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1686,6 +1722,10 @@ void QQuickWindow::mouseMoveEvent(QMouse
             accepted = d->clearHover();
         }
         event->setAccepted(accepted);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
Index: git/src/quick/quick.pro
===================================================================
--- git.orig/src/quick/quick.pro
+++ git/src/quick/quick.pro
@@ -28,6 +28,7 @@ include(util/util.pri)
 include(scenegraph/scenegraph.pri)
 include(items/items.pri)
 !wince:include(designer/designer.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
 contains(QT_CONFIG, accessibility) {
     include(accessible/accessible.pri)
 }
Index: git/src/quick/scenegraph/coreapi/qsgrenderer.cpp
===================================================================
--- git.orig/src/quick/scenegraph/coreapi/qsgrenderer.cpp
+++ git/src/quick/scenegraph/coreapi/qsgrenderer.cpp
@@ -38,6 +38,10 @@
 
 #include <private/qquickprofiler_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 static const bool qsg_sanity_check = qEnvironmentVariableIntValue("QSG_SANITY_CHECK");
@@ -182,6 +186,10 @@ void QSGRenderer::renderScene(const QSGB
     if (!rootNode())
         return;
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
     m_is_rendering = true;
 
 
@@ -230,6 +238,9 @@ void QSGRenderer::renderScene(const QSGB
             int((updatePassTime - preprocessTime) / 1000000),
             int((bindTime - updatePassTime) / 1000000),
             int((renderTime - bindTime) / 1000000));
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 /*!
