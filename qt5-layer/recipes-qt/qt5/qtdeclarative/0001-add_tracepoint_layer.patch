diff --git a/src/qml/qml.pro b/src/qml/qml.pro
index 7d5a92a..9e08a26 100644
--- a/src/qml/qml.pro
+++ b/src/qml/qml.pro
@@ -79,3 +79,4 @@ CONFIG += qmltypes install_qmltypes install_metatypes
 load(qt_module)
 
 include(../3rdparty/masm/masm.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
diff --git a/src/qml/qml/qqmlbinding.cpp b/src/qml/qml/qqmlbinding.cpp
index b9566d5..9eb9c0f 100644
--- a/src/qml/qml/qqmlbinding.cpp
+++ b/src/qml/qml/qqmlbinding.cpp
@@ -64,6 +64,10 @@
 #include <QtCore/qdebug.h>
 #include <QVector>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 QQmlBinding *QQmlBinding::create(const QQmlPropertyData *property, const QQmlScriptString &script, QObject *obj, QQmlContext *ctxt)
@@ -180,6 +184,11 @@ void QQmlBinding::update(QQmlPropertyData::WriteFlags flags)
     }
     setUpdatingFlag(true);
 
+#ifdef ENABLE_SA_TRACE
+        QString url = sourceLocation().sourceFile;
+        qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(url));
+#endif // ENABLE_SA_TRACE
+
     DeleteWatcher watcher(this);
 
     QQmlEngine *engine = context()->engine;
@@ -195,6 +205,11 @@ void QQmlBinding::update(QQmlPropertyData::WriteFlags flags)
 
     if (!watcher.wasDeleted())
         setUpdatingFlag(false);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(url));
+#endif // ENABLE_SA_TRACE
+
 }
 
 QV4::ReturnedValue QQmlBinding::evaluate(bool *isUndefined)
diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index 9ee4fdb..6858c99 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -66,6 +66,10 @@
 #include <QtCore/qdebug.h>
 #include <qqmlinfo.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 namespace {
     QThreadStorage<int> creationDepth;
 }
@@ -924,6 +928,10 @@ QQmlComponentPrivate::beginCreate(QQmlContextData *context)
 
     QQmlEnginePrivate *enginePriv = QQmlEnginePrivate::get(engine);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(compilationUnit->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     enginePriv->inProgressCreations++;
     state.errors.clear();
     state.completePending = true;
@@ -1078,6 +1086,10 @@ void QQmlComponentPrivate::completeCreate()
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(engine);
         complete(ep, &state);
         --creationDepth.localData();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index ab26b83..1fe2dda 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -102,6 +102,11 @@
 #  endif
 #endif // Q_OS_WIN
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Declared in qqml.h
@@ -1577,6 +1582,12 @@ void qmlExecuteDeferred(QObject *object)
     QQmlData *data = QQmlData::get(object);
 
     if (data && !data->deferredData.isEmpty() && !data->wasDeleted(object)) {
+
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(data->outerContext->urlString()));
+#endif // ENABLE_SA_TRACE
+
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(data->context->engine);
 
         QQmlComponentPrivate::DeferredState state;
@@ -1586,6 +1597,11 @@ void qmlExecuteDeferred(QObject *object)
         data->releaseDeferredData();
 
         QQmlComponentPrivate::completeDeferred(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(data->outerContext->urlString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
diff --git a/src/qml/qml/qqmltypeloader.cpp b/src/qml/qml/qqmltypeloader.cpp
index 1d66e75..e817f0d 100644
--- a/src/qml/qml/qqmltypeloader.cpp
+++ b/src/qml/qml/qqmltypeloader.cpp
@@ -61,6 +61,10 @@
 
 #include <functional>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 // #define DATABLOB_DEBUG
 #ifdef DATABLOB_DEBUG
 #define ASSERT_LOADTHREAD() do { if (!m_thread->isThisThread()) qFatal("QQmlTypeLoader: Caller not in load thread"); } while (false)
@@ -200,6 +204,10 @@ void QQmlTypeLoader::doLoad(const Loader &loader, QQmlDataBlob *blob, Mode mode)
 #endif
     blob->startLoading();
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 1, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     if (m_thread->isThisThread()) {
         unlock();
         loader.loadThread(this, blob);
@@ -298,6 +306,10 @@ void QQmlTypeLoader::loadThread(QQmlDataBlob *blob)
 
         setData(blob, fileName);
 
+#ifdef ENABLE_SA_TRACE
+                if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     } else {
 #if QT_CONFIG(qml_network)
         QNetworkReply *reply = m_thread->networkAccessManager()->get(QNetworkRequest(blob->m_url));
@@ -365,6 +377,10 @@ void QQmlTypeLoader::networkReplyFinished(QNetworkReply *reply)
         setData(blob, data);
     }
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     blob->release();
 }
 
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index e8b6d8d..4a727a3 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -89,6 +89,11 @@
 
 #include <QtGui/private/qrhi_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 Q_LOGGING_CATEGORY(DBG_TOUCH, "qt.quick.touch")
@@ -1755,6 +1760,11 @@ bool QQuickWindow::event(QEvent *e)
 {
     Q_D(QQuickWindow);
 
+#ifdef ENABLE_SA_TRACE
+    if (e)
+        qt_tracepoint(Qt, qtGraphicsSceneEvents, e->type());
+#endif // ENABLE_SA_TRACE
+
     switch (e->type()) {
 
     case QEvent::TouchBegin:
@@ -1914,6 +1924,10 @@ void QQuickWindowPrivate::deliverKeyEvent(QKeyEvent *e)
             QCoreApplication::sendEvent(item, e);
         }
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtKeyEventConsumed, e->type(), e->key(), e->modifiers());
+#endif // ENABLE_SA_TRACE
 }
 
 QMouseEvent *QQuickWindowPrivate::cloneMouseEvent(QMouseEvent *event, QPointF *transformedLocalPos)
@@ -2369,18 +2383,29 @@ void QQuickWindow::mouseMoveEvent(QMouseEvent *event)
 {
     Q_D(QQuickWindow);
     d->handleMouseEvent(event);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
 }
 /*! \reimp */
 void QQuickWindow::mouseDoubleClickEvent(QMouseEvent *event)
 {
     Q_D(QQuickWindow);
     d->handleMouseEvent(event);
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
 }
 /*! \reimp */
 void QQuickWindow::mouseReleaseEvent(QMouseEvent *event)
 {
     Q_D(QQuickWindow);
     d->handleMouseEvent(event);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
 }
 
 void QQuickWindowPrivate::handleMouseEvent(QMouseEvent *event)
diff --git a/src/quick/quick.pro b/src/quick/quick.pro
index f2d49cf..0fd6946 100644
--- a/src/quick/quick.pro
+++ b/src/quick/quick.pro
@@ -36,6 +36,7 @@ qtConfig(accessibility) {
     include(accessible/accessible.pri)
 }
 
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
 HEADERS += \
     qtquickglobal.h \
     qtquickglobal_p.h \
diff --git a/src/quick/scenegraph/coreapi/qsgrenderer.cpp b/src/quick/scenegraph/coreapi/qsgrenderer.cpp
index 381fd7e..407da26 100644
--- a/src/quick/scenegraph/coreapi/qsgrenderer.cpp
+++ b/src/quick/scenegraph/coreapi/qsgrenderer.cpp
@@ -49,6 +49,10 @@
 
 #include <QtCore/QElapsedTimer>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #if QT_CONFIG(opengl)
@@ -223,6 +227,10 @@ void QSGRenderer::renderScene(const QSGBindable &bindable)
         return;
 
     Q_TRACE_SCOPE(QSG_renderScene);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
     m_is_rendering = true;
 
 
@@ -279,6 +287,9 @@ void QSGRenderer::renderScene(const QSGBindable &bindable)
             int((updatePassTime - preprocessTime) / 1000000),
             int((bindTime - updatePassTime) / 1000000),
             int((renderTime - bindTime) / 1000000));
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 /*!
