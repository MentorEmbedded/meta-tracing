Index: git/configure
===================================================================
--- git.orig/configure
+++ git/configure
@@ -802,6 +802,7 @@ OPT_MAC_SDK=
 COMMERCIAL_USER=ask
 LICENSE_FILE=
 CFG_DEV=no
+CFG_SOURCERYANALYZER=no
 
 # initalize variables used for installation
 QT_INSTALL_PREFIX=
@@ -858,6 +859,10 @@ CFG_DEFAULT_ANDROID_TARGET_ARCH=armeabi-
 CFG_DEFAULT_ANDROID_NDK_TOOLCHAIN_VERSION=4.9
 CFG_DEFAULT_ANDROID_NDK_HOST=$ANDROID_NDK_HOST
 
+# Install path for Sourcery Analyzer tracepoint files
+QT_SA_TRACE_PRIDIR=
+QT_SA_TRACE_LIBDIR=
+
 #-------------------------------------------------------------------------------
 # check SQL drivers available in this package
 #-------------------------------------------------------------------------------
@@ -2377,6 +2382,13 @@ while [ "$#" -gt 0 ]; do
             UNKNOWN_OPT=yes
         fi
         ;;
+    sa-trace)
+        if [ "$VAL" = "yes" ]; then
+            CFG_SOURCERYANALYZER="yes"
+        else
+            UNKNOWN_OPT=yes
+        fi
+        ;;
     *)
         UNKNOWN_OPT=yes
         ;;
@@ -2597,6 +2609,8 @@ Third Party Libraries:
                           (libxcb.so will still be used from operating system).
  +  -system-xcb ......... Use xcb- libraries from the operating system.
 
+    -sa-trace  ......... Use Sourcery Analyzer.
+
     -xkb-config-root .... Set default XKB config root. This option is used only together with -qt-xkbcommon-x11.
     -qt-xkbcommon-x11 ... Use the xkbcommon library bundled with Qt in combination with xcb.
  +  -system-xkbcommon-x11 Use the xkbcommon library from the operating system in combination with xcb.
@@ -6476,6 +6490,16 @@ if [ "$CFG_WIDGETS" = "no" ]; then
     QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_WIDGETS"
 fi
 
+if [ "$CFG_SOURCERYANALYZER" = "yes" ]; then
+    QT_CONFIG="$QT_CONFIG sa-trace"
+
+    QT_SA_TRACE_PRIDIR="$relpath/src/3rdparty"
+    QMakeVar set QT_SA_TRACE_PRIDIR "$QT_SA_TRACE_PRIDIR"
+
+    QT_SA_TRACE_LIBDIR="$outpath/lib"
+    QMakeVar set QT_SA_TRACE_LIBDIR "$QT_SA_TRACE_LIBDIR"
+fi
+
 if [ "$XPLATFORM_MAC" = "yes" ]; then
     #On Mac we implicitly link against libz, so we
     #never use the 3rdparty stuff.
@@ -7446,6 +7470,7 @@ report_support "  udev .................
 report_support "  xkbcommon-x11..........." "$CFG_XKBCOMMON" system "system library" qt "bundled copy, XKB config root: $CFG_XKB_CONFIG_ROOT"
 report_support "  xkbcommon-evdev........." "$CFG_XKBCOMMON_EVDEV"
 report_support "  zlib ..................." "$CFG_ZLIB" system "system library" yes "bundled copy"
+report_support "  Sourcery Analyzer ......" "$CFG_SOURCERYANALYZER"
 
 echo
 
Index: git/src/corelib/animation/qabstractanimation.cpp
===================================================================
--- git.orig/src/corelib/animation/qabstractanimation.cpp
+++ git/src/corelib/animation/qabstractanimation.cpp
@@ -147,6 +147,10 @@
 #include <QtCore/qcoreevent.h>
 #include <QtCore/qpointer.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #ifndef QT_NO_ANIMATION
 
 #define DEFAULT_TIMER_INTERVAL 16
@@ -220,6 +224,10 @@ QUnifiedTimer::QUnifiedTimer() :
     slowdownFactor(5.0f), profilerCallback(0),
     driverStartTime(0), temporalDrift(0)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, DEFAULT_TIMER_INTERVAL);
+#endif // ENABLE_SA_TRACE
+
     time.invalidate();
     driver = &defaultDriver;
 }
@@ -318,6 +326,10 @@ void QUnifiedTimer::updateAnimationTimer
     //* it might happen in some cases that the delta is negative because the animation driver
     //  advances faster than time.elapsed()
     if (delta > 0) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 1);
+#endif // ENABLE_SA_TRACE
+
         insideTick = true;
         if (profilerCallback)
             profilerCallback(delta);
@@ -327,6 +339,10 @@ void QUnifiedTimer::updateAnimationTimer
         }
         insideTick = false;
         currentAnimationIdx = 0;
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 0);
+#endif // ENABLE_SA_TRACE
     }
 }
 
@@ -374,6 +390,10 @@ void QUnifiedTimer::restart()
 
 void QUnifiedTimer::setTimingInterval(int interval)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, interval);
+#endif // ENABLE_SA_TRACE
+
     timingInterval = interval;
 
     if (driver->isRunning() && !pauseTimer.isActive()) {
@@ -869,6 +889,10 @@ bool QAnimationDriver::isRunning() const
 
 void QAnimationDriver::start()
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 1);
+#endif // ENABLE_SA_TRACE
+
     Q_D(QAnimationDriver);
     if (!d->running) {
         d->running = true;
@@ -885,6 +909,10 @@ void QAnimationDriver::stop()
         d->running = false;
         emit stopped();
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 
Index: git/src/corelib/corelib.pro
===================================================================
--- git.orig/src/corelib/corelib.pro
+++ git/src/corelib/corelib.pro
@@ -50,6 +50,7 @@ include(statemachine/statemachine.pri)
 include(mimetypes/mimetypes.pri)
 include(xml/xml.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
 # otherwise mingw headers do not declare common functions like putenv
 mingw: CONFIG -= strict_c++
 
Index: git/src/corelib/kernel/qcoreapplication.cpp
===================================================================
--- git.orig/src/corelib/kernel/qcoreapplication.cpp
+++ git/src/corelib/kernel/qcoreapplication.cpp
@@ -112,6 +112,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_QOBJECT
@@ -434,6 +439,10 @@ QCoreApplicationPrivate::QCoreApplicatio
     , q_ptr(0)
 #endif
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 1);
+#endif // ENABLE_SA_TRACE
+
     app_compile_version = flags & 0xffffff;
     static const char *const empty = "";
     if (argc == 0 || argv == 0) {
@@ -475,6 +484,10 @@ QCoreApplicationPrivate::~QCoreApplicati
     delete [] origArgv;
 #endif
     QCoreApplicationPrivate::clearApplicationFilePath();
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 #ifndef QT_NO_QOBJECT
@@ -979,6 +992,11 @@ void QCoreApplication::setQuitLockEnable
 */
 bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     return notifyInternal2(receiver, event);
 }
 
@@ -991,6 +1009,11 @@ bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 */
 bool QCoreApplication::notifyInternal2(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     bool selfRequired = QCoreApplicationPrivate::threadRequiresCoreApplication();
     if (!self && selfRequired)
         return false;

Index: git/src/gui/gui.pro
===================================================================
--- git.orig/src/gui/gui.pro
+++ git/src/gui/gui.pro
@@ -46,6 +46,8 @@ include(opengl/opengl.pri)
 include(animation/animation.pri)
 include(itemmodels/itemmodels.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 load(qt_module)
Index: git/src/gui/image/qimagereader.cpp
===================================================================
--- git.orig/src/gui/image/qimagereader.cpp
+++ git/src/gui/image/qimagereader.cpp
@@ -158,6 +158,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QThread>
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_IMAGEFORMATPLUGIN
@@ -1310,6 +1315,11 @@ bool QImageReader::read(QImage *image)
     if (!d->handler && !d->initHandler())
         return false;
 
+#ifdef ENABLE_SA_TRACE
+    long threadId = (long)(QThread::currentThread());
+    qt_tracepoint(Qt, qtImageReader, threadId, 1, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
+
     // set the handler specific options.
     if (d->handler->supportsOption(QImageIOHandler::ScaledSize) && d->scaledSize.isValid()) {
         if ((d->handler->supportsOption(QImageIOHandler::ClipRect) && !d->clipRect.isNull())
@@ -1330,6 +1340,9 @@ bool QImageReader::read(QImage *image)
     if (!d->handler->read(image)) {
         d->imageReaderError = InvalidDataError;
         d->errorString = QImageReader::tr("Unable to read image data");
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
         return false;
     }
 
@@ -1392,6 +1405,9 @@ bool QImageReader::read(QImage *image)
     if (autoTransform())
         qt_imageTransform(*image, transformation());
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
     return true;
 }
 
Index: git/src/gui/kernel/qguiapplication.cpp
===================================================================
--- git.orig/src/gui/kernel/qguiapplication.cpp
+++ git/src/gui/kernel/qguiapplication.cpp
@@ -106,6 +106,11 @@
 
 #include <ctype.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Helper macro for static functions to check on the existence of the application class.
@@ -1611,6 +1616,35 @@ int QGuiApplication::exec()
 */
 bool QGuiApplication::notify(QObject *object, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event) {
+        switch (event->type())
+        {
+        case QEvent::KeyPress:
+        case QEvent::KeyRelease:
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(event);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+            break;
+
+        case QEvent::MouseButtonPress:
+        case QEvent::MouseButtonRelease:
+        case QEvent::MouseButtonDblClick:
+        case QEvent::MouseMove:
+            {
+                QMouseEvent* mouse = static_cast<QMouseEvent*>(event);
+                qt_tracepoint(Qt, qtSendMouseEvent, mouse->buttons());
+            }
+            break;
+
+        default:
+            // Ignore
+            break;
+        }
+    }
+#endif // ENABLE_SA_TRACE
+
     if (object->isWindowType())
         QGuiApplicationPrivate::sendQWindowEventToQPlatformWindow(static_cast<QWindow *>(object), event);
     return QCoreApplication::notify(object, event);
Index: git/src/src.pro
===================================================================
--- git.orig/src/src.pro
+++ git/src/src.pro
@@ -128,6 +128,9 @@ src_plugins.depends = src_sql src_xml sr
 
 src_android.subdir = $$PWD/android
 
+src_satrace.subdir = $$PWD/3rdparty/sa-trace
+src_satrace.target = sub-satrace
+
 # this order is important
 contains(QT_CONFIG, zlib)|cross_compile {
     SUBDIRS += src_qtzlib
@@ -136,6 +139,7 @@ contains(QT_CONFIG, zlib)|cross_compile
     }
 }
 SUBDIRS += src_tools_bootstrap src_tools_moc src_tools_rcc
+contains(QT_CONFIG, sa-trace): SUBDIRS += src_satrace
 !contains(QT_DISABLED_FEATURES, regularexpression):pcre {
     SUBDIRS += src_3rdparty_pcre
     src_corelib.depends += src_3rdparty_pcre
Index: git/src/widgets/graphicsview/qgraphicsscene.cpp
===================================================================
--- git.orig/src/widgets/graphicsview/qgraphicsscene.cpp
+++ git/src/widgets/graphicsview/qgraphicsscene.cpp
@@ -243,6 +243,10 @@
 #include <private/qgesturemanager_p.h>
 #include <private/qpathclipper_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 // #define GESTURE_DEBUG
 #ifndef GESTURE_DEBUG
 # define DEBUG if (0) qDebug
@@ -3303,6 +3307,10 @@ void QGraphicsScene::advance()
 */
 bool QGraphicsScene::event(QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtGraphicsSceneEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     Q_D(QGraphicsScene);
 
     switch (event->type()) {
Index: git/src/widgets/kernel/qapplication.cpp
===================================================================
--- git.orig/src/widgets/kernel/qapplication.cpp
+++ git/src/widgets/kernel/qapplication.cpp
@@ -102,6 +102,11 @@ extern bool qt_wince_is_pocket_pc();  //
 
 #include <qpa/qplatformwindow.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 //#define ALIEN_DEBUG
 
 static void initResources()
@@ -2714,6 +2719,10 @@ bool QApplicationPrivate::sendMouseEvent
     Q_ASSERT(nativeWidget);
     Q_ASSERT(buttonDown);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtSendMouseEvent, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     if (alienWidget && !isAlien(alienWidget))
         alienWidget = 0;
 
@@ -3166,6 +3175,13 @@ bool QApplication::notify(QObject *recei
     case QEvent::KeyPress:
     case QEvent::KeyRelease:
         {
+#ifdef ENABLE_SA_TRACE
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(e);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+#endif // ENABLE_SA_TRACE
+
             bool isWidget = receiver->isWidgetType();
 #ifndef QT_NO_GRAPHICSVIEW
             const bool isGraphicsWidget = !isWidget && qobject_cast<QGraphicsWidget *>(receiver);
@@ -3213,6 +3229,10 @@ bool QApplication::notify(QObject *recei
 #endif
             }
             qt_in_tab_key_event = false;
+
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtKeyEventConsumed, key->type(), key->key(), key->modifiers());
+#endif // ENABLE_SA_TRACE
         }
         break;
     case QEvent::MouseButtonPress:
@@ -3288,6 +3308,10 @@ bool QApplication::notify(QObject *recei
 
             mouse->setAccepted(eventAccepted);
 
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, mouse->buttons());
+#endif // ENABLE_SA_TRACE
+
             if (e->type() == QEvent::MouseMove) {
                 if (!pw)
                     break;
Index: git/src/widgets/kernel/qwidgetbackingstore.cpp
===================================================================
--- git.orig/src/widgets/kernel/qwidgetbackingstore.cpp
+++ git/src/widgets/kernel/qwidgetbackingstore.cpp
@@ -57,6 +57,10 @@
 #  include <qpa/qplatformnativeinterface.h>
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 extern QRegion qt_dirtyRegion(QWidget *);
@@ -81,6 +85,11 @@ void QWidgetBackingStore::qt_flush(QWidg
     Q_ASSERT(widget);
     Q_ASSERT(backingStore);
     Q_ASSERT(tlw);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
 #if !defined(QT_NO_PAINT_DEBUG)
     static int flushUpdate = qEnvironmentVariableIntValue("QT_FLUSH_UPDATE");
     if (flushUpdate > 0)
@@ -134,6 +143,10 @@ void QWidgetBackingStore::qt_flush(QWidg
     } else
 #endif
         backingStore->flush(region, widget->windowHandle(), offset);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 #ifndef QT_NO_PAINT_DEBUG
Index: git/src/widgets/widgets.pro
===================================================================
--- git.orig/src/widgets/widgets.pro
+++ git/src/widgets/widgets.pro
@@ -26,6 +26,7 @@ include(util/util.pri)
 include(statemachine/statemachine.pri)
 include(effects/effects.pri)
 
+contains(QT_CONFIG, sa-trace):include(../3rdparty/sa-trace.pri)
 
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
Index: git/src/widgets/styles/qstylesheetstyle.cpp
===================================================================
--- git.orig/src/widgets/styles/qstylesheetstyle.cpp
+++ git/src/widgets/styles/qstylesheetstyle.cpp
@@ -76,6 +76,10 @@
 #include <limits.h>
 #include <QtWidgets/qtoolbar.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 using namespace QCss;
@@ -2689,6 +2693,10 @@ bool QStyleSheetStyle::initObject(const
 
 void QStyleSheetStyle::polish(QWidget *w)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 1);
+#endif // ENABLE_SA_TRACE
+
     baseStyle()->polish(w);
     RECURSION_GUARD(return)
 
@@ -2771,6 +2779,11 @@ void QStyleSheetStyle::polish(QWidget *w
             || (!rule.hasNativeBorder() && !rule.border()->isOpaque()))
             w->setAttribute(Qt::WA_OpaquePaintEvent, false);
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 0);
+#endif // ENABLE_SA_TRACE
+
 }
 
 void QStyleSheetStyle::polish(QApplication *app)
Index: git/src/3rdparty/sa-trace/qt_tracepoints.c
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/qt_tracepoints.c
@@ -0,0 +1,2 @@
+#define TRACEPOINT_CREATE_PROBES
+#include "qt_tracepoints.h"
Index: git/src/3rdparty/sa-trace/qt_tracepoints.h
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/qt_tracepoints.h
@@ -0,0 +1,89 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER         Qt
+
+#undef TRACEPOINT_INCLUDE_FILE
+#define TRACEPOINT_INCLUDE_FILE     ./qt_tracepoints.h
+
+#if !defined(_QT_TRACEPOINTS_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _QT_TRACEPOINTS_H
+
+/* This define will be present exactly once per output library */
+#ifdef QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #define TRACEPOINT_DEFINE
+    #define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#endif
+
+#include <lttng/tracepoint.h>
+#include <stdint.h>
+
+/* Map qt_tracepont to the tracepoint implementation used: */
+#define qt_tracepoint tracepoint
+
+/* Startup Agent, app start stop. */
+TRACEPOINT_EVENT(Qt, qtApplicationCreated,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtQmlResourceLoad,
+                 TP_ARGS(int, isLoading, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isLoading, isLoading)
+                           ctf_string(qmlFileName, qmlFileName)))
+
+/* To show the start & end of Qt QML processing events (1=> Start, 0=> Stop) */
+TRACEPOINT_EVENT(Qt, qtQmlFrameCompile,
+                 TP_ARGS(int, isCompiling, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCompiling, isCompiling) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameCreate,
+                 TP_ARGS(int, isCreating, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCreating,  isCreating) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameBind,
+                 TP_ARGS(int, isBinding, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isBinding,   isBinding) ctf_string(qmlFileName, qmlFileName)))
+
+/* Qt Frame Sync (OpenGL or Raster) */
+TRACEPOINT_EVENT(Qt, qtFrameSync, TP_ARGS(int, isRendering),  TP_FIELDS(ctf_integer(int, isRendering, isRendering)))
+
+/* Qt animation framework timer activity */
+TRACEPOINT_EVENT(Qt, qtAnimDriver, TP_ARGS(int, isActive), TP_FIELDS(ctf_integer(int, isActive, isActive)))
+TRACEPOINT_EVENT(Qt, qtAnimTick, TP_ARGS(int, isUpdating), TP_FIELDS(ctf_integer(int, isUpdating, isUpdating)))
+TRACEPOINT_EVENT(Qt, qtAnimTimingInterval, TP_ARGS(int, interval), TP_FIELDS(ctf_integer(int, interval, interval)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtCoreEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtGraphicsSceneEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt QSendMouseEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtSendMouseEvent, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+TRACEPOINT_EVENT(Qt, qtMouseEventConsumed, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+
+/* Qt NotifyKeyEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtNotifyKeyEvent, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+TRACEPOINT_EVENT(Qt, qtKeyEventConsumed, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+
+/* Qt ImageReader Event (image filename) */
+TRACEPOINT_EVENT(Qt, qtImageReader,
+                 TP_ARGS(int, threadPtr, int, isLoading, const char *, imageName),
+                 TP_FIELDS(ctf_integer(int, threadPtr, threadPtr)
+                           ctf_integer(int, isLoading, isLoading)
+                           ctf_string(imageName, imageName)))
+
+TRACEPOINT_EVENT(Qt, qtStyleSheetPolish,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+#endif /* _QT_TRACEPOINTS_H */
+
+#include <lttng/tracepoint-event.h>
Index: git/src/3rdparty/sa-trace/sa-trace.pro
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/sa-trace.pro
@@ -0,0 +1,19 @@
+TARGET = sa-trace
+
+CONFIG += create_prl
+
+load(qt_module)
+
+QT -= core gui
+
+#################################
+
+DEFINES         += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -llttng-ust -lurcu-bp -ldl
+
+#################################
+
+SOURCES = qt_tracepoints.c
+
+HEADERS += qt_tracepoints.h
Index: git/mkspecs/features/sa-trace.prf
===================================================================
--- /dev/null
+++ git/mkspecs/features/sa-trace.prf
@@ -0,0 +1,3 @@
+DEFINES += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -lsa-trace -ldl -llttng-ust -lurcu-bp
Index: git/src/3rdparty/sa-trace.pri
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace.pri
@@ -0,0 +1,3 @@
+DEFINES         *= ENABLE_SA_TRACE
+CFLAGS          *= -g3 -O1
+INCLUDEPATH     *= $$PWD/sa-trace
Index: git/sync.profile
===================================================================
--- git.orig/sync.profile
+++ git/sync.profile
@@ -18,6 +18,7 @@
     "QtANGLE/EGL" => "!$basedir/src/3rdparty/angle/include/EGL",
     "QtZlib" => "!>$basedir/src/corelib;$basedir/src/3rdparty/zlib",
     "QtOpenGLExtensions" => "$basedir/src/openglextensions",
+    "sa-trace" => "$basedir/src/3rdparty/sa-trace",
 );
 %moduleheaders = ( # restrict the module headers to those found in relative path
 );
