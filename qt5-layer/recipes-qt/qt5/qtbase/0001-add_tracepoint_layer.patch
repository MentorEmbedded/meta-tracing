index git/configure.json
===================================================================
--- git.orig/configure.json
+++ git/configure.json
@@ -133,7 +133,8 @@
             "Werror": { "type": "boolean", "name": "warnings_are_errors" },
             "widgets": "boolean",
             "xplatform": "string",
-            "zlib": { "type": "enum", "name": "system-zlib", "values": { "system": "yes", "qt": "no" } }
+            "zlib": { "type": "enum", "name": "system-zlib", "values": { "system": "yes", "qt": "no" } },
+            "sa-trace": "boolean" 
         },
         "prefix": {
             "D": "defines",
@@ -162,6 +163,11 @@
                 { "libs": "-lz", "condition": "!config.msvc" }
             ]
         },
+        "sa-trace":{
+            "label": "sa-trace",
+            "sources": {"libs": "-lsa-trace"}
+
+        },
         "dbus": {
             "label": "D-Bus >= 1.2",
             "test": {
@@ -655,6 +665,11 @@
             "autoDetect": "config.uikit || config.android || config.winrt",
             "output": [ "publicFeature" ]
         },
+        "sa-trace": {
+            "label": "Use Sourcery Analyzer",
+            "condition": "libs.sa-trace",
+            "output": [ "publicFeature", "publicQtConfig" ]
+        },
         "simulator_and_device": {
             "label": "Build for both simulator and device",
             "condition": "config.uikit && input.sdk == ''",
@@ -1358,7 +1373,8 @@ Configure with '-qreal float' to create a build that is binary-compatible with 5
             "entries": [
                 "pkg-config",
                 "libudev",
-                "system-zlib"
+                "system-zlib",
+                "sa-trace"
             ]
         }
     ]
index git/config_help.txt
===================================================================
--- git.orig/config_help.txt
+++ git/config_help.txt
@@ -303,6 +303,7 @@ Gui, printing, widget options:
                          [system/qt/no]
     -xkbcommon-evdev ... Enable X-less xkbcommon in combination with libinput
                          [auto]
+    -sa-trace  ........ Use Sourcery Analyzer [yes]
 
   Image formats:
     -gif ............... Enable reading support for GIF [auto]
Index: git/configure
===================================================================
--- git.orig/configure
+++ git/configure
@@ -372,6 +372,7 @@ OPT_VERBOSE=no
 OPT_HELP=
 CFG_SILENT=no
 CFG_DEV=no
+CFG_SOURCERYANALYZER=yes
 
 #-------------------------------------------------------------------------------
 # parse command line arguments
@@ -859,3 +871,8 @@ if [ -n "$CFG_HOST_QT_TOOLS_PATH" ]; then
 else
     "$outpath/bin/qmake" "$relpathMangled" -- "$@"
 fi
+
+if [ "$CFG_SOURCERYANALYZER" = "yes" ]; then
+    QT_CONFIG="$QT_CONFIG sa-trace"
+
+fi
Index: git/src/corelib/animation/qabstractanimation.cpp
===================================================================
--- git.orig/src/corelib/animation/qabstractanimation.cpp
+++ git/src/corelib/animation/qabstractanimation.cpp
@@ -153,6 +153,10 @@
 #include <QtCore/qcoreevent.h>
 #include <QtCore/qpointer.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #define DEFAULT_TIMER_INTERVAL 16
 #define PAUSE_TIMER_COARSE_THRESHOLD 2000
 

@@ -220,6 +224,10 @@ QUnifiedTimer::QUnifiedTimer() :
     slowdownFactor(5.0f), profilerCallback(0),
     driverStartTime(0), temporalDrift(0)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, DEFAULT_TIMER_INTERVAL);
+#endif // ENABLE_SA_TRACE
+
     time.invalidate();
     driver = &defaultDriver;
 }
@@ -318,6 +326,10 @@ void QUnifiedTimer::updateAnimationTimer
     //* it might happen in some cases that the delta is negative because the animation driver
     //  advances faster than time.elapsed()
     if (delta > 0) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 1);
+#endif // ENABLE_SA_TRACE
+
         insideTick = true;
         if (profilerCallback)
             profilerCallback(delta);
@@ -327,6 +339,10 @@ void QUnifiedTimer::updateAnimationTimer
         }
         insideTick = false;
         currentAnimationIdx = 0;
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 0);
+#endif // ENABLE_SA_TRACE
     }
 }
 
@@ -374,6 +390,10 @@ void QUnifiedTimer::restart()
 
 void QUnifiedTimer::setTimingInterval(int interval)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, interval);
+#endif // ENABLE_SA_TRACE
+
     timingInterval = interval;
 
     if (driver->isRunning() && !pauseTimer.isActive()) {
@@ -869,6 +889,10 @@ bool QAnimationDriver::isRunning() const
 
 void QAnimationDriver::start()
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 1);
+#endif // ENABLE_SA_TRACE
+
     Q_D(QAnimationDriver);
     if (!d->running) {
         d->running = true;
@@ -885,6 +909,10 @@ void QAnimationDriver::stop()
         d->running = false;
         emit stopped();
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 
Index: git/src/corelib/corelib.pro
===================================================================
--- git.orig/src/corelib/corelib.pro
+++ git/src/corelib/corelib.pro
@@ -44,6 +44,8 @@ include(serialization/serialization.pri)
 include(statemachine/statemachine.pri)
 include(mimetypes/mimetypes.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
+
 win32 {
     LIBS_PRIVATE += -lws2_32
     !winrt {
Index: git/src/corelib/kernel/qcoreapplication.cpp
===================================================================
--- git.orig/src/corelib/kernel/qcoreapplication.cpp
+++ git/src/corelib/kernel/qcoreapplication.cpp
@@ -123,6 +123,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_QOBJECT
@@ -468,6 +473,11 @@ QCoreApplicationPrivate::QCoreApplicationPrivate(int &aargc, char **aargv, uint
 #if defined(Q_OS_DARWIN)
     qt_apple_check_os_version();
 #endif
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 1);
+#endif // ENABLE_SA_TRACE
+
     app_compile_version = flags & 0xffffff;
     static const char *const empty = "";
     if (argc == 0 || argv == 0) {
@@ -505,6 +515,10 @@ QCoreApplicationPrivate::~QCoreApplicationPrivate()
     delete [] origArgv;
 #endif
     QCoreApplicationPrivate::clearApplicationFilePath();
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 #ifndef QT_NO_QOBJECT
@@ -1011,6 +1025,11 @@ void QCoreApplication::setQuitLockEnabled(bool enabled)
 */
 bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     return notifyInternal2(receiver, event);
 }
 
@@ -1023,6 +1042,12 @@ bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 */
 bool QCoreApplication::notifyInternal2(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     bool selfRequired = QCoreApplicationPrivate::threadRequiresCoreApplication();
     if (!self && selfRequired)
         return false;
Index: git/src/gui/gui.pro
===================================================================
--- git.orig/src/gui/gui.pro
+++ git/src/gui/gui.pro
@@ -49,6 +49,8 @@ qtConfig(animation): include(animation/animation.pri)
 include(itemmodels/itemmodels.pri)
 include(vulkan/vulkan.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 load(qt_module)
Index: git/src/gui/image/qimagereader.cpp
===================================================================
--- git.orig/src/gui/image/qimagereader.cpp
+++ git/src/gui/image/qimagereader.cpp
@@ -166,6 +166,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QThread>
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_IMAGEFORMATPLUGIN
@@ -1293,6 +1298,11 @@ bool QImageReader::read(QImage *image)
     if (!d->handler && !d->initHandler())
         return false;
 
+#ifdef ENABLE_SA_TRACE
+    long threadId = (long)(QThread::currentThread());
+    qt_tracepoint(Qt, qtImageReader, threadId, 1, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
+
     // set the handler specific options.
     if (d->handler->supportsOption(QImageIOHandler::ScaledSize) && d->scaledSize.isValid()) {
         if ((d->handler->supportsOption(QImageIOHandler::ClipRect) && !d->clipRect.isNull())
@@ -1313,6 +1323,9 @@ bool QImageReader::read(QImage *image)
     if (!d->handler->read(image)) {
         d->imageReaderError = InvalidDataError;
         d->errorString = QImageReader::tr("Unable to read image data");
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
         return false;
     }
 
@@ -1375,6 +1388,9 @@ bool QImageReader::read(QImage *image)
     if (autoTransform())
         qt_imageTransform(*image, transformation());
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
     return true;
 }
 
Index: git/src/gui/kernel/qguiapplication.cpp
===================================================================
--- git.orig/src/gui/kernel/qguiapplication.cpp
+++ git/src/gui/kernel/qguiapplication.cpp
@@ -118,6 +118,11 @@
 
 #include <ctype.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Helper macro for static functions to check on the existence of the application class.
@@ -1766,6 +1771,35 @@ int QGuiApplication::exec()
 */
 bool QGuiApplication::notify(QObject *object, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event) {
+        switch (event->type())
+        {
+        case QEvent::KeyPress:
+        case QEvent::KeyRelease:
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(event);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+            break;
+
+        case QEvent::MouseButtonPress:
+        case QEvent::MouseButtonRelease:
+        case QEvent::MouseButtonDblClick:
+        case QEvent::MouseMove:
+            {
+                QMouseEvent* mouse = static_cast<QMouseEvent*>(event);
+                qt_tracepoint(Qt, qtSendMouseEvent, mouse->buttons());
+            }
+            break;
+
+        default:
+            // Ignore
+            break;
+        }
+    }
+#endif // ENABLE_SA_TRACE
+
     if (object->isWindowType())
         QGuiApplicationPrivate::sendQWindowEventToQPlatformWindow(static_cast<QWindow *>(object), event);
     return QCoreApplication::notify(object, event);
Index: git/src/src.pro
===================================================================
--- git.orig/src/src.pro
+++ git/src/src.pro
@@ -147,6 +147,9 @@ src_plugins.target = sub-plugins

 src_android.subdir = $$PWD/android

+src_satrace.subdir = $$PWD/3rdparty/sa-trace
+src_satrace.target = sub-satrace
+
 # this order is important
 !qtConfig(system-zlib)|cross_compile {
     SUBDIRS += src_qtzlib
@@ -156,6 +159,10 @@ src_android.subdir = $$PWD/android
     }
 }
 SUBDIRS += src_tools_bootstrap src_tools_moc src_tools_rcc src_tools_qfloat16_tables
+qtConfig(sa-trace) {
+    SUBDIRS += src_satrace
+    src_corelib.depends += src_satrace
+}
 qtConfig(regularexpression):pcre2 {
     SUBDIRS += src_3rdparty_pcre2
     src_corelib.depends += src_3rdparty_pcre2

Index: git/src/widgets/graphicsview/qgraphicsscene.cpp
===================================================================
--- git.orig/src/widgets/graphicsview/qgraphicsscene.cpp
+++ git/src/widgets/graphicsview/qgraphicsscene.cpp
@@ -249,6 +249,10 @@
 #include <private/qgesturemanager_p.h>
 #include <private/qpathclipper_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 // #define GESTURE_DEBUG
 #ifndef GESTURE_DEBUG
 # define DEBUG if (0) qDebug
@@ -3325,6 +3329,10 @@ void QGraphicsScene::advance()
 */
 bool QGraphicsScene::event(QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtGraphicsSceneEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     Q_D(QGraphicsScene);
 
     switch (event->type()) {
Index: git/src/widgets/kernel/qapplication.cpp
===================================================================
--- git.orig/src/widgets/kernel/qapplication.cpp
+++ git/src/widgets/kernel/qapplication.cpp
@@ -109,6 +109,11 @@
 
 #include <qpa/qplatformwindow.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 //#define ALIEN_DEBUG
 
 static void initResources()
@@ -2633,6 +2638,10 @@ bool QApplicationPrivate::sendMouseEvent(QWidget *receiver, QMouseEvent *event,
     Q_ASSERT(nativeWidget);
     Q_ASSERT(buttonDown);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtSendMouseEvent, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     if (alienWidget && !isAlien(alienWidget))
         alienWidget = 0;
 
@@ -3101,6 +3110,13 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
     case QEvent::KeyPress:
     case QEvent::KeyRelease:
         {
+#ifdef ENABLE_SA_TRACE
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(e);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+#endif // ENABLE_SA_TRACE
+
             bool isWidget = receiver->isWidgetType();
 #if QT_CONFIG(graphicsview)
             const bool isGraphicsWidget = !isWidget && qobject_cast<QGraphicsWidget *>(receiver);
@@ -3148,6 +3164,10 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
 #endif
             }
             qt_in_tab_key_event = false;
+
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtKeyEventConsumed, key->type(), key->key(), key->modifiers());
+#endif // ENABLE_SA_TRACE
         }
         break;
     case QEvent::MouseButtonPress:
@@ -3213,6 +3233,10 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
 
             mouse->setAccepted(eventAccepted);
 
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, mouse->buttons());
+#endif // ENABLE_SA_TRACE
+
             if (e->type() == QEvent::MouseMove) {
                 if (!pw)
                     break;
Index: git/src/widgets/kernel/qwidgetbackingstore.cpp
===================================================================
--- git.orig/src/widgets/kernel/qwidgetbackingstore.cpp
+++ git/src/widgets/kernel/qwidgetbackingstore.cpp
@@ -67,6 +67,10 @@
 #  include <qpa/qplatformnativeinterface.h>
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 extern QRegion qt_dirtyRegion(QWidget *);
@@ -92,6 +96,11 @@ void QWidgetBackingStore::qt_flush(QWidget *widget, const QRegion &region, QBack
     Q_ASSERT(widget);
     Q_ASSERT(backingStore);
     Q_ASSERT(tlw);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
 #if !defined(QT_NO_PAINT_DEBUG)
     static int flushUpdate = qEnvironmentVariableIntValue("QT_FLUSH_UPDATE");
     if (flushUpdate > 0)
@@ -149,6 +158,10 @@ void QWidgetBackingStore::qt_flush(QWidget *widget, const QRegion &region, QBack
     } else
 #endif
         backingStore->flush(effectiveRegion, widget->windowHandle(), offset);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 #ifndef QT_NO_PAINT_DEBUG
Index: git/src/widgets/widgets.pro
===================================================================
--- git.orig/src/widgets/widgets.pro
+++ git/src/widgets/widgets.pro
@@ -27,6 +27,8 @@ qtConfig(graphicseffect) {
     include(effects/effects.pri)
 }
 
+contains(QT_CONFIG, sa-trace):include(../3rdparty/sa-trace.pri)
+
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 contains(DEFINES,QT_EVAL):include($$QT_SOURCE_TREE/src/corelib/eval.pri)
Index: git/src/widgets/styles/qstylesheetstyle.cpp
===================================================================
--- git.orig/src/widgets/styles/qstylesheetstyle.cpp
+++ git/src/widgets/styles/qstylesheetstyle.cpp
@@ -117,6 +117,10 @@
 #include <QtWidgets/qtoolbar.h>
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 using namespace QCss;
@@ -2779,6 +2783,10 @@ bool QStyleSheetStyle::initObject(const QObject *obj) const
 
 void QStyleSheetStyle::polish(QWidget *w)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 1);
+#endif // ENABLE_SA_TRACE
+
     baseStyle()->polish(w);
     RECURSION_GUARD(return)
 
@@ -2864,6 +2872,11 @@ void QStyleSheetStyle::polish(QWidget *w)
             || (!rule.hasNativeBorder() && !rule.border()->isOpaque()))
             w->setAttribute(Qt::WA_OpaquePaintEvent, false);
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 0);
+#endif // ENABLE_SA_TRACE
+
 }
 
 void QStyleSheetStyle::polish(QApplication *app)
Index: git/src/3rdparty/sa-trace/qt_tracepoints.c
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/qt_tracepoints.c
@@ -0,0 +1,2 @@
+#define TRACEPOINT_CREATE_PROBES
+#include "qt_tracepoints.h"
Index: git/src/3rdparty/sa-trace/qt_tracepoints.h
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/qt_tracepoints.h
@@ -0,0 +1,89 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER         Qt
+
+#undef TRACEPOINT_INCLUDE_FILE
+#define TRACEPOINT_INCLUDE_FILE     ./qt_tracepoints.h
+
+#if !defined(_QT_TRACEPOINTS_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _QT_TRACEPOINTS_H
+
+/* This define will be present exactly once per output library */
+#ifdef QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #define TRACEPOINT_DEFINE
+    #define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#endif
+
+#include <lttng/tracepoint.h>
+#include <stdint.h>
+
+/* Map qt_tracepont to the tracepoint implementation used: */
+#define qt_tracepoint tracepoint
+
+/* Startup Agent, app start stop. */
+TRACEPOINT_EVENT(Qt, qtApplicationCreated,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtQmlResourceLoad,
+                 TP_ARGS(int, isLoading, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isLoading, isLoading)
+                           ctf_string(qmlFileName, qmlFileName)))
+
+/* To show the start & end of Qt QML processing events (1=> Start, 0=> Stop) */
+TRACEPOINT_EVENT(Qt, qtQmlFrameCompile,
+                 TP_ARGS(int, isCompiling, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCompiling, isCompiling) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameCreate,
+                 TP_ARGS(int, isCreating, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCreating,  isCreating) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameBind,
+                 TP_ARGS(int, isBinding, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isBinding,   isBinding) ctf_string(qmlFileName, qmlFileName)))
+
+/* Qt Frame Sync (OpenGL or Raster) */
+TRACEPOINT_EVENT(Qt, qtFrameSync, TP_ARGS(int, isRendering),  TP_FIELDS(ctf_integer(int, isRendering, isRendering)))
+
+/* Qt animation framework timer activity */
+TRACEPOINT_EVENT(Qt, qtAnimDriver, TP_ARGS(int, isActive), TP_FIELDS(ctf_integer(int, isActive, isActive)))
+TRACEPOINT_EVENT(Qt, qtAnimTick, TP_ARGS(int, isUpdating), TP_FIELDS(ctf_integer(int, isUpdating, isUpdating)))
+TRACEPOINT_EVENT(Qt, qtAnimTimingInterval, TP_ARGS(int, interval), TP_FIELDS(ctf_integer(int, interval, interval)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtCoreEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtGraphicsSceneEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt QSendMouseEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtSendMouseEvent, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+TRACEPOINT_EVENT(Qt, qtMouseEventConsumed, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+
+/* Qt NotifyKeyEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtNotifyKeyEvent, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+TRACEPOINT_EVENT(Qt, qtKeyEventConsumed, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+
+/* Qt ImageReader Event (image filename) */
+TRACEPOINT_EVENT(Qt, qtImageReader,
+                 TP_ARGS(int, threadPtr, int, isLoading, const char *, imageName),
+                 TP_FIELDS(ctf_integer(int, threadPtr, threadPtr)
+                           ctf_integer(int, isLoading, isLoading)
+                           ctf_string(imageName, imageName)))
+
+TRACEPOINT_EVENT(Qt, qtStyleSheetPolish,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+#endif /* _QT_TRACEPOINTS_H */
+
+#include <lttng/tracepoint-event.h>
Index: git/src/3rdparty/sa-trace/sa-trace.pro
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace/sa-trace.pro
@@ -0,0 +1,19 @@
+TARGET = sa-trace
+
+CONFIG += create_prl
+
+load(qt_module)
+
+QT -= core gui
+
+#################################
+
+DEFINES         += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -llttng-ust -lurcu-bp -ldl
+
+#################################
+
+SOURCES = qt_tracepoints.c
+
+HEADERS += qt_tracepoints.h
Index: git/mkspecs/features/sa-trace.prf
===================================================================
--- /dev/null
+++ git/mkspecs/features/sa-trace.prf
@@ -0,0 +1,3 @@
+DEFINES += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -lsa-trace -ldl -llttng-ust -lurcu-bp
Index: git/src/3rdparty/sa-trace.pri
===================================================================
--- /dev/null
+++ git/src/3rdparty/sa-trace.pri
@@ -0,0 +1,3 @@
+DEFINES         *= ENABLE_SA_TRACE
+CFLAGS          *= -g3 -O1
+INCLUDEPATH     *= $$PWD/sa-trace
Index: git/sync.profile
===================================================================
--- git.orig/sync.profile
+++ git/sync.profile
@@ -36,6 +36,7 @@
     "QtZlib" => "!>$basedir/src/corelib;$basedir/src/3rdparty/zlib",
     "QtOpenGLExtensions" => "$basedir/src/openglextensions",
     "QtEglFSDeviceIntegration" => "$basedir/src/plugins/platforms/eglfs",
+    "sa-trace" => "$basedir/src/3rdparty/sa-trace",
 );
 %moduleheaders = ( # restrict the module headers to those found in relative path
     "QtEglFSDeviceIntegration" => "api",
