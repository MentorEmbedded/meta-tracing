diff --git a/configure.json b/configure.json
index 50d69b74..6d306afd 100644
--- a/configure.json
+++ b/configure.json
@@ -139,7 +139,8 @@
             "widgets": "boolean",
             "xplatform": "string",
             "zlib": { "type": "enum", "name": "system-zlib", "values": { "system": "yes", "qt": "no" } },
-            "zstd": "boolean"
+            "zstd": "boolean",
+            "sa-trace": "boolean"
         },
         "prefix": {
             "D": "defines",
@@ -185,6 +186,10 @@
                 "-lzstd"
             ]
         },
+        "sa-trace":{
+            "label": "sa-trace",
+            "sources": {"libs": "-lsa-trace"}
+        },
         "dbus": {
             "label": "D-Bus >= 1.2",
             "test": {
@@ -661,6 +666,11 @@
     },
 
     "features": {
+        "sa-trace": {
+            "label": "Use Sourcery Analyzer",
+            "condition": "libs.sa-trace",
+            "output": [ "publicFeature", "publicQtConfig" ]
+        },
         "prepare": {
             "condition": "features.gcc-sysroot || true",
             "output": [ "prepareSpec", "prepareOptions", "preparePaths", "reloadSpec" ]
@@ -1666,7 +1676,8 @@ Configure with '-qreal float' to create a build that is binary-compatible with 5
                 "pkg-config",
                 "libudev",
                 "system-zlib",
-                "zstd"
+                "zstd",
+                "sa-trace"
             ]
         }
     ]
diff --git a/config_help.txt b/config_help.txt
index d9ff8e59..7e007018 100644
--- a/config_help.txt
+++ b/config_help.txt
@@ -131,6 +131,8 @@ Build options:
                          Currently supported backends are 'etw' (Windows) and
                          'lttng' (Linux), or 'yes' for auto-detection. [no]
 
+  -sa-trace ............ Use Sourcery Analyzer
+
   -sanitize {address|thread|memory|fuzzer-no-link|undefined}
                          Instrument with the specified compiler sanitizer.
                          Note that some sanitizers cannot be combined;
diff --git a/configure b/configure
index b6c9b462..1099d8c3 100755
--- a/configure
+++ b/configure
@@ -369,6 +369,7 @@ OPT_VERBOSE=no
 OPT_HELP=
 CFG_SILENT=no
 CFG_DEV=no
+CFG_SOURCERYANALYZER=no
 
 #-------------------------------------------------------------------------------
 # parse command line arguments
@@ -488,6 +489,13 @@ while [ "$#" -gt 0 ]; do
     external-hostbindir)
         CFG_HOST_QT_TOOLS_PATH="$VAL"
         ;;
+    sa-trace)
+        if [ "$VAL" = "yes" ]; then
+            CFG_SOURCERYANALYZER="yes"
+        else
+            UNKNOWN_OPT="yes"
+        fi
+        ;;
     platform)
         PLATFORM="$VAL"
         ;;
@@ -855,3 +863,7 @@ if [ -n "$CFG_HOST_QT_TOOLS_PATH" ]; then
 else
     "$outpath/bin/qmake" "$relpathMangled" -- "$@"
 fi
+
+if [ "$CFG_SOURCERYANALYZER" = "yes" ]; then
+    QT_CONFIG="$QT_CONFIG sa-trace"
+fi
diff --git a/sync.profile b/sync.profile
index 0292bf0d..241c09fe 100644
--- a/sync.profile
+++ b/sync.profile
@@ -40,6 +40,7 @@
     "QtMockPlugins1" => "$basedir/tests/auto/cmake/mockplugins/mockplugins1",
     "QtMockPlugins2" => "$basedir/tests/auto/cmake/mockplugins/mockplugins2",
     "QtMockPlugins3" => "$basedir/tests/auto/cmake/mockplugins/mockplugins3",
+    "sa-trace" => "$basedir/src/3rdparty/sa-trace",
 );
 %moduleheaders = ( # restrict the module headers to those found in relative path
     "QtEglFSDeviceIntegration" => "api",
diff --git a/src/3rdparty/sa-trace.pri b/src/3rdparty/sa-trace.pri
new file mode 100644
index 00000000..bfb66697
--- /dev/null
+++ b/src/3rdparty/sa-trace.pri
@@ -0,0 +1,3 @@
+DEFINES         *= ENABLE_SA_TRACE
+CFLAGS          *= -g3 -O1
+INCLUDEPATH     *= $$PWD/sa-trace
diff --git a/mkspecs/features/sa-trace.prf b/mkspecs/features/sa-trace.prf
new file mode 100644
index 00000000..da2d39d9
--- /dev/null
+++ b/mkspecs/features/sa-trace.prf
@@ -0,0 +1,3 @@
+DEFINES         += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -lsa-trace -ldl -llttng-ust -lurcu-bp
diff --git a/src/3rdparty/sa-trace/sa-trace.pro b/src/3rdparty/sa-trace/sa-trace.pro
new file mode 100644
index 00000000..5bc72fe2
--- /dev/null
+++ b/src/3rdparty/sa-trace/sa-trace.pro
@@ -0,0 +1,19 @@
+TARGET = sa-trace
+
+CONFIG += create_prl
+
+load(qt_module)
+
+QT -= core gui
+
+#################################
+
+DEFINES         += ENABLE_SA_TRACE
+CFLAGS          += -g3 -O1
+LIBS            += -llttng-ust -lurcu-bp -ldl
+
+#################################
+
+SOURCES = qt_tracepoints.c
+
+HEADERS += qt_tracepoints.h
diff --git a/src/3rdparty/sa-trace/qt_tracepoints.c b/src/3rdparty/sa-trace/qt_tracepoints.c
new file mode 100644
index 00000000..121df3d6
--- /dev/null
+++ b/src/3rdparty/sa-trace/qt_tracepoints.c
@@ -0,0 +1,2 @@
+#define TRACEPOINT_CREATE_PROBES
+#include "qt_tracepoints.h"
diff --git a/src/3rdparty/sa-trace/qt_tracepoints.h b/src/3rdparty/sa-trace/qt_tracepoints.h
new file mode 100644
index 00000000..e0c49bc3
--- /dev/null
+++ b/src/3rdparty/sa-trace/qt_tracepoints.h
@@ -0,0 +1,89 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER         Qt
+
+#undef TRACEPOINT_INCLUDE_FILE
+#define TRACEPOINT_INCLUDE_FILE     ./qt_tracepoints.h
+
+#if !defined(_QT_TRACEPOINTS_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _QT_TRACEPOINTS_H
+
+/* This define will be present exactly once per output library */
+#ifdef QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #define TRACEPOINT_DEFINE
+    #define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#endif
+
+#include <lttng/tracepoint.h>
+#include <stdint.h>
+
+/* Map qt_tracepont to the tracepoint implementation used: */
+#define qt_tracepoint tracepoint
+
+/* Startup Agent, app start stop. */
+TRACEPOINT_EVENT(Qt, qtApplicationCreated,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtQmlResourceLoad,
+                 TP_ARGS(int, isLoading, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isLoading, isLoading)
+                           ctf_string(qmlFileName, qmlFileName)))
+
+/* To show the start & end of Qt QML processing events (1=> Start, 0=> Stop) */
+TRACEPOINT_EVENT(Qt, qtQmlFrameCompile,
+                 TP_ARGS(int, isCompiling, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCompiling, isCompiling) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameCreate,
+                 TP_ARGS(int, isCreating, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isCreating,  isCreating) ctf_string(qmlFileName, qmlFileName)))
+TRACEPOINT_EVENT(Qt, qtQmlFrameBind,
+                 TP_ARGS(int, isBinding, const char *, qmlFileName),
+                 TP_FIELDS(ctf_integer(int, isBinding,   isBinding) ctf_string(qmlFileName, qmlFileName)))
+
+/* Qt Frame Sync (OpenGL or Raster) */
+TRACEPOINT_EVENT(Qt, qtFrameSync, TP_ARGS(int, isRendering),  TP_FIELDS(ctf_integer(int, isRendering, isRendering)))
+
+/* Qt animation framework timer activity */
+TRACEPOINT_EVENT(Qt, qtAnimDriver, TP_ARGS(int, isActive), TP_FIELDS(ctf_integer(int, isActive, isActive)))
+TRACEPOINT_EVENT(Qt, qtAnimTick, TP_ARGS(int, isUpdating), TP_FIELDS(ctf_integer(int, isUpdating, isUpdating)))
+TRACEPOINT_EVENT(Qt, qtAnimTimingInterval, TP_ARGS(int, interval), TP_FIELDS(ctf_integer(int, interval, interval)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtCoreEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt event processed by Qt core event loop (event types & name) */
+TRACEPOINT_EVENT(Qt, qtGraphicsSceneEvents,
+                 TP_ARGS(int, eventType),
+                 TP_FIELDS(ctf_integer(int, eventType, eventType)))
+
+/* Qt QSendMouseEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtSendMouseEvent, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+TRACEPOINT_EVENT(Qt, qtMouseEventConsumed, TP_ARGS(int, buttons), TP_FIELDS(ctf_integer(int, buttons, buttons)))
+
+/* Qt NotifyKeyEvent (event types & name) */
+TRACEPOINT_EVENT(Qt, qtNotifyKeyEvent, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+TRACEPOINT_EVENT(Qt, qtKeyEventConsumed, TP_ARGS(int, type, int, key, int, modifiers),
+                 TP_FIELDS(ctf_integer(int, type, type)
+                           ctf_integer(int, key, key)
+                           ctf_integer(int, modifiers, modifiers)))
+
+/* Qt ImageReader Event (image filename) */
+TRACEPOINT_EVENT(Qt, qtImageReader,
+                 TP_ARGS(int, threadPtr, int, isLoading, const char *, imageName),
+                 TP_FIELDS(ctf_integer(int, threadPtr, threadPtr)
+                           ctf_integer(int, isLoading, isLoading)
+                           ctf_string(imageName, imageName)))
+
+TRACEPOINT_EVENT(Qt, qtStyleSheetPolish,
+                TP_ARGS(int, isAlive),
+                TP_FIELDS(ctf_integer(int, isAlive, isAlive)))
+
+#endif /* _QT_TRACEPOINTS_H */
+
+#include <lttng/tracepoint-event.h>
diff --git a/src/widgets/styles/qstylesheetstyle.cpp b/src/widgets/styles/qstylesheetstyle.cpp
index e2c8a0a5..81f93ca3 100644
--- a/src/widgets/styles/qstylesheetstyle.cpp
+++ b/src/widgets/styles/qstylesheetstyle.cpp
@@ -121,6 +121,10 @@
 #include <QtGui/qpainterpath.h>
 #include <QtGui/qscreen.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 using namespace QCss;
@@ -2820,6 +2824,10 @@ bool QStyleSheetStyle::initObject(const QObject *obj) const
 
 void QStyleSheetStyle::polish(QWidget *w)
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 1);
+#endif // ENABLE_SA_TRACE
+
     baseStyle()->polish(w);
     RECURSION_GUARD(return)
 
@@ -2908,6 +2916,9 @@ void QStyleSheetStyle::polish(QWidget *w)
             || (!rule.hasNativeBorder() && !rule.border()->isOpaque()))
             w->setAttribute(Qt::WA_OpaquePaintEvent, false);
     }
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtStyleSheetPolish, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 void QStyleSheetStyle::polish(QApplication *app)
diff --git a/src/widgets/widgets.pro b/src/widgets/widgets.pro
index 2d5ba05d..70af22f7 100644
--- a/src/widgets/widgets.pro
+++ b/src/widgets/widgets.pro
@@ -30,6 +30,8 @@ qtConfig(graphicseffect) {
     include(effects/effects.pri)
 }
 
+contains(QT_CONFIG, sa-trace):include(../3rdparty/sa-trace.pri)
+
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 QMAKE_DYNAMIC_LIST_FILE = $$PWD/QtWidgets.dynlist
diff --git a/src/widgets/kernel/qapplication.cpp b/src/widgets/kernel/qapplication.cpp
index f8ca25bc..322183ea 100644
--- a/src/widgets/kernel/qapplication.cpp
+++ b/src/widgets/kernel/qapplication.cpp
@@ -114,6 +114,11 @@
 #include <algorithm>
 #include <iterator>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 //#define ALIEN_DEBUG
 
 static void initResources()
@@ -2539,6 +2544,10 @@ bool QApplicationPrivate::sendMouseEvent(QWidget *receiver, QMouseEvent *event,
     Q_ASSERT(nativeWidget);
     Q_ASSERT(buttonDown);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtSendMouseEvent, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     if (alienWidget && !isAlien(alienWidget))
         alienWidget = nullptr;
 
@@ -3014,6 +3023,13 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
     case QEvent::KeyPress:
     case QEvent::KeyRelease:
         {
+#ifdef ENABLE_SA_TRACE
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(e);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+#endif // ENABLE_SA_TRACE
+
             bool isWidget = receiver->isWidgetType();
 #if QT_CONFIG(graphicsview)
             const bool isGraphicsWidget = !isWidget && qobject_cast<QGraphicsWidget *>(receiver);
@@ -3061,6 +3077,9 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
 #endif
             }
             qt_in_tab_key_event = false;
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtKeyEventConsumed, key->type(), key->key(), key->modifiers());
+#endif // ENABLE_SA_TRACE
         }
         break;
     case QEvent::MouseButtonPress:
@@ -3126,6 +3145,10 @@ bool QApplication::notify(QObject *receiver, QEvent *e)
 
             mouse->setAccepted(eventAccepted);
 
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, mouse->buttons());
+#endif // ENABLE_SA_TRACE
+
             if (e->type() == QEvent::MouseMove) {
                 if (!pw)
                     break;
diff --git a/src/widgets/graphicsview/qgraphicsscene.cpp b/src/widgets/graphicsview/qgraphicsscene.cpp
index f2ff658d..8b0b0578 100644
--- a/src/widgets/graphicsview/qgraphicsscene.cpp
+++ b/src/widgets/graphicsview/qgraphicsscene.cpp
@@ -249,6 +249,10 @@
 #include <private/qgesturemanager_p.h>
 #include <private/qpathclipper_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 // #define GESTURE_DEBUG
 #ifndef GESTURE_DEBUG
 # define DEBUG if (0) qDebug
@@ -3348,6 +3352,11 @@ void QGraphicsScene::advance()
 */
 bool QGraphicsScene::event(QEvent *event)
 {
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtGraphicsSceneEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     Q_D(QGraphicsScene);
 
     switch (event->type()) {
diff --git a/src/src.pro b/src/src.pro
index f3f8d57a..86007c0f 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -149,6 +149,9 @@ src_plugins.target = sub-plugins
 
 src_android.subdir = $$PWD/android
 
+src_satrace.subdir = $$PWD/3rdparty/sa-trace
+src_satrace.target = sub-satrace
+
 # this order is important
 !qtConfig(system-zlib)|cross_compile {
     SUBDIRS += src_qtzlib
@@ -158,6 +161,10 @@ src_android.subdir = $$PWD/android
     }
 }
 SUBDIRS += src_tools_bootstrap src_tools_moc src_tools_rcc src_tools_tracegen
+qtConfig(sa-trace) {
+    SUBDIRS += src_satrace
+    src_corelib.depends += src_satrace
+}
 qtConfig(regularexpression):!qtConfig(system-pcre2):pcre2 {
     SUBDIRS += src_3rdparty_pcre2
     src_corelib.depends += src_3rdparty_pcre2
diff --git a/src/gui/kernel/qguiapplication.cpp b/src/gui/kernel/qguiapplication.cpp
index 8c699ea4..023f27c9 100644
--- a/src/gui/kernel/qguiapplication.cpp
+++ b/src/gui/kernel/qguiapplication.cpp
@@ -124,6 +124,11 @@
 
 #include <ctype.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Helper macro for static functions to check on the existence of the application class.
@@ -1871,6 +1876,35 @@ int QGuiApplication::exec()
 */
 bool QGuiApplication::notify(QObject *object, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event) {
+        switch (event->type())
+        {
+        case QEvent::KeyPress:
+        case QEvent::KeyRelease:
+            {
+                QKeyEvent* key = static_cast<QKeyEvent*>(event);
+                qt_tracepoint(Qt, qtNotifyKeyEvent, key->type(), key->key(), key->modifiers());
+            }
+            break;
+
+        case QEvent::MouseButtonPress:
+        case QEvent::MouseButtonRelease:
+        case QEvent::MouseButtonDblClick:
+        case QEvent::MouseMove:
+            {
+                QMouseEvent* mouse = static_cast<QMouseEvent*>(event);
+                qt_tracepoint(Qt, qtSendMouseEvent, mouse->buttons());
+            }
+            break;
+
+        default:
+            // Ignore
+            break;
+        }
+    }
+#endif // ENABLE_SA_TRACE
+
     if (object->isWindowType()) {
         if (QGuiApplicationPrivate::sendQWindowEventToQPlatformWindow(static_cast<QWindow *>(object), event))
             return true; // Platform plugin ate the event
diff --git a/src/gui/image/qimagereader.cpp b/src/gui/image/qimagereader.cpp
index 5cb7e132..29e15f64 100644
--- a/src/gui/image/qimagereader.cpp
+++ b/src/gui/image/qimagereader.cpp
@@ -169,6 +169,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QThread>
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 using namespace QImageReaderWriterHelpers;
@@ -1263,6 +1268,11 @@ bool QImageReader::read(QImage *image)
     if (!d->handler && !d->initHandler())
         return false;
 
+#ifdef ENABLE_SA_TRACE
+    long threadId = (long)(QThread::currentThread());
+    qt_tracepoint(Qt, qtImageReader, threadId, 1, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
+
     // set the handler specific options.
     if (d->handler->supportsOption(QImageIOHandler::ScaledSize) && d->scaledSize.isValid()) {
         if ((d->handler->supportsOption(QImageIOHandler::ClipRect) && !d->clipRect.isNull())
@@ -1294,6 +1304,9 @@ bool QImageReader::read(QImage *image)
     if (!result) {
         d->imageReaderError = InvalidDataError;
         d->errorString = QImageReader::tr("Unable to read image data");
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
         return false;
     }
 
@@ -1358,6 +1371,10 @@ bool QImageReader::read(QImage *image)
     if (autoTransform())
         qt_imageTransform(*image, transformation());
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtImageReader, threadId, 0, fileName().toLatin1().constData());
+#endif // ENABLE_SA_TRACE
+
     return true;
 }
 
diff --git a/src/gui/gui.pro b/src/gui/gui.pro
index 20372d92..dff51689 100644
--- a/src/gui/gui.pro
+++ b/src/gui/gui.pro
@@ -52,6 +52,10 @@ include(vulkan/vulkan.pri)
 include(platform/platform.pri)
 include(rhi/rhi.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
+contains(QT_CONFIG,sa-trace):CONFIG += sa-trace
+contains(QT_CONFIG,sa-trace):LIBS += -L$$OUT_PWD/../../lib
+
 QMAKE_LIBS += $$QMAKE_LIBS_GUI
 
 load(qt_module)
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index 5fdcc9b9..1e99214a 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -132,6 +132,11 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 #if defined(Q_OS_WIN) || defined(Q_OS_MAC)
@@ -445,6 +450,11 @@ QCoreApplicationPrivate::QCoreApplicationPrivate(int &aargc, char **aargv, uint
     , q_ptr(nullptr)
 #endif
 {
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 1);
+#endif // ENABLE_SA_TRACE
+
     app_compile_version = flags & 0xffffff;
     static const char *const empty = "";
     if (argc == 0 || argv == nullptr) {
@@ -486,6 +496,10 @@ QCoreApplicationPrivate::~QCoreApplicationPrivate()
     delete [] origArgv;
 #endif
     QCoreApplicationPrivate::clearApplicationFilePath();
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtApplicationCreated, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 #ifndef QT_NO_QOBJECT
@@ -1024,6 +1038,11 @@ void QCoreApplication::setQuitLockEnabled(bool enabled)
 */
 bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     return notifyInternal2(receiver, event);
 }
 #endif
@@ -1037,6 +1056,11 @@ bool QCoreApplication::notifyInternal(QObject *receiver, QEvent *event)
 */
 bool QCoreApplication::notifyInternal2(QObject *receiver, QEvent *event)
 {
+#ifdef ENABLE_SA_TRACE
+    if (event)
+        qt_tracepoint(Qt, qtCoreEvents, event->type());
+#endif // ENABLE_SA_TRACE
+
     bool selfRequired = QCoreApplicationPrivate::threadRequiresCoreApplication();
     if (!self && selfRequired)
         return false;
diff --git a/src/corelib/corelib.pro b/src/corelib/corelib.pro
index 7d057e01..96f49dd8 100644
--- a/src/corelib/corelib.pro
+++ b/src/corelib/corelib.pro
@@ -50,6 +50,8 @@ include(statemachine/statemachine.pri)
 include(mimetypes/mimetypes.pri)
 include(platform/platform.pri)
 
+contains(QT_CONFIG,sa-trace):include(../3rdparty/sa-trace.pri)
+
 win32 {
     QMAKE_USE_PRIVATE += ws2_32
     !winrt: QMAKE_USE_PRIVATE += advapi32 kernel32 ole32 shell32 uuid user32 winmm
diff --git a/src/corelib/animation/qabstractanimation.cpp b/src/corelib/animation/qabstractanimation.cpp
index b7136dc0..fa8a0916 100644
--- a/src/corelib/animation/qabstractanimation.cpp
+++ b/src/corelib/animation/qabstractanimation.cpp
@@ -154,6 +154,10 @@
 #include <QtCore/qpointer.h>
 #include <QtCore/qscopedvaluerollback.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <sa-trace/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #define DEFAULT_TIMER_INTERVAL 16
 #define PAUSE_TIMER_COARSE_THRESHOLD 2000
 
@@ -223,6 +227,11 @@ QUnifiedTimer::QUnifiedTimer() :
     slowdownFactor(5.0f), profilerCallback(nullptr),
     driverStartTime(0), temporalDrift(0)
 {
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, DEFAULT_TIMER_INTERVAL);
+#endif // ENABLE_SA_TRACE
+
     time.invalidate();
     driver = &defaultDriver;
 }
@@ -316,6 +325,10 @@ void QUnifiedTimer::updateAnimationTimers(qint64 currentTick)
     //* it might happen in some cases that the delta is negative because the animation driver
     //  advances faster than time.elapsed()
     if (delta > 0) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 1);
+#endif // ENABLE_SA_TRACE
+
         QScopedValueRollback<bool> guard(insideTick, true);
         if (profilerCallback)
             profilerCallback(delta);
@@ -324,6 +337,10 @@ void QUnifiedTimer::updateAnimationTimers(qint64 currentTick)
             animation->updateAnimationsTime(delta);
         }
         currentAnimationIdx = 0;
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtAnimTick, 0);
+#endif // ENABLE_SA_TRACE
     }
 }
 
@@ -372,6 +389,11 @@ void QUnifiedTimer::restart()
 
 void QUnifiedTimer::setTimingInterval(int interval)
 {
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimTimingInterval, interval);
+#endif // ENABLE_SA_TRACE
+
     timingInterval = interval;
 
     if (driver->isRunning() && !pauseTimer.isActive()) {
@@ -869,6 +891,10 @@ bool QAnimationDriver::isRunning() const
 
 void QAnimationDriver::start()
 {
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 1);
+#endif // ENABLE_SA_TRACE
+
     Q_D(QAnimationDriver);
     if (!d->running) {
         d->running = true;
@@ -885,6 +911,10 @@ void QAnimationDriver::stop()
         d->running = false;
         emit stopped();
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtAnimDriver, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 

