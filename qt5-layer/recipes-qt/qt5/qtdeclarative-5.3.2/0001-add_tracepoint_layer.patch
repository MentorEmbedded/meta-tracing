diff --git a/src/qml/qml.pro b/src/qml/qml.pro
index 17d35f8..6ef177b 100644
--- a/src/qml/qml.pro
+++ b/src/qml/qml.pro
@@ -40,3 +40,4 @@ include(qml/qml.pri)
 include(debugger/debugger.pri)
 include(animations/animations.pri)
 include(types/types.pri)
+contains(QT_CONFIG,tracesupport):CONFIG += tracesupport
diff --git a/src/qml/qml/qqmlbinding.cpp b/src/qml/qml/qqmlbinding.cpp
index 571d783..43b2047 100644
--- a/src/qml/qml/qqmlbinding.cpp
+++ b/src/qml/qml/qqmlbinding.cpp
@@ -56,6 +56,10 @@
 #include <QVariant>
 #include <QtCore/qdebug.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Used in qqmlabstractbinding.cpp
@@ -236,6 +240,10 @@ void QQmlBinding::update(QQmlPropertyPrivate::WriteFlags flags)
     trace.addDetail("Column", columnNo);
 
     if (!updatingFlag()) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(url));
+#endif // ENABLE_SA_TRACE
+
         QQmlBindingProfiler prof(ep->profiler, url, lineNo, columnNo);
         setUpdatingFlag(true);
 
@@ -283,6 +291,10 @@ void QQmlBinding::update(QQmlPropertyPrivate::WriteFlags flags)
 
         if (!watcher.wasDeleted())
             setUpdatingFlag(false);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(url));
+#endif // ENABLE_SA_TRACE
     } else {
         QQmlProperty p = property();
         QQmlAbstractBinding::printBindingLoopError(p);
diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index 39a7d89..51d17cc 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -85,6 +85,10 @@
             "} catch(e) {}"\
         "})"
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 
 namespace {
     QThreadStorage<int> creationDepth;
@@ -874,6 +878,10 @@ QQmlComponentPrivate::beginCreate(QQmlContextData *context)
 
     QQmlEnginePrivate *enginePriv = QQmlEnginePrivate::get(engine);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(cc->url.toString()));
+#endif // ENABLE_SA_TRACE
+
     enginePriv->inProgressCreations++;
     state.errors.clear();
     state.completePending = true;
@@ -966,6 +974,10 @@ void QQmlComponentPrivate::completeCreate()
     if (state.completePending) {
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(engine);
         complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 
     if (depthIncreased) {
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index 0424c57..6bf6854 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -113,6 +113,11 @@
 #endif
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 Q_DECLARE_METATYPE(QQmlProperty)
 
 QT_BEGIN_NAMESPACE
@@ -1349,6 +1354,11 @@ void qmlExecuteDeferred(QObject *object)
     QQmlData *data = QQmlData::get(object);
 
     if (data && data->deferredData && !data->wasDeleted(object)) {
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
+
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(data->context->engine);
 
         QQmlComponentPrivate::ConstructionState state;
@@ -1360,6 +1370,11 @@ void qmlExecuteDeferred(QObject *object)
         data->deferredData = 0;
 
         QQmlComponentPrivate::complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
diff --git a/src/qml/qml/qqmltypeloader.cpp b/src/qml/qml/qqmltypeloader.cpp
index 7fc08bd..401430a 100644
--- a/src/qml/qml/qqmltypeloader.cpp
+++ b/src/qml/qml/qqmltypeloader.cpp
@@ -64,6 +64,10 @@
 #include <QtCore/qwaitcondition.h>
 #include <QtQml/qqmlextensioninterface.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #if defined (Q_OS_UNIX)
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -927,6 +931,10 @@ void QQmlDataLoader::load(QQmlDataBlob *blob, Mode mode)
 #endif
     blob->startLoading(this);
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 1, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     if (m_thread->isThisThread()) {
         unlock();
         loadThread(blob);
@@ -1045,6 +1053,9 @@ void QQmlDataLoader::loadThread(QQmlDataBlob *blob)
                 if (blob->m_data.isAsync())
                     m_thread->callDownloadProgressChanged(blob, 1.);
                 setData(blob, debugCache.value(url, QByteArray()));
+#ifdef ENABLE_SA_TRACE
+                if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
                 return;
             }
         }
@@ -1067,6 +1078,9 @@ void QQmlDataLoader::loadThread(QQmlDataBlob *blob)
 
         setData(blob, &file);
 
+#ifdef ENABLE_SA_TRACE
+        if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
     } else {
 
         QNetworkReply *reply = m_thread->networkAccessManager()->get(QNetworkRequest(blob->m_url));
@@ -1128,6 +1142,10 @@ void QQmlDataLoader::networkReplyFinished(QNetworkReply *reply)
         setData(blob, data);
     }
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     blob->release();
 }
 
@@ -2094,6 +2112,10 @@ void QQmlTypeData::unregisterCallback(TypeDataCallback *callback)
 
 void QQmlTypeData::done()
 {
+#ifdef ENABLE_SA_TRACE
+	qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     // Check all script dependencies for errors
     for (int ii = 0; !isError() && ii < m_scripts.count(); ++ii) {
         const ScriptReference &script = m_scripts.at(ii);
@@ -2331,6 +2353,10 @@ void QQmlTypeData::compile()
 {
     Q_ASSERT(m_compiledData == 0);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 1, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     m_compiledData = new QQmlCompiledData(typeLoader()->engine());
     m_compiledData->url = finalUrl();
     m_compiledData->name = finalUrlString();
@@ -2343,6 +2369,10 @@ void QQmlTypeData::compile()
         m_compiledData->release();
         m_compiledData = 0;
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
 }
 
 void QQmlTypeData::resolveTypes()
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index e78f914..5f5a5b4 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -73,6 +73,11 @@
 #include <private/qqmlprofilerservice_p.h>
 #include <private/qqmlmemoryprofiler_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 extern Q_GUI_EXPORT QImage qt_gl_read_framebuffer(const QSize &size, bool alpha_format, bool include_alpha);
@@ -1290,6 +1295,11 @@ bool QQuickWindow::event(QEvent *e)
 {
     Q_D(QQuickWindow);
 
+#ifdef ENABLE_SA_TRACE
+    if (e)
+        qt_tracepoint(Qt, qtGraphicsSceneEvents, e->type());
+#endif // ENABLE_SA_TRACE
+
     switch (e->type()) {
 
     case QEvent::TouchBegin:
@@ -1389,6 +1399,10 @@ void QQuickWindowPrivate::deliverKeyEvent(QKeyEvent *e)
             QGuiApplication::sendEvent(focusWindow, e);
     }
 #endif
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtKeyEventConsumed, e->type(), e->key(), e->modifiers());
+#endif // ENABLE_SA_TRACE
 }
 
 QMouseEvent *QQuickWindowPrivate::cloneMouseEvent(QMouseEvent *event, QPointF *transformedLocalPos)
@@ -1457,6 +1471,11 @@ bool QQuickWindowPrivate::deliverMouseEvent(QMouseEvent *event)
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
         return event->isAccepted();
     }
 
@@ -1466,10 +1485,19 @@ bool QQuickWindowPrivate::deliverMouseEvent(QMouseEvent *event)
         me->accept();
         q->sendEvent(mouseGrabberItem, me.data());
         event->setAccepted(me->isAccepted());
-        if (me->isAccepted())
+        if (me->isAccepted()) {
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, me->buttons());
+#endif // ENABLE_SA_TRACE
+
             return true;
+        }
     }
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     return false;
 }
 
@@ -1506,6 +1534,10 @@ void QQuickWindow::mouseReleaseEvent(QMouseEvent *event)
 
     if (!d->mouseGrabberItem) {
         QWindow::mouseReleaseEvent(event);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1533,6 +1565,10 @@ void QQuickWindow::mouseDoubleClickEvent(QMouseEvent *event)
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1586,6 +1622,10 @@ void QQuickWindow::mouseMoveEvent(QMouseEvent *event)
             accepted = d->clearHover();
         }
         event->setAccepted(accepted);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
diff --git a/src/quick/quick.pro b/src/quick/quick.pro
index 38e743c..0bdba7c 100644
--- a/src/quick/quick.pro
+++ b/src/quick/quick.pro
@@ -29,6 +29,7 @@ include(util/util.pri)
 include(scenegraph/scenegraph.pri)
 include(items/items.pri)
 include(designer/designer.pri)
+contains(QT_CONFIG,tracesupport):CONFIG += tracesupport
 
 HEADERS += \
     qtquickglobal.h \
diff --git a/src/quick/scenegraph/coreapi/qsgrenderer.cpp b/src/quick/scenegraph/coreapi/qsgrenderer.cpp
index a4e122e..2135734 100644
--- a/src/quick/scenegraph/coreapi/qsgrenderer.cpp
+++ b/src/quick/scenegraph/coreapi/qsgrenderer.cpp
@@ -56,6 +56,10 @@
 
 #include <private/qquickprofiler_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 //#define RENDERER_DEBUG
@@ -225,6 +229,10 @@ void QSGRenderer::renderScene(const QSGBindable &bindable)
     if (!m_root_node)
         return;
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
     m_is_rendering = true;
 
 
@@ -296,6 +304,10 @@ void QSGRenderer::renderScene(const QSGBindable &bindable)
             renderTime - bindTime));
 
 #endif
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 void QSGRenderer::setProjectionMatrixToDeviceRect()
