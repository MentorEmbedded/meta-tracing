Index: qtdeclarative-opensource-src-5.4.0/src/qml/qml.pro
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/qml/qml.pro	2014-12-05 09:25:11.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/qml/qml.pro	2014-12-30 14:14:08.392510682 -0700
@@ -42,3 +42,4 @@
 include(debugger/debugger.pri)
 include(animations/animations.pri)
 include(types/types.pri)
+contains(QT_CONFIG,tracesupport):CONFIG += tracesupport
Index: qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlbinding.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/qml/qml/qqmlbinding.cpp	2014-12-05 09:25:11.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlbinding.cpp	2014-12-30 14:14:08.392510682 -0700
@@ -48,6 +48,10 @@
 #include <QVariant>
 #include <QtCore/qdebug.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 // Used in qqmlabstractbinding.cpp
@@ -194,6 +198,10 @@
     trace.addDetail("Column", columnNo);
 
     if (!updatingFlag()) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(url));
+#endif // ENABLE_SA_TRACE
+
         QQmlBindingProfiler prof(ep->profiler, url, lineNo, columnNo);
         setUpdatingFlag(true);
 
@@ -241,6 +249,10 @@
 
         if (!watcher.wasDeleted())
             setUpdatingFlag(false);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(url));
+#endif // ENABLE_SA_TRACE
     } else {
         QQmlProperty p = property();
         QQmlAbstractBinding::printBindingLoopError(p);
Index: qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlcomponent.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/qml/qml/qqmlcomponent.cpp	2014-12-05 09:25:11.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlcomponent.cpp	2014-12-30 14:14:08.396510680 -0700
@@ -77,6 +77,10 @@
             "} catch(e) {}"\
         "})"
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 
 namespace {
     QThreadStorage<int> creationDepth;
@@ -870,6 +874,10 @@
 
     QQmlEnginePrivate *enginePriv = QQmlEnginePrivate::get(engine);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(cc->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     enginePriv->inProgressCreations++;
     state.errors.clear();
     state.completePending = true;
@@ -962,6 +970,10 @@
     if (state.completePending) {
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(engine);
         complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 
     if (depthIncreased) {
Index: qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlengine.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/qml/qml/qqmlengine.cpp	2014-12-05 09:25:11.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmlengine.cpp	2014-12-30 14:14:08.404510679 -0700
@@ -105,6 +105,11 @@
 #endif
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 Q_DECLARE_METATYPE(QQmlProperty)
 
 QT_BEGIN_NAMESPACE
@@ -1345,6 +1350,11 @@
     QQmlData *data = QQmlData::get(object);
 
     if (data && data->deferredData && !data->wasDeleted(object)) {
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
+
         QQmlEnginePrivate *ep = QQmlEnginePrivate::get(data->context->engine);
 
         QQmlComponentPrivate::ConstructionState state;
@@ -1356,6 +1366,11 @@
         data->deferredData = 0;
 
         QQmlComponentPrivate::complete(ep, &state);
+
+#ifdef ENABLE_SA_TRACE
+        if (data->outerContext)
+            qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
Index: qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmltypeloader.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/qml/qml/qqmltypeloader.cpp	2014-12-05 09:25:11.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/qml/qml/qqmltypeloader.cpp	2014-12-30 14:14:08.408510681 -0700
@@ -56,6 +56,10 @@
 #include <QtCore/qwaitcondition.h>
 #include <QtQml/qqmlextensioninterface.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 #if defined (Q_OS_UNIX)
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -937,6 +941,10 @@
 #endif
     blob->startLoading(this);
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 1, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     if (m_thread->isThisThread()) {
         unlock();
         loadThread(blob);
@@ -1061,6 +1069,9 @@
                 if (blob->m_data.isAsync())
                     m_thread->callDownloadProgressChanged(blob, 1.);
                 setData(blob, debugCache.value(url, QByteArray()));
+#ifdef ENABLE_SA_TRACE
+                if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
                 return;
             }
         }
@@ -1083,6 +1094,9 @@
 
         setData(blob, &file);
 
+#ifdef ENABLE_SA_TRACE
+        if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
     } else {
 
         QNetworkReply *reply = m_thread->networkAccessManager()->get(QNetworkRequest(blob->m_url));
@@ -1144,6 +1158,10 @@
         setData(blob, data);
     }
 
+#ifdef ENABLE_SA_TRACE
+    if (blob) qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->url().toString()));
+#endif // ENABLE_SA_TRACE
+
     blob->release();
 }
 
@@ -2114,6 +2132,10 @@
 
 void QQmlTypeData::done()
 {
+#ifdef ENABLE_SA_TRACE
+	qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     // Check all script dependencies for errors
     for (int ii = 0; !isError() && ii < m_scripts.count(); ++ii) {
         const ScriptReference &script = m_scripts.at(ii);
@@ -2351,6 +2373,10 @@
 {
     Q_ASSERT(m_compiledData == 0);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 1, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
+
     m_compiledData = new QQmlCompiledData(typeLoader()->engine());
 
     QQmlCompilingProfiler prof(QQmlEnginePrivate::get(typeLoader()->engine())->profiler, finalUrlString());
@@ -2361,6 +2387,10 @@
         m_compiledData->release();
         m_compiledData = 0;
     }
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 0, qPrintable(url().toString()));
+#endif // ENABLE_SA_TRACE
 }
 
 void QQmlTypeData::resolveTypes()
Index: qtdeclarative-opensource-src-5.4.0/src/quick/items/qquickwindow.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/quick/items/qquickwindow.cpp	2014-12-05 09:25:12.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/quick/items/qquickwindow.cpp	2014-12-30 14:14:08.412510682 -0700
@@ -69,6 +69,11 @@
 
 #include <private/qopenglvertexarrayobject_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 Q_LOGGING_CATEGORY(DBG_TOUCH, "qt.quick.touch");
@@ -1334,6 +1339,11 @@
 {
     Q_D(QQuickWindow);
 
+#ifdef ENABLE_SA_TRACE
+    if (e)
+        qt_tracepoint(Qt, qtGraphicsSceneEvents, e->type());
+#endif // ENABLE_SA_TRACE
+
     switch (e->type()) {
 
     case QEvent::TouchBegin:
@@ -1433,6 +1443,10 @@
             QGuiApplication::sendEvent(focusWindow, e);
     }
 #endif
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtKeyEventConsumed, e->type(), e->key(), e->modifiers());
+#endif // ENABLE_SA_TRACE
 }
 
 QMouseEvent *QQuickWindowPrivate::cloneMouseEvent(QMouseEvent *event, QPointF *transformedLocalPos)
@@ -1501,6 +1515,11 @@
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
         return event->isAccepted();
     }
 
@@ -1510,10 +1529,19 @@
         me->accept();
         q->sendEvent(mouseGrabberItem, me.data());
         event->setAccepted(me->isAccepted());
-        if (me->isAccepted())
+        if (me->isAccepted()) {
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtMouseEventConsumed, me->buttons());
+#endif // ENABLE_SA_TRACE
+
             return true;
+        }
     }
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
+
     return false;
 }
 
@@ -1545,6 +1573,10 @@
 
     if (!d->mouseGrabberItem) {
         QWindow::mouseReleaseEvent(event);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1570,6 +1602,10 @@
             event->accept();
         else
             event->ignore();
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
@@ -1621,6 +1657,10 @@
             accepted = d->clearHover();
         }
         event->setAccepted(accepted);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtMouseEventConsumed, event->buttons());
+#endif // ENABLE_SA_TRACE
         return;
     }
 
Index: qtdeclarative-opensource-src-5.4.0/src/quick/quick.pro
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/quick/quick.pro	2014-12-05 09:25:12.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/quick/quick.pro	2014-12-30 14:15:30.684509883 -0700
@@ -30,6 +30,7 @@
 include(scenegraph/scenegraph.pri)
 include(items/items.pri)
 include(designer/designer.pri)
+contains(QT_CONFIG,tracesupport):CONFIG += tracesupport
 contains(QT_CONFIG, accessibility) {
     include(accessible/accessible.pri)
 }
Index: qtdeclarative-opensource-src-5.4.0/src/quick/scenegraph/coreapi/qsgrenderer.cpp
===================================================================
--- qtdeclarative-opensource-src-5.4.0.orig/src/quick/scenegraph/coreapi/qsgrenderer.cpp	2014-12-05 09:25:12.000000000 -0700
+++ qtdeclarative-opensource-src-5.4.0/src/quick/scenegraph/coreapi/qsgrenderer.cpp	2014-12-30 14:15:11.552510180 -0700
@@ -38,6 +38,10 @@
 
 #include <private/qquickprofiler_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 static bool qsg_sanity_check = qgetenv("QSG_SANITY_CHECK").toInt();
@@ -173,6 +177,10 @@
     if (!rootNode())
         return;
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 1);
+#endif // ENABLE_SA_TRACE
+
     m_is_rendering = true;
 
 
@@ -225,6 +233,9 @@
             bindTime - updatePassTime,
             renderTime - bindTime));
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtFrameSync, 0);
+#endif // ENABLE_SA_TRACE
 }
 
 /*!
