Index: qtquick1-opensource-src-5.3.1/src/declarative/declarative.pro
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/declarative.pro	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/declarative.pro	2014-08-28 13:12:22.956250168 +0530
@@ -27,6 +27,7 @@
 include(util/util.pri)
 include(graphicsitems/graphicsitems.pri)
 include(debugger/debugger.pri)
+contains(QT_CONFIG,tracesupport):CONFIG += tracesupport
 
 HEADERS += \
     qtdeclarativeglobal.h \
Index: qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativebinding.cpp
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/qml/qdeclarativebinding.cpp	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativebinding.cpp	2014-08-28 13:21:03.453706628 +0530
@@ -55,6 +55,10 @@
 #include <QVariant>
 #include <QtCore/qdebug.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 QDeclarativeAbstractBinding::QDeclarativeAbstractBinding()
@@ -338,6 +342,10 @@
         return;
 
     if (!d->updating) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
+
         QDeclarativeBindingProfiler prof(this);
         d->updating = true;
         bool wasDeleted = false;
@@ -355,8 +363,13 @@
                                   QMetaObject::WriteProperty,
                                   idx, a);
 
-            if (wasDeleted)
+            if (wasDeleted) {
+#ifdef ENABLE_SA_TRACE
+                qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
+
                 return;
+            }
 
         } else {
             QDeclarativeEnginePrivate *ep = QDeclarativeEnginePrivate::get(d->context()->engine);
@@ -365,8 +378,13 @@
             QVariant value;
 
             QScriptValue scriptValue = d->scriptValue(0, &isUndefined);
-            if (wasDeleted)
+            if (wasDeleted) {
+#ifdef ENABLE_SA_TRACE
+                qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
+
                 return;
+            }
 
             if (d->property.propertyTypeCategory() == QDeclarativeProperty::List) {
                 value = ep->scriptValueToVariant(scriptValue, qMetaTypeId<QList<QObject *> >());
@@ -421,8 +439,13 @@
             } else if (d->property.object() &&
                        !QDeclarativePropertyPrivate::write(d->property, value, flags)) {
 
-                if (wasDeleted)
+                if (wasDeleted) {
+#ifdef ENABLE_SA_TRACE
+                    qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
+
                     return;
+                }
 
                 QUrl url = QUrl(d->url);
                 int line = d->line;
@@ -440,8 +463,12 @@
                                         QLatin1String(QMetaType::typeName(d->property.propertyType())));
             }
 
-            if (wasDeleted)
+            if (wasDeleted) {
+#ifdef ENABLE_SA_TRACE
+                qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
                 return;
+            }
 
             if (d->error.isValid()) {
                if (!d->addError(ep)) ep->warning(this->error());
@@ -452,6 +479,10 @@
 
         d->updating = false;
         d->deleted = 0;
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(d->url));
+#endif // ENABLE_SA_TRACE
     } else {
         qmlInfo(d->property.object()) << tr("Binding loop detected for property \"%1\"").arg(d->property.name());
     }
Index: qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativecompiledbindings.cpp
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/qml/qdeclarativecompiledbindings.cpp	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativecompiledbindings.cpp	2014-08-28 13:24:08.143384765 +0530
@@ -57,6 +57,10 @@
 #include <private/qdeclarativefastproperties_p.h>
 #include <private/qdeclarativedebugtrace_p.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 DEFINE_BOOL_CONFIG_OPTION(qmlExperimental, QML_EXPERIMENTAL);
@@ -379,6 +383,10 @@
     if (!context || !context->isValid()) 
         return;
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameBind, 1, qPrintable(context->url.toString()));
+#endif // ENABLE_SA_TRACE
+
     if (binding->updating) {
         QString name;
         if (binding->property & 0xFFFF0000) {
@@ -394,6 +402,11 @@
             name = QLatin1String(binding->target->metaObject()->property(binding->property).name());
         }
         qmlInfo(binding->target) << QCoreApplication::translate("QDeclarativeCompiledBindings", "Binding loop detected for property \"%1\"").arg(name);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(context->url.toString()));
+#endif // ENABLE_SA_TRACE
+
         return;
     }
 
@@ -413,6 +426,10 @@
         run(binding->index, context, binding, binding->scope, binding->target, flags);
     }
     binding->updating = false;
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameBind, 0, qPrintable(context->url.toString()));
+#endif // ENABLE_SA_TRACE
 }
 
 namespace {
Index: qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativecomponent.cpp
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/qml/qdeclarativecomponent.cpp	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativecomponent.cpp	2014-08-28 13:27:21.020959966 +0530
@@ -62,6 +62,10 @@
 #include <QApplication>
 #include <qdeclarativeinfo.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 class QByteArray;
@@ -850,6 +854,10 @@
     Q_ASSERT((state != 0) ^ (errors != 0)); // One of state or errors (but not both) must be provided
 
     if (isRoot) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(component->url.toString()));
+#endif // ENABLE_SA_TRACE
+
         QDeclarativeDebugTrace::startRange(QDeclarativeDebugTrace::Creating);
         QDeclarativeDebugTrace::rangeData(QDeclarativeDebugTrace::Creating, component->url);
     }
@@ -1044,6 +1052,10 @@
         complete(ep, &state);
 
         QDeclarativeDebugTrace::endRange(QDeclarativeDebugTrace::Creating);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
Index: qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativeengine.cpp
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/qml/qdeclarativeengine.cpp	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativeengine.cpp	2014-08-28 13:29:35.247272512 +0530
@@ -113,6 +113,11 @@
 #define CSIDL_APPDATA		0x001a	// <username>\Application Data
 #endif
 
+#ifdef ENABLE_SA_TRACE
+    #define QT_TRACEPOINT_PER_LIBRARY_DEFINITION
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 Q_DECLARE_METATYPE(QDeclarativeProperty)
 Q_DECLARE_METATYPE(QScriptValue)
 
@@ -1023,6 +1028,9 @@
     QDeclarativeData *data = QDeclarativeData::get(object);
 
     if (data && data->deferredComponent) {
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 1, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
         if (QDeclarativeDebugService::isDebuggingEnabled()) {
             QDeclarativeDebugTrace::startRange(QDeclarativeDebugTrace::Creating);
             QDeclarativeType *type = QDeclarativeMetaType::qmlType(object->metaObject());
@@ -1041,6 +1049,10 @@
 
         QDeclarativeComponentPrivate::complete(ep, &state);
         QDeclarativeDebugTrace::endRange(QDeclarativeDebugTrace::Creating);
+
+#ifdef ENABLE_SA_TRACE
+        qt_tracepoint(Qt, qtQmlFrameCreate, 0, qPrintable(data->outerContext->url.toString()));
+#endif // ENABLE_SA_TRACE
     }
 }
 
Index: qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativetypeloader.cpp
===================================================================
--- qtquick1-opensource-src-5.3.1.orig/src/declarative/qml/qdeclarativetypeloader.cpp	2014-06-19 15:37:54.000000000 +0530
+++ qtquick1-opensource-src-5.3.1/src/declarative/qml/qdeclarativetypeloader.cpp	2014-08-28 13:35:59.166445994 +0530
@@ -53,6 +53,10 @@
 #include <QtCore/qdiriterator.h>
 #include <QtCore/qfile.h>
 
+#ifdef ENABLE_SA_TRACE
+    #include <QtTraceSupport/qt_tracepoints.h>
+#endif // ENABLE_SA_TRACE
+
 QT_BEGIN_NAMESPACE
 
 /*
@@ -528,12 +532,21 @@
 
     QString lf = QDeclarativeEnginePrivate::urlToLocalFileOrQrc(blob->m_url);
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlResourceLoad, 1, qPrintable(blob->finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
+
     if (!lf.isEmpty()) {
         if (!QDeclarative_isFileCaseCorrect(lf)) {
             QDeclarativeError error;
             error.setUrl(blob->m_url);
             error.setDescription(QLatin1String("File name case mismatch"));
             blob->setError(error);
+
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
+
             return;
         }
         QFile file(lf);
@@ -544,6 +557,10 @@
             blob->downloadProgressChanged(1.);
 
             setData(blob, data);
+
+#ifdef ENABLE_SA_TRACE
+            qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
         } else {
             blob->networkError(QNetworkReply::ContentNotFoundError);
         }
@@ -602,6 +619,10 @@
         setData(blob, data);
     }
 
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(blob->finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
+
     blob->release();
 }
 
@@ -922,6 +943,10 @@
 
 void QDeclarativeTypeData::done()
 {
+#ifdef ENABLE_SA_TRACE
+       qt_tracepoint(Qt, qtQmlResourceLoad, 0, qPrintable(finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
+
     addref();
 
     // Check all script dependencies for errors
@@ -1034,6 +1059,11 @@
 void QDeclarativeTypeData::compile()
 {
     Q_ASSERT(m_compiledData == 0);
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 1, qPrintable(finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
+
     QDeclarativeDebugTrace::startRange(QDeclarativeDebugTrace::Compiling);
 
     m_compiledData = new QDeclarativeCompiledData(typeLoader()->engine());
@@ -1046,6 +1076,10 @@
         setError(compiler.errors());
         m_compiledData->release();
         m_compiledData = 0;
+
+#ifdef ENABLE_SA_TRACE
+    qt_tracepoint(Qt, qtQmlFrameCompile, 0, qPrintable(finalUrl().toString()));
+#endif // ENABLE_SA_TRACE
     }
     QDeclarativeDebugTrace::endRange(QDeclarativeDebugTrace::Compiling);
 }
