commit 4ff16c25e2cc48cbe6956e356c38a25ac063a64d
Author: David Smith <dsmith@redhat.com>
Date:   Tue Feb 7 10:11:05 2012 -0600

    tracepoint, vfs, sched: Add exec() tracepoint
    
    Added a minimal exec tracepoint. Exec is an important major event
    in the life of a task, like fork(), clone() or exit(), all of
    which we already trace.
    
    [ We also do scheduling re-balancing during exec() - so it's useful
      from a scheduler instrumentation POV as well. ]
    
    If you want to watch a task start up, when it gets exec'ed is a good place
    to start.  With the addition of this tracepoint, exec's can be monitored
    and better picture of general system activity can be obtained. This
    tracepoint will also enable better process life tracking, allowing you to
    answer questions like "what process keeps starting up binary X?".
    
    This tracepoint can also be useful in ftrace filtering and trigger
    conditions: i.e. starting or stopping filtering when exec is called.
    
    Signed-off-by: David Smith <dsmith@redhat.com>
    Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/4F314D19.7030504@redhat.com
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

Index: git/fs/exec.c
===================================================================
--- git.orig/fs/exec.c	2012-10-17 00:34:10.000000000 -0700
+++ git/fs/exec.c	2012-10-17 01:08:34.703681935 -0700
@@ -61,6 +61,8 @@
 #include <asm/tlb.h>
 #include "internal.h"
 
+#include <trace/events/sched.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 unsigned int core_pipe_limit;
@@ -1353,6 +1355,7 @@
 	unsigned int depth = bprm->recursion_depth;
 	int try,retval;
 	struct linux_binfmt *fmt;
+	pid_t old_pid;
 
 	retval = security_bprm_check(bprm);
 	if (retval)
@@ -1362,6 +1365,9 @@
 	if (retval)
 		return retval;
 
+	/* Need to fetch pid before load_binary changes it */
+	old_pid = current->pid;
+
 	retval = -ENOENT;
 	for (try=0; try<2; try++) {
 		read_lock(&binfmt_lock);
@@ -1380,8 +1386,10 @@
 			 */
 			bprm->recursion_depth = depth;
 			if (retval >= 0) {
-				if (depth == 0)
+				if (depth == 0) {
 					tracehook_report_exec(fmt, bprm, regs);
+					trace_sched_process_exec(current, old_pid, bprm);
+				}
 				put_binfmt(fmt);
 				allow_write_access(bprm->file);
 				if (bprm->file)
Index: git/include/trace/events/sched.h
===================================================================
--- git.orig/include/trace/events/sched.h	2012-10-17 00:34:12.000000000 -0700
+++ git/include/trace/events/sched.h	2012-10-17 00:42:37.220894218 -0700
@@ -6,6 +6,7 @@
 
 #include <linux/sched.h>
 #include <linux/tracepoint.h>
+#include <linux/binfmts.h>
 
 /*
  * Tracepoint for calling kthread_stop, performed to end a kthread:
@@ -275,6 +276,32 @@
 );
 
 /*
+ * Tracepoint for exec:
+ */
+TRACE_EVENT(sched_process_exec,
+
+	TP_PROTO(struct task_struct *p, pid_t old_pid,
+		 struct linux_binprm *bprm),
+
+	TP_ARGS(p, old_pid, bprm),
+
+	TP_STRUCT__entry(
+		__string(	filename,	bprm->filename	)
+		__field(	pid_t,		pid		)
+		__field(	pid_t,		old_pid		)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, bprm->filename);
+		__entry->pid		= p->pid;
+		__entry->old_pid	= p->pid;
+	),
+
+	TP_printk("filename=%s pid=%d old_pid=%d", __get_str(filename),
+		  __entry->pid, __entry->old_pid)
+);
+
+/*
  * XXX the below sched_stat tracepoints only apply to SCHED_OTHER/BATCH/IDLE
  *     adding sched_stat support to SCHED_FIFO/RR would be welcome.
  */
