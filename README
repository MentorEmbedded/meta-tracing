                     Notes on using the meta-tracing layer

This repository contains a Yocto Project layer(tm) which provides a staging
area for various patches that improve support for various Linux tracing
technologies supported by Yocto or Yocto-based distributions.  Work on pushing
these to their appropriate upstream projects is ongoing, but this will current
Yocto users to use this functionality immediately.

This layer is intended to target the following Linux tracing technologies.
* LTTng
* SystemTap

This layer may be used on top of recent git clones of Yocto Project and 
Mentor Embedded Linux.[1]. At this time the layer has only been tested on the
Beagleboard-XM platform.

[1]: http://go.mentor.com/linux

Current Contents:
=================
The layer currently contains the following fixes for Yocto-based
distributions:
* ARM tracehook support for kernel versions 3.0 and 3.2, with a .bbappend file
  targeting the linux-yocto package.
* ARM syscall tracepoint support for kernel versions 3.0 and 3.2, with a
  .bbappend file targeting the linux-yocto package.
* A Kernel configuration fragment to enable Profiling support for kernel
  versions 3.0 and 3.2,  with a .bbappend file targeting the linux-yocto
  package.
* A workaround for a bug in Yocto "denzil" to handle incorrect stripping of
  the uprobes.ko file in the systemtap-uprobes package.

Using this layer with Yocto/Poky:
=================================
Note: The steps provided here are the minimum required to incorporate this
layer into a Yocto build.  Please refer to the Yocto Project for more extensive 
documentation.

1. Clone the poky tree, and checkout the tag that you want to use.  Tested tags
   are denzil and 1.3_M2.final.  Please note that older versions may not work
   due to missing metadata.  Newer versions are untested.

   git clone git://git.yoctoproject.org/poky
   cd poky

   git checkout -b 1.3_M2.final 1.3_M2.final
   OR
   git checkout -b denzil denzil

2. Source the OE configure script:

   . ./oe-init-build-env

3. Modify conf/local.conf for your particular environment.  Uncomment the line
   "#MACHINE ?= "beagleboard". To add systemtap support to your filesystem 
   image, add the following line to the end of the
   file:

   IMAGE_INSTALL_append = " systemtap systemtap-uprobes"

   To add the dropbear SSH server to your image, add the following line as well:

   IMAGE_INSTALL_append = " dropbear"

   Make any other adjustments to the file as necessary for your configuration.

4. In conf/bblayers.conf add the path to this repository in the BBLAYERS
   variable.  E.g.:

   BBLAYERS ?= " \
  /path/to/meta-tracing \
  /path/to/poky/meta \
  /path/to/poky/meta-yocto \
  "
  
5. Build the minimal image

   bitbake core-image-minimal

The resulting images should now contain the patches in the
meta-tracing layer.


Using this layer with Mentor Embedded Linux:
============================================

1. Follow the MEL documentation to configure MEL for the beagleboard, adding
   "-l /path/to/meta-tracing" to the create-config.py command line.
   This option will automatically configure the build to include
   meta-tracing in the bblayers.conf file.

2. For systemtap support, add the following line to conf/local.conf:

   IMAGE_INSTALL_append = " systemtap systemtap-uprobes"

   Note that the MEL devel-image contains openssh as the default SSH server.
   Therefore, it is unnecessary to supply an SSH package here. Make any
   other adjustments to the file as necessary for your configuration.

3. Build the devel image:

   bitbake devel-image

The resulting images should now contain the patches in the
meta-tracing layer.
