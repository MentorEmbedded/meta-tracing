From 8cb41f235cb23c563d03843a9a1b04e537a25b73 Mon Sep 17 00:00:00 2001
From: Sajjad Ahmed <sajjad_ahmed@mentor.com>
Date: Thu, 12 Sep 2019 16:55:59 +0500
Subject: [PATCH 06/11] Added support for gst_flow_event_latency and 
 gst_flow_event_qos LTTng tracepoints

The gst_flow_event_latency tracepoints output the latency field of the GST_EVENT_LATENCY event.
This tracepoint immediately follows the gst_flow_event tracepoint and precedes
the gst_flow tracepoint on the same thread.

The gst_flow_event_qos tracepoints output the proportion and diff fields of the GST_EVENT_QOS event.
This tracepoint immediately follows the gst_flow_event tracepoint and precedes
the gst_flow tracepoint on the same thread.

Signed-off-by: Sajjad Ahmed <sajjad_ahmed@mentor.com>
---
 gst/gst_tracepoints.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 gst/gst_tracepoints.h | 50 +++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 89 insertions(+), 5 deletions(-)

diff --git a/gst/gst_tracepoints.c b/gst/gst_tracepoints.c
index f937b48..d224046 100644
--- a/gst/gst_tracepoints.c
+++ b/gst/gst_tracepoints.c
@@ -30,12 +30,29 @@
 #include "gstpad.h"
 #include "gstelement.h"
 #include "gstbufferlist.h"
+#include "gstevent.h"
 
 enum GstFlowTracepointType;
 static const gchar *gst_tracepoints_get_pad_element_name_if_needed (GstPad *
    pad, enum GstFlowTracepointType tracepoint_type);
 static guint16 gst_tracepoints_get_thread_id (void);
 
+static inline GstClockTime
+gst_tracepoints_extract_event_latency (GstEvent * event)
+{
+  GstClockTime latency = 0;
+  gst_event_parse_latency (event, &latency);
+  return latency;
+}
+
+struct GstFlowTracepointQOSEventData;
+static inline GstClockTime
+gst_tracepoints_extract_qos_event_diff (GstEvent * event,
+    struct GstFlowTracepointQOSEventData *event_data);
+static inline gdouble
+gst_tracepoints_extract_qos_event_proportion (GstEvent * event,
+    struct GstFlowTracepointQOSEventData *event_data);
+
 #define GST_TRACEPOINTS_CREATE_PROBES
 #define TRACEPOINT_CREATE_PROBES
 #define TRACEPOINT_DEFINE
@@ -107,4 +124,31 @@ _priv_gst_tracepoints_trace_buffer_list (GstBufferList * list)
   gst_buffer_list_foreach (list, gst_tracepoints_trace_buffer_list_item, NULL);
 }
 
+static inline void
+gst_tracepoints_extract_qos_event_data (GstEvent * event,
+    struct GstFlowTracepointQOSEventData *event_data)
+{
+  if (!event_data->data_ready) {
+    event_data->data_ready = TRUE;
+    gst_event_parse_qos (event, &event_data->type, &event_data->proportion,
+        &event_data->diff, &event_data->timestamp);
+  }
+}
+
+static inline GstClockTime
+gst_tracepoints_extract_qos_event_diff (GstEvent * event,
+    struct GstFlowTracepointQOSEventData *event_data)
+{
+  gst_tracepoints_extract_qos_event_data (event, event_data);
+  return event_data->diff;
+}
+
+static inline gdouble
+gst_tracepoints_extract_qos_event_proportion (GstEvent * event,
+    struct GstFlowTracepointQOSEventData *event_data)
+{
+  gst_tracepoints_extract_qos_event_data (event, event_data);
+  return event_data->proportion;
+}
+
 #endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gst_tracepoints.h b/gst/gst_tracepoints.h
index 15d85f5..b304cf0 100644
--- a/gst/gst_tracepoints.h
+++ b/gst/gst_tracepoints.h
@@ -25,6 +25,7 @@
 #include "gstpad.h"
 #include "gstghostpad.h"
 #include "gstbufferlist.h"
+#include "gstevent.h"
 
 extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad);
 extern void _priv_gst_tracepoints_trace_buffer_list (GstBufferList *list);
@@ -47,6 +48,14 @@ typedef enum GstFlowTracepointDataType {
   GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST = 1,
 } GstFlowTracepointDataType;
 
+typedef struct GstFlowTracepointQOSEventData {
+    GstQOSType type;
+    gdouble proportion;
+    GstClockTimeDiff diff;
+    GstClockTime timestamp;
+    gboolean data_ready;
+} GstFlowTracepointQOSEventData;
+
 #define GST_TRACEPOINT_HELPER2(...) __VA_ARGS__
 #define GST_TRACEPOINT_HELPER(...) GST_TRACEPOINT_HELPER2 (__VA_ARGS__)
 #define GST_TRACEPOINT_EVENT(name, args, fields) \
@@ -60,6 +69,7 @@ typedef enum GstFlowTracepointDataType {
 #define ctf_gst_tracepoint_kind_field(name, kind) ctf_integer (guint8, name, (guint8) (kind))
 #define ctf_gst_data_type_field(name, type) ctf_integer (guint8, name, (guint8) (type))
 #define ctf_gst_event_type_field(name, event) ctf_integer (gint, name, (gint) (event->type))
+#define ctf_gst_time_field(name, value) ctf_integer (guint64, name, (guint64) (value))
 
 #endif /* _GST_TRACEPOINTS_H */
 
@@ -98,10 +108,20 @@ GST_TRACEPOINT_EVENT (gst_flow_data,
                                  ctf_gst_data_type_field (data_type, ((trace_is_on ? (*trace_is_on = 1) : 0), data_type))))
 
 GST_TRACEPOINT_EVENT (gst_flow_event,
+                      TP_ARGS (GstEvent *, event, int *, trace_is_on),
+                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_event_type_field (event_type, ((trace_is_on ? (*trace_is_on = 1) : 0), event))))
+
+GST_TRACEPOINT_EVENT (gst_flow_event_latency,
                       TP_ARGS (GstEvent *, event),
-                      TP_FIELDS (ctf_gst_data_field (event, event)
-                                 ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_event_type_field (event_type, event)))
+                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_time_field (latency, gst_tracepoints_extract_event_latency (event))))
+
+GST_TRACEPOINT_EVENT (gst_flow_event_qos,
+                      TP_ARGS (GstEvent *, event, GstFlowTracepointQOSEventData *, event_data),
+                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_time_field (diff, gst_tracepoints_extract_qos_event_diff (event, event_data))
+                                 ctf_float (gdouble, proportion, gst_tracepoints_extract_qos_event_proportion (event, event_data))))
 
 #endif /* _GST_TRACEPOINTS_H */
 
@@ -146,8 +166,28 @@ GST_TRACEPOINT_EVENT (gst_flow_event,
 #define GST_FLOW_TRACEPOINT_BUFFER(buffer) \
   GST_TRACEPOINT (gst_flow_data, buffer, GST_TRACEPOINT_DATA_TYPE_BUFFER, NULL)
 
-#define GST_FLOW_TRACEPOINT_EVENT(event) \
-  GST_TRACEPOINT (gst_flow_event, event)
+#define GST_FLOW_TRACEPOINT_EVENT(event)                                \
+    do {                                                                \
+        int trace_is_on = 0;                                            \
+        GST_TRACEPOINT (gst_flow_event, event, &trace_is_on);           \
+        if (trace_is_on) {                                              \
+            switch(event->type) {                                       \
+            case GST_EVENT_LATENCY:                                     \
+                GST_TRACEPOINT (gst_flow_event_latency, event);         \
+                break;                                                  \
+            case GST_EVENT_QOS:                                         \
+                {                                                       \
+                    GstFlowTracepointQOSEventData event_data;           \
+                    event_data.data_ready = FALSE;                      \
+                    GST_TRACEPOINT (gst_flow_event_qos, event, &event_data); \
+                }                                                       \
+                break;                                                  \
+            default:                                                    \
+                break;                                                  \
+            }                                                           \
+        }                                                               \
+    } while (0)
+
 
 #define GST_FLOW_TRACEPOINT_DATA(data, is_buffer)                       \
     do {                                                                \
-- 
2.7.4

