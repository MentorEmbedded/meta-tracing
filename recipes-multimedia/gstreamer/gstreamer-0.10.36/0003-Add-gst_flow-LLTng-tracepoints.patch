From 118c4d2be7bce9886335a8c46f22425459258cbc Mon Sep 17 00:00:00 2001
From: Alexander Barabash <alexander_barabash@mentor.com>
Date: Mon, 20 May 2013 01:11:57 +0300
Subject: [PATCH 3/6] Add gst_flow LLTng tracepoints.

The gst_flow tracepoints trace the flow of data through the gstreamer pipeline.
They can be used to observe latency of the pipeline and its elements.

The following APIs are traced at entry and exit points:

1. Push APIs:
    gst_pad_chain()
    gst_pad_chain_list()
    gst_pad_push()
    gst_pad_push_list()

2. Pull APIs:
    gst_pad_get_range()
    gst_pad_pull_range()

3. Event APIs:
   gst_pad_push_event()
   gst_pad_send_event()

Additionally, the following internal functions are traced:
   gst_pad_push_data()
   gst_pad_chain_data_unchecked()
   gst_pad_get_range_unchecked()

The data stored for each tracepoint:

    -- a unique integer ID of the invoking thread;
    -- the value of the pointer to the pad.

Additionally, at each entry point, the name of the element containing the pad is traced.
For ghost/proxy pads, the name of the element containing the pad's target is traced instead.

At entry points of push and event APIs, and at successful exit points if pull APIs,
the value of the pointer to the data is traced.

At exit points, the call result is traced.

Signed-off-by: Alexander Barabash <alexander_barabash@mentor.com>
---
 gst/gst_tracepoints.c         |   57 +++++++++++++++++++++++++
 gst/gst_tracepoints.h         |   92 +++++++++++++++++++++++++++++++++++++++--
 gst/gstghostpad.c             |    2 +
 gst/gstghostpad_tracepoints.h |   29 +++++++++++++
 gst/gstpad.c                  |   50 ++++++++++++++++++++++
 5 files changed, 227 insertions(+), 3 deletions(-)
 create mode 100644 gst/gstghostpad_tracepoints.h

diff --git a/gst/gst_tracepoints.c b/gst/gst_tracepoints.c
index 326472a..d728acf 100644
--- a/gst/gst_tracepoints.c
+++ b/gst/gst_tracepoints.c
@@ -26,10 +26,67 @@
 #include "config.h"
 
 #ifdef GST_ENABLE_LTTNG_TRACEPOINTS
+#include "glib.h"
+#include "gstpad.h"
+#include "gstelement.h"
+
+enum GstFlowTracepointType;
+static const gchar *gst_tracepoints_get_pad_element_name_if_needed (GstPad *
+    pad, enum GstFlowTracepointType tracepoint_type);
+static guint16 gst_tracepoints_get_thread_id (void);
 
 #define GST_TRACEPOINTS_CREATE_PROBES
 #define TRACEPOINT_CREATE_PROBES
 #define TRACEPOINT_DEFINE
 #include "gst_tracepoints.h"
 
+static const gchar *
+gst_tracepoints_get_pad_element_name (GstPad * pad)
+{
+  const gchar *name = "";
+
+  if (pad != NULL) {
+    if (GST_IS_GHOST_PAD (pad)) {
+      name =
+          gst_tracepoints_get_pad_element_name (_priv_gst_ghostpad_get_target
+          (GST_GHOST_PAD (pad)));
+    } else if (GST_IS_PROXY_PAD (pad)) {
+      name =
+          gst_tracepoints_get_pad_element_name (GST_PAD_PEER (GST_PROXY_PAD
+              (pad)));
+    } else if (GST_PAD_PARENT (pad)) {
+      name = GST_ELEMENT_NAME (GST_PAD_PARENT (pad));
+    }
+  }
+
+  return name;
+}
+
+static const gchar *
+gst_tracepoints_get_pad_element_name_if_needed (GstPad * pad,
+    enum GstFlowTracepointType tracepoint_type)
+{
+  if (tracepoint_type == GST_TRACEPOINT_FLAG_ENTER) {
+    return gst_tracepoints_get_pad_element_name (pad);
+  } else {
+    return "";
+  }
+}
+
+static guint16
+gst_tracepoints_get_thread_id (void)
+{
+  static gint thread_counter;
+  static GPrivate key;
+  gintptr thread_id = (gintptr) g_private_get (&key);
+  if (G_UNLIKELY (thread_id == 0)) {
+    do {
+      thread_id = g_atomic_int_add (&thread_counter, 1) + 1;
+      thread_id = thread_id & 0xFFFF;   /* Leave 16 bits. */
+    } while (thread_id == 0);
+    g_private_set (&key, (gpointer) thread_id);
+  }
+  return thread_id;
+}
+
 #endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gst_tracepoints.h b/gst/gst_tracepoints.h
index 579acf5..0d33653 100644
--- a/gst/gst_tracepoints.h
+++ b/gst/gst_tracepoints.h
@@ -22,11 +22,37 @@
 
 #ifndef _GST_TRACEPOINTS_H
 
+#include "gstpad.h"
+#include "gstghostpad.h"
+#include "gstbufferlist.h"
+
+extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad);
+
+enum GstFlowTracepointType {
+  GST_TRACEPOINT_FLAG_ENTER = 0,
+  GST_TRACEPOINT_FLAG_EXIT = 1,
+  GST_TRACEPOINT_FLAG_ERROR = 2,
+  GST_TRACEPOINT_FLAG_DROPPED = 3,
+};
+
+enum GstFlowTracepointKind {
+  GST_TRACEPOINT_FLAG_PUSH = 0,
+  GST_TRACEPOINT_FLAG_PULL = 1,
+  GST_TRACEPOINT_FLAG_SEND_EVENT = 2,
+};
+
 #define GST_TRACEPOINT_HELPER2(...) __VA_ARGS__
 #define GST_TRACEPOINT_HELPER(...) GST_TRACEPOINT_HELPER2 (__VA_ARGS__)
 #define GST_TRACEPOINT_EVENT(name, args, fields) \
     TRACEPOINT_EVENT (TRACEPOINT_PROVIDER, name, GST_TRACEPOINT_HELPER (args), GST_TRACEPOINT_HELPER (fields))
 
+#define ctf_gst_pad_field(name, ptr) ctf_integer_hex (gintptr, name, (gintptr) (ptr))
+#define ctf_gst_data_field(name, ptr) ctf_integer_hex (gintptr, name, (gintptr) (ptr))
+#define ctf_gst_flow_return_field(name, value) ctf_integer_hex (gint, name, (gint) (value))
+#define ctf_gst_thread_id_field(name) ctf_integer (guint16, name, gst_tracepoints_get_thread_id ())
+#define ctf_gst_tracepoint_type_field(name, type) ctf_integer (guint8, name, (guint8) (type))
+#define ctf_gst_tracepoint_kind_field(name, kind) ctf_integer (guint8, name, (guint8) (kind))
+
 #endif /* _GST_TRACEPOINTS_H */
 
 #ifdef GST_ENABLE_LTTNG_TRACEPOINTS
@@ -42,18 +68,78 @@
 
 #include <lttng/tracepoint.h>
 
-GST_TRACEPOINT_EVENT (gst_sample_event,
-                      TP_ARGS (int, event_argument),
-                      TP_FIELDS (ctf_integer(int, event_argument, event_argument)))
+GST_TRACEPOINT_EVENT (gst_flow,
+                      TP_ARGS (GstPad *, pad,
+                               void *, data,
+                               GstFlowReturn, result,
+                               enum GstFlowTracepointKind, tracepoint_kind,
+                               enum GstFlowTracepointType, tracepoint_type),
+                      TP_FIELDS (ctf_gst_pad_field (pad, pad)
+                                 ctf_gst_data_field (data, data)
+                                 ctf_gst_flow_return_field (flow_return, result)
+                                 ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_tracepoint_type_field (tracepoint_type, tracepoint_type)
+                                 ctf_gst_tracepoint_kind_field (tracepoint_kind, tracepoint_kind)
+                                 ctf_string (element_name,
+                                             gst_tracepoints_get_pad_element_name_if_needed (pad, tracepoint_type))))
 
 #endif /* _GST_TRACEPOINTS_H */
 
 #include <lttng/tracepoint-event.h>
 
+#define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data) \
+    GST_TRACEPOINT (gst_flow, pad, data, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_PUSH_EXIT(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_PUSH_ERROR(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_PUSH_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_DROPPED)
+
+#define GST_FLOW_TRACEPOINT_PULL_ENTER(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_PULL_EXIT(pad, data, ret) \
+    GST_TRACEPOINT (gst_flow, pad, data, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_PULL_ERROR(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_PULL_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_DROPPED)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER(pad, event)                \
+    GST_TRACEPOINT (gst_flow, pad, event, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret) \
+  GST_TRACEPOINT (gst_flow, pad, NULL, (ret) ? GST_FLOW_OK : GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_DROPPED)
+
 #define GST_TRACEPOINT(...) tracepoint (Gst, __VA_ARGS__)
 
 #else /* !GST_ENABLE_LTTNG_TRACEPOINTS */
 
+#define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data)
+#define GST_FLOW_TRACEPOINT_PUSH_EXIT(pad, ret)
+#define GST_FLOW_TRACEPOINT_PUSH_ERROR(pad, ret)
+#define GST_FLOW_TRACEPOINT_PUSH_DROPPED(pad)
+#define GST_FLOW_TRACEPOINT_PULL_ENTER(pad)
+#define GST_FLOW_TRACEPOINT_PULL_EXIT(pad, data, ret)
+#define GST_FLOW_TRACEPOINT_PULL_ERROR(pad, ret)
+#define GST_FLOW_TRACEPOINT_PULL_DROPPED(pad)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER(pad, event)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad)
+
 #define GST_TRACEPOINT(...)
 
 #endif /* !GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gstghostpad.c b/gst/gstghostpad.c
index 4233dc6..c8c8135 100644
--- a/gst/gstghostpad.c
+++ b/gst/gstghostpad.c
@@ -1388,3 +1388,5 @@ link_failed:
     return FALSE;
   }
 }
+
+#include "gstghostpad_tracepoints.h"
diff --git a/gst/gstghostpad_tracepoints.h b/gst/gstghostpad_tracepoints.h
new file mode 100644
index 0000000..bfff83a
--- /dev/null
+++ b/gst/gstghostpad_tracepoints.h
@@ -0,0 +1,29 @@
+/* -*- mode: c++; c-basic-offset: 2; -*- */
+/* GStreamer
+ * Copyright (C) 2013 Mentor Graphics, Inc.
+ *
+ * gstghostpad_tracepoints.h: Support for tracing events on GstGhostPads.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include "gst_tracepoints.h"
+
+#ifdef GST_ENABLE_LTTNG_TRACEPOINTS
+GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad) {
+  return GST_PROXY_PAD_TARGET (gpad);
+}
+#endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gstpad.c b/gst/gstpad.c
index f2547c5..7afb46a 100644
--- a/gst/gstpad.c
+++ b/gst/gstpad.c
@@ -74,6 +74,7 @@
 #include "gsterror.h"
 #include "gstvalue.h"
 #include "glib-compat-private.h"
+#include "gst_tracepoints.h"
 
 GST_DEBUG_CATEGORY_STATIC (debug_dataflow);
 #define GST_CAT_DEFAULT GST_CAT_PADS
@@ -4223,6 +4224,7 @@ gst_pad_chain_data_unchecked (GstPad * pad, gboolean is_buffer, void *data,
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4295,6 +4297,8 @@ gst_pad_chain_data_unchecked (GstPad * pad, gboolean is_buffer, void *data,
         GST_DEBUG_FUNCPTR_NAME (chainlistfunc), gst_flow_get_name (ret));
   }
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
+
   GST_PAD_STREAM_UNLOCK (pad);
 
   return ret;
@@ -4331,12 +4335,15 @@ chain_groups:
     gst_buffer_list_iterator_free (it);
     gst_buffer_list_unref (list);
 
+    GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
+
     return ret;
   }
 
   /* ERRORS */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_WRONG_STATE);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but pad was flushing");
@@ -4346,6 +4353,7 @@ flushing:
   }
 dropping:
   {
+    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "Dropping buffer due to FALSE probe return");
     GST_PAD_STREAM_UNLOCK (pad);
@@ -4353,6 +4361,7 @@ dropping:
   }
 not_negotiated:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing data but pad did not accept");
@@ -4361,6 +4370,7 @@ not_negotiated:
   }
 no_function:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but not chainhandler");
@@ -4459,6 +4469,8 @@ gst_pad_push_data (GstPad * pad, gboolean is_buffer, void *data,
 
   GST_OBJECT_LOCK (pad);
 
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
+
   /* FIXME: this check can go away; pad_set_blocked could be implemented with
    * probes completely or probes with an extended pad block. */
   while (G_UNLIKELY (GST_PAD_IS_BLOCKED (pad)))
@@ -4512,6 +4524,8 @@ gst_pad_push_data (GstPad * pad, gboolean is_buffer, void *data,
 
   gst_object_unref (peer);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
+
   return ret;
 
 push_groups:
@@ -4544,12 +4558,15 @@ push_groups:
     gst_buffer_list_iterator_free (it);
     gst_buffer_list_unref (list);
 
+    GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
+
     return ret;
   }
 
   /* ERROR recovery here */
 flushed:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "pad block stopped by flush");
     GST_OBJECT_UNLOCK (pad);
@@ -4557,12 +4574,14 @@ flushed:
   }
 dropped:
   {
+    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "Dropping buffer due to FALSE probe return");
     return GST_FLOW_OK;
   }
 not_linked:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_LINKED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but it was not linked");
@@ -4571,6 +4590,7 @@ not_linked:
   }
 not_negotiated:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_DEBUG_OBJECT (GST_CAT_SCHEDULING, pad,
         "element pushed data then refused to accept the caps");
@@ -4712,8 +4732,12 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
       "calling chainfunction &%s with buffer %" GST_PTR_FORMAT,
       GST_DEBUG_FUNCPTR_NAME (GST_PAD_CHAINFUNC (peer)), buffer);
 
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, buffer);
+
   ret = GST_PAD_CHAINFUNC (peer) (peer, buffer);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
+
   GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
       "called chainfunction &%s with buffer %p, returned %s",
       GST_DEBUG_FUNCPTR_NAME (GST_PAD_CHAINFUNC (peer)), buffer,
@@ -4829,8 +4853,12 @@ gst_pad_push_list (GstPad * pad, GstBufferList * list)
   if (G_UNLIKELY (g_atomic_pointer_get (cache_ptr) == PAD_CACHE_INVALID))
     goto invalid;
 
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, list);
+
   ret = GST_PAD_CHAINLISTFUNC (peer) (peer, list);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
+
   GST_PAD_STREAM_UNLOCK (peer);
 
   pad_put_cache (pad, cache, cache_ptr);
@@ -4950,6 +4978,7 @@ gst_pad_get_range_unchecked (GstPad * pad, guint64 offset, guint size,
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4990,11 +5019,13 @@ gst_pad_get_range_unchecked (GstPad * pad, guint64 offset, guint size,
     if (G_UNLIKELY (!gst_pad_configure_src (pad, caps, TRUE)))
       goto not_negotiated;
   }
+  GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
   return ret;
 
   /* ERRORS */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_WRONG_STATE);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pulling range, but pad was flushing");
     GST_OBJECT_UNLOCK (pad);
@@ -5003,6 +5034,7 @@ flushing:
   }
 no_function:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     GST_ELEMENT_ERROR (GST_PAD_PARENT (pad), CORE, PAD, (NULL),
         ("pullrange on pad %s:%s but it has no getrangefunction",
             GST_DEBUG_PAD_NAME (pad)));
@@ -5011,6 +5043,7 @@ no_function:
   }
 dropping:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_UNEXPECTED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "Dropping data after FALSE probe return");
     GST_PAD_STREAM_UNLOCK (pad);
@@ -5020,6 +5053,7 @@ dropping:
   }
 get_range_failed:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     *buffer = NULL;
     GST_CAT_LEVEL_LOG (GST_CAT_SCHEDULING,
         (ret >= GST_FLOW_UNEXPECTED) ? GST_LEVEL_INFO : GST_LEVEL_WARNING,
@@ -5028,6 +5062,7 @@ get_range_failed:
   }
 not_negotiated:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_buffer_unref (*buffer);
     *buffer = NULL;
     GST_CAT_WARNING_OBJECT (GST_CAT_SCHEDULING, pad,
@@ -5115,6 +5150,8 @@ gst_pad_pull_range (GstPad * pad, guint64 offset, guint size,
 
   GST_OBJECT_LOCK (pad);
 
+  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
+
   while (G_UNLIKELY (GST_PAD_IS_BLOCKED (pad)))
     handle_pad_block (pad);
 
@@ -5154,11 +5191,13 @@ gst_pad_pull_range (GstPad * pad, guint64 offset, guint size,
     if (G_UNLIKELY (!gst_pad_configure_sink (pad, caps)))
       goto not_negotiated;
   }
+  GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
   return ret;
 
   /* ERROR recovery here */
 not_connected:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_LINKED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pulling range, but it was not linked");
     GST_OBJECT_UNLOCK (pad);
@@ -5166,6 +5205,7 @@ not_connected:
   }
 pull_range_failed:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     *buffer = NULL;
     GST_CAT_LEVEL_LOG (GST_CAT_SCHEDULING,
         (ret >= GST_FLOW_UNEXPECTED) ? GST_LEVEL_INFO : GST_LEVEL_WARNING,
@@ -5174,6 +5214,7 @@ pull_range_failed:
   }
 dropping:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_UNEXPECTED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "Dropping data after FALSE probe return");
     gst_buffer_unref (*buffer);
@@ -5182,6 +5223,7 @@ dropping:
   }
 not_negotiated:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_buffer_unref (*buffer);
     *buffer = NULL;
     GST_CAT_WARNING_OBJECT (GST_CAT_SCHEDULING, pad,
@@ -5358,6 +5400,7 @@ gst_pad_send_event (GstPad * pad, GstEvent * event)
   g_return_val_if_fail (event != NULL, FALSE);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER (pad, event);
   if (GST_PAD_IS_SINK (pad)) {
     if (G_UNLIKELY (!GST_EVENT_IS_DOWNSTREAM (event)))
       goto wrong_direction;
@@ -5441,11 +5484,14 @@ gst_pad_send_event (GstPad * pad, GstEvent * event)
 
   GST_DEBUG_OBJECT (pad, "sent event, result %d", result);
 
+  GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT (pad, result);
+
   return result;
 
   /* ERROR handling */
 wrong_direction:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s sending %s event in wrong direction",
         GST_DEBUG_PAD_NAME (pad), GST_EVENT_TYPE_NAME (event));
     GST_OBJECT_UNLOCK (pad);
@@ -5454,6 +5500,7 @@ wrong_direction:
   }
 unknown_direction:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s has invalid direction", GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
     gst_event_unref (event);
@@ -5461,6 +5508,7 @@ unknown_direction:
   }
 no_function:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s has no event handler, file a bug.",
         GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
@@ -5471,6 +5519,7 @@ no_function:
   }
 flushing:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
       GST_PAD_STREAM_UNLOCK (pad);
@@ -5481,6 +5530,7 @@ flushing:
   }
 dropping:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED (pad);
     GST_DEBUG_OBJECT (pad, "Dropping event after FALSE probe return");
     gst_event_unref (event);
     return FALSE;
-- 
1.7.9.5

