From 2bf8bcafb70461b441ca077d1e56e47cb05c73e6 Mon Sep 17 00:00:00 2001
From: JP Ikaheimonen <jp_ikaheimonen@mentor.com>
Date: Fri, 28 Feb 2014 10:04:44 +0200
Subject: [PATCH 7/8] Tracepoint modifications for gstpad.c

1) Added declaration macros (GST_FLOW_TRACEPOINT_PUSH_DECLARATION)
   These are used to declaring function-local variables that are
   later used in the expansions of some of the trace macros.
2) Moved the locations of the trace macros in the code so that
   they are not called while the pad lock is held. This makes it
   possible to call GST functions from within the macro expansions.
---
 gst/gstpad.c | 76 +++++++++++++++++++++++++++++-------------------------------
 1 file changed, 37 insertions(+), 39 deletions(-)

diff --git a/gst/gstpad.c b/gst/gstpad.c
index f292d82..a24a140 100644
--- a/gst/gstpad.c
+++ b/gst/gstpad.c
@@ -4220,12 +4220,13 @@ gst_pad_chain_data_unchecked (GstPad * pad, gboolean is_buffer, void *data,
   gboolean caps_changed;
   GstFlowReturn ret;
   gboolean emit_signal;
+  GST_FLOW_TRACEPOINT_PUSH_DECLARATION ();
 
-  GST_PAD_STREAM_LOCK (pad);
-
-  GST_OBJECT_LOCK (pad);
   GST_FLOW_TRACEPOINT_DATA (data, is_buffer);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
+
+  GST_PAD_STREAM_LOCK (pad);
+  GST_OBJECT_LOCK (pad);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4297,11 +4298,8 @@ gst_pad_chain_data_unchecked (GstPad * pad, gboolean is_buffer, void *data,
         "called chainlistfunction &%s, returned %s",
         GST_DEBUG_FUNCPTR_NAME (chainlistfunc), gst_flow_get_name (ret));
   }
-
-  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
-
   GST_PAD_STREAM_UNLOCK (pad);
-
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
   return ret;
 
 chain_groups:
@@ -4344,34 +4342,33 @@ chain_groups:
   /* ERRORS */
 flushing:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_WRONG_STATE);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but pad was flushing");
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_WRONG_STATE);
     return GST_FLOW_WRONG_STATE;
   }
 dropping:
   {
-    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "Dropping buffer due to FALSE probe return");
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     return GST_FLOW_OK;
   }
 not_negotiated:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing data but pad did not accept");
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     return GST_FLOW_NOT_NEGOTIATED;
   }
 no_function:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but not chainhandler");
@@ -4379,6 +4376,7 @@ no_function:
         ("push on pad %s:%s but it has no chainfunction",
             GST_DEBUG_PAD_NAME (pad)));
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     return GST_FLOW_NOT_SUPPORTED;
   }
 }
@@ -4467,12 +4465,12 @@ gst_pad_push_data (GstPad * pad, gboolean is_buffer, void *data,
   GstFlowReturn ret;
   GstCaps *caps;
   gboolean caps_changed;
-
-  GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PUSH_DECLARATION ();
 
   GST_FLOW_TRACEPOINT_DATA (data, is_buffer);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
 
+  GST_OBJECT_LOCK (pad);
   /* FIXME: this check can go away; pad_set_blocked could be implemented with
    * probes completely or probes with an extended pad block. */
   while (G_UNLIKELY (GST_PAD_IS_BLOCKED (pad)))
@@ -4568,34 +4566,34 @@ push_groups:
   /* ERROR recovery here */
 flushed:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "pad block stopped by flush");
     GST_OBJECT_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
     return ret;
   }
 dropped:
   {
-    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     gst_pad_data_unref (is_buffer, data);
     GST_DEBUG_OBJECT (pad, "Dropping buffer due to FALSE probe return");
+    GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
     return GST_FLOW_OK;
   }
 not_linked:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_LINKED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but it was not linked");
     GST_OBJECT_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_LINKED);
     return GST_FLOW_NOT_LINKED;
   }
 not_negotiated:
   {
-    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     gst_pad_data_unref (is_buffer, data);
     GST_CAT_DEBUG_OBJECT (GST_CAT_SCHEDULING, pad,
         "element pushed data then refused to accept the caps");
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_NEGOTIATED);
     return GST_FLOW_NOT_NEGOTIATED;
   }
 }
@@ -4705,6 +4703,7 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
   gpointer *cache_ptr;
   GstPad *peer;
   GstCaps *caps;
+  GST_FLOW_TRACEPOINT_PUSH_DECLARATION ();
 
   g_return_val_if_fail (GST_IS_PAD (pad), GST_FLOW_ERROR);
   g_return_val_if_fail (GST_PAD_IS_SRC (pad), GST_FLOW_ERROR);
@@ -4726,6 +4725,9 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
 
   peer = cache->peer;
 
+  GST_FLOW_TRACEPOINT_BUFFER (buffer);
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, buffer);
+
   GST_PAD_STREAM_LOCK (peer);
   if (G_UNLIKELY (g_atomic_pointer_get (cache_ptr) == PAD_CACHE_INVALID))
     goto invalid;
@@ -4734,13 +4736,8 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
       "calling chainfunction &%s with buffer %" GST_PTR_FORMAT,
       GST_DEBUG_FUNCPTR_NAME (GST_PAD_CHAINFUNC (peer)), buffer);
 
-  GST_FLOW_TRACEPOINT_BUFFER (buffer);
-  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, buffer);
-
   ret = GST_PAD_CHAINFUNC (peer) (peer, buffer);
 
-  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
-
   GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
       "called chainfunction &%s with buffer %p, returned %s",
       GST_DEBUG_FUNCPTR_NAME (GST_PAD_CHAINFUNC (peer)), buffer,
@@ -4748,6 +4745,7 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
 
   GST_PAD_STREAM_UNLOCK (peer);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
   pad_put_cache (pad, cache, cache_ptr);
 
   return ret;
@@ -4827,6 +4825,7 @@ gst_pad_push_list (GstPad * pad, GstBufferList * list)
   gpointer *cache_ptr;
   GstPad *peer;
   GstCaps *caps;
+  GST_FLOW_TRACEPOINT_PUSH_DECLARATION ();
 
   g_return_val_if_fail (GST_IS_PAD (pad), GST_FLOW_ERROR);
   g_return_val_if_fail (GST_PAD_IS_SRC (pad), GST_FLOW_ERROR);
@@ -4852,19 +4851,19 @@ gst_pad_push_list (GstPad * pad, GstBufferList * list)
 
   peer = cache->peer;
 
+  GST_FLOW_TRACEPOINT_BUFFER_LIST (list);
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, list);
+
   GST_PAD_STREAM_LOCK (peer);
   if (G_UNLIKELY (g_atomic_pointer_get (cache_ptr) == PAD_CACHE_INVALID))
     goto invalid;
 
-  GST_FLOW_TRACEPOINT_BUFFER_LIST (list);
-  GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, list);
-
   ret = GST_PAD_CHAINLISTFUNC (peer) (peer, list);
 
-  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
-
   GST_PAD_STREAM_UNLOCK (peer);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (peer, ret);
+
   pad_put_cache (pad, cache, cache_ptr);
 
   return ret;
@@ -4979,10 +4978,10 @@ gst_pad_get_range_unchecked (GstPad * pad, guint64 offset, guint size,
   GstCaps *caps;
   gboolean caps_changed;
 
+  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
-  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -5030,29 +5029,29 @@ gst_pad_get_range_unchecked (GstPad * pad, guint64 offset, guint size,
   /* ERRORS */
 flushing:
   {
-    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_WRONG_STATE);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pulling range, but pad was flushing");
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_WRONG_STATE);
     return GST_FLOW_WRONG_STATE;
   }
 no_function:
   {
-    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     GST_ELEMENT_ERROR (GST_PAD_PARENT (pad), CORE, PAD, (NULL),
         ("pullrange on pad %s:%s but it has no getrangefunction",
             GST_DEBUG_PAD_NAME (pad)));
     GST_PAD_STREAM_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     return GST_FLOW_NOT_SUPPORTED;
   }
 dropping:
   {
-    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_UNEXPECTED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "Dropping data after FALSE probe return");
     GST_PAD_STREAM_UNLOCK (pad);
     gst_buffer_unref (*buffer);
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_UNEXPECTED);
     *buffer = NULL;
     return GST_FLOW_UNEXPECTED;
   }
@@ -5153,9 +5152,8 @@ gst_pad_pull_range (GstPad * pad, guint64 offset, guint size,
   g_return_val_if_fail (GST_PAD_IS_SINK (pad), GST_FLOW_ERROR);
   g_return_val_if_fail (buffer != NULL, GST_FLOW_ERROR);
 
-  GST_OBJECT_LOCK (pad);
-
   GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
+  GST_OBJECT_LOCK (pad);
 
   while (G_UNLIKELY (GST_PAD_IS_BLOCKED (pad)))
     handle_pad_block (pad);
@@ -5203,10 +5201,10 @@ gst_pad_pull_range (GstPad * pad, guint64 offset, guint size,
   /* ERROR recovery here */
 not_connected:
   {
-    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_LINKED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pulling range, but it was not linked");
     GST_OBJECT_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_LINKED);
     return GST_FLOW_NOT_LINKED;
   }
 pull_range_failed:
@@ -5405,9 +5403,9 @@ gst_pad_send_event (GstPad * pad, GstEvent * event)
   g_return_val_if_fail (GST_IS_PAD (pad), FALSE);
   g_return_val_if_fail (event != NULL, FALSE);
 
-  GST_OBJECT_LOCK (pad);
   GST_FLOW_TRACEPOINT_EVENT (event);
   GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER (pad, event);
+  GST_OBJECT_LOCK (pad);
   if (GST_PAD_IS_SINK (pad)) {
     if (G_UNLIKELY (!GST_EVENT_IS_DOWNSTREAM (event)))
       goto wrong_direction;
@@ -5498,41 +5496,41 @@ gst_pad_send_event (GstPad * pad, GstEvent * event)
   /* ERROR handling */
 wrong_direction:
   {
-    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s sending %s event in wrong direction",
         GST_DEBUG_PAD_NAME (pad), GST_EVENT_TYPE_NAME (event));
     GST_OBJECT_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     gst_event_unref (event);
     return FALSE;
   }
 unknown_direction:
   {
-    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s has invalid direction", GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     gst_event_unref (event);
     return FALSE;
   }
 no_function:
   {
-    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s has no event handler, file a bug.",
         GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
       GST_PAD_STREAM_UNLOCK (pad);
     gst_event_unref (event);
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     return FALSE;
   }
 flushing:
   {
-    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
       GST_PAD_STREAM_UNLOCK (pad);
     GST_CAT_INFO_OBJECT (GST_CAT_EVENT, pad,
         "Received event on flushing pad. Discarding");
     gst_event_unref (event);
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     return FALSE;
   }
 dropping:
-- 
1.8.3.2

