From 48311c56c1e1a12865c4b6cf646b524a2b0b9de4 Mon Sep 17 00:00:00 2001
From: Alexander Barabash <alexander_barabash@mentor.com>
Date: Sun, 2 Jun 2013 16:10:41 +0300
Subject: [PATCH 4/6] gst_flow_data LLTng tracepoints.

The gst_flow_data tracepoints trace the properties of data flowing through the gstreamer pipeline.
They can be used to observe throughput of the pipeline and its elements.

The initial support for this kind of tracepoints includes calling appropriate primitives
when the data is passed through the pipeline elements:

1. At entry points of Push APIs:
    gst_pad_chain()
    gst_pad_chain_list()
    gst_pad_push()
    gst_pad_push_list()

2. At successful exit points of Pull APIs:
    gst_pad_get_range()
    gst_pad_pull_range()

The tracepoints are invoked just before the gst_flow tracepoints.

At this stage, only minimal data is stored for each tracepoint:

    -- a unique integer ID of the invoking thread;
    -- the value of the pointer to the data.
    -- the type of data: buffer or buffer list.

For buffer lists, every buffer in the list is also traced.

Signed-off-by: Alexander Barabash <alexander_barabash@mentor.com>
---
 gst/gst_tracepoints.c |   19 +++++++++++++++++++
 gst/gst_tracepoints.h |   37 +++++++++++++++++++++++++++++++++++++
 gst/gstpad.c          |    6 ++++++
 3 files changed, 62 insertions(+)

diff --git a/gst/gst_tracepoints.c b/gst/gst_tracepoints.c
index d728acf..f2261ba 100644
--- a/gst/gst_tracepoints.c
+++ b/gst/gst_tracepoints.c
@@ -29,6 +29,7 @@
 #include "glib.h"
 #include "gstpad.h"
 #include "gstelement.h"
+#include "gstbufferlist.h"
 
 enum GstFlowTracepointType;
 static const gchar *gst_tracepoints_get_pad_element_name_if_needed (GstPad *
@@ -89,4 +90,22 @@ gst_tracepoints_get_thread_id (void)
   return thread_id;
 }
 
+static GstBufferListItem
+gst_tracepoints_trace_buffer_list_item (GstBuffer ** buffer, guint group,
+    guint idx, gpointer user_data)
+{
+  if (*buffer != NULL) {
+    GST_TRACEPOINT (gst_flow_data, *buffer,
+        GST_TRACEPOINT_DATA_TYPE_BUFFER, NULL);
+  }
+
+  return GST_BUFFER_LIST_CONTINUE;
+}
+
+void
+_priv_gst_tracepoints_trace_buffer_list (GstBufferList * list)
+{
+  gst_buffer_list_foreach (list, gst_tracepoints_trace_buffer_list_item, NULL);
+}
+
 #endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gst_tracepoints.h b/gst/gst_tracepoints.h
index 0d33653..8264316 100644
--- a/gst/gst_tracepoints.h
+++ b/gst/gst_tracepoints.h
@@ -27,6 +27,7 @@
 #include "gstbufferlist.h"
 
 extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad);
+extern void _priv_gst_tracepoints_trace_buffer_list (GstBufferList *list);
 
 enum GstFlowTracepointType {
   GST_TRACEPOINT_FLAG_ENTER = 0,
@@ -41,6 +42,11 @@ enum GstFlowTracepointKind {
   GST_TRACEPOINT_FLAG_SEND_EVENT = 2,
 };
 
+typedef enum GstFlowTracepointDataType {
+  GST_TRACEPOINT_DATA_TYPE_BUFFER = 0,
+  GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST = 1,
+} GstFlowTracepointDataType;
+
 #define GST_TRACEPOINT_HELPER2(...) __VA_ARGS__
 #define GST_TRACEPOINT_HELPER(...) GST_TRACEPOINT_HELPER2 (__VA_ARGS__)
 #define GST_TRACEPOINT_EVENT(name, args, fields) \
@@ -52,6 +58,7 @@ enum GstFlowTracepointKind {
 #define ctf_gst_thread_id_field(name) ctf_integer (guint16, name, gst_tracepoints_get_thread_id ())
 #define ctf_gst_tracepoint_type_field(name, type) ctf_integer (guint8, name, (guint8) (type))
 #define ctf_gst_tracepoint_kind_field(name, kind) ctf_integer (guint8, name, (guint8) (kind))
+#define ctf_gst_data_type_field(name, type) ctf_integer (guint8, name, (guint8) (type))
 
 #endif /* _GST_TRACEPOINTS_H */
 
@@ -83,6 +90,12 @@ GST_TRACEPOINT_EVENT (gst_flow,
                                  ctf_string (element_name,
                                              gst_tracepoints_get_pad_element_name_if_needed (pad, tracepoint_type))))
 
+GST_TRACEPOINT_EVENT (gst_flow_data,
+                      TP_ARGS (void *, data, GstFlowTracepointDataType, data_type, int *, trace_is_on),
+                      TP_FIELDS (ctf_integer (guint, size, (data_type == GST_TRACEPOINT_DATA_TYPE_BUFFER) ? ((GstBuffer *) (data))->size : 0)
+                                 ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_data_type_field (data_type, ((trace_is_on ? (*trace_is_on = 1) : 0), data_type))))
+
 #endif /* _GST_TRACEPOINTS_H */
 
 #include <lttng/tracepoint-event.h>
@@ -123,6 +136,27 @@ GST_TRACEPOINT_EVENT (gst_flow,
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad) \
     GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_DROPPED)
 
+#define GST_FLOW_TRACEPOINT_BUFFER(buffer) \
+  GST_TRACEPOINT (gst_flow_data, buffer, GST_TRACEPOINT_DATA_TYPE_BUFFER, NULL)
+
+#define GST_FLOW_TRACEPOINT_DATA(data, is_buffer)                       \
+    do {                                                                \
+      int trace_is_on = 0;                                              \
+      GST_TRACEPOINT (gst_flow_data, data, G_LIKELY (is_buffer) ? GST_TRACEPOINT_DATA_TYPE_BUFFER : GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST, &trace_is_on); \
+      if (trace_is_on && G_UNLIKELY (!is_buffer)) {                     \
+          _priv_gst_tracepoints_trace_buffer_list (data);               \
+      }                                                                 \
+  } while (0)
+
+#define GST_FLOW_TRACEPOINT_BUFFER_LIST(list)                           \
+  do {                                                                  \
+    int trace_is_on = 0;                                                \
+    GST_TRACEPOINT (gst_flow_data, list, GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST, &trace_is_on); \
+    if (trace_is_on) {                                                  \
+      _priv_gst_tracepoints_trace_buffer_list (list);                   \
+    }                                                                   \
+  } while (0)
+
 #define GST_TRACEPOINT(...) tracepoint (Gst, __VA_ARGS__)
 
 #else /* !GST_ENABLE_LTTNG_TRACEPOINTS */
@@ -139,6 +173,9 @@ GST_TRACEPOINT_EVENT (gst_flow,
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret)
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad)
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad)
+#define GST_FLOW_TRACEPOINT_BUFFER(buffer)
+#define GST_FLOW_TRACEPOINT_DATA(data, is_buffer)
+#define GST_FLOW_TRACEPOINT_BUFFER_LIST(list)
 
 #define GST_TRACEPOINT(...)
 
diff --git a/gst/gstpad.c b/gst/gstpad.c
index 7afb46a..a7eeef0 100644
--- a/gst/gstpad.c
+++ b/gst/gstpad.c
@@ -4224,6 +4224,7 @@ gst_pad_chain_data_unchecked (GstPad * pad, gboolean is_buffer, void *data,
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_DATA (data, is_buffer);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
@@ -4469,6 +4470,7 @@ gst_pad_push_data (GstPad * pad, gboolean is_buffer, void *data,
 
   GST_OBJECT_LOCK (pad);
 
+  GST_FLOW_TRACEPOINT_DATA (data, is_buffer);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
 
   /* FIXME: this check can go away; pad_set_blocked could be implemented with
@@ -4732,6 +4734,7 @@ gst_pad_push (GstPad * pad, GstBuffer * buffer)
       "calling chainfunction &%s with buffer %" GST_PTR_FORMAT,
       GST_DEBUG_FUNCPTR_NAME (GST_PAD_CHAINFUNC (peer)), buffer);
 
+  GST_FLOW_TRACEPOINT_BUFFER (buffer);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, buffer);
 
   ret = GST_PAD_CHAINFUNC (peer) (peer, buffer);
@@ -4853,6 +4856,7 @@ gst_pad_push_list (GstPad * pad, GstBufferList * list)
   if (G_UNLIKELY (g_atomic_pointer_get (cache_ptr) == PAD_CACHE_INVALID))
     goto invalid;
 
+  GST_FLOW_TRACEPOINT_BUFFER_LIST (list);
   GST_FLOW_TRACEPOINT_PUSH_ENTER (peer, list);
 
   ret = GST_PAD_CHAINLISTFUNC (peer) (peer, list);
@@ -5019,6 +5023,7 @@ gst_pad_get_range_unchecked (GstPad * pad, guint64 offset, guint size,
     if (G_UNLIKELY (!gst_pad_configure_src (pad, caps, TRUE)))
       goto not_negotiated;
   }
+  GST_FLOW_TRACEPOINT_BUFFER (*buffer);
   GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
   return ret;
 
@@ -5191,6 +5196,7 @@ gst_pad_pull_range (GstPad * pad, guint64 offset, guint size,
     if (G_UNLIKELY (!gst_pad_configure_sink (pad, caps)))
       goto not_negotiated;
   }
+  GST_FLOW_TRACEPOINT_BUFFER (*buffer);
   GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
   return ret;
 
-- 
1.7.9.5

