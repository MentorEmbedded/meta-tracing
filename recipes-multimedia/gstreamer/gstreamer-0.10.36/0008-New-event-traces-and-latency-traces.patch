From 6c7ab7664b89f456afdbfe96435755cd9692af94 Mon Sep 17 00:00:00 2001
From: JP Ikaheimonen <jp_ikaheimonen@mentor.com>
Date: Fri, 28 Feb 2014 10:14:56 +0200
Subject: [PATCH 8/8] New event traces and latency traces

1) Cleaning up the code, fixing indenting, etc.
2) Latency probe. This is an extra custom event that is sent
   into the pipeline whenever a buffer is sent from a source element.
   The event follows the buffer in the pipeline, and can be identified.
   When it is received in the sink, we can then deduce the time it
   took, which is also approximately the time of the buffer preceding it.
3) Some gstreamer 1.2 -specific changes, written under conditional
   compilation, so that we are ready to move to gstreamer 1.2.
4) Renamed the QOS event trace field 'diff' to 'jitter'. This is a better
   name and already in wide use for gstreamer 1.2.
5) Added a specific tracepoint for CAPS event in gstreamer 1.2.
---
 gst/gst_tracepoints.c | 173 +++++++++++++++++++++++++------
 gst/gst_tracepoints.h | 276 ++++++++++++++++++++++++++++++++------------------
 2 files changed, 316 insertions(+), 133 deletions(-)

diff --git a/gst/gst_tracepoints.c b/gst/gst_tracepoints.c
index e1fec75..2f9d754 100644
--- a/gst/gst_tracepoints.c
+++ b/gst/gst_tracepoints.c
@@ -31,12 +31,20 @@
 #include "gstelement.h"
 #include "gstbufferlist.h"
 #include "gstevent.h"
+#include "gstbin.h"
+
+GstStaticCaps _priv_gst_tracepoints_caps = GST_STATIC_CAPS_NONE;
 
 enum GstFlowTracepointType;
 static const gchar *gst_tracepoints_get_pad_element_name_if_needed (GstPad *
     pad, enum GstFlowTracepointType tracepoint_type);
+static const gchar *gst_tracepoints_get_pad_element_name (GstPad * pad);
 static guint16 gst_tracepoints_get_thread_id (void);
 
+static void send_latency_probe (GstPad * pad, int id);
+static GstElement *get_real_pad_parent (GstPad * pad);
+static void gst_latency_tracer_init (void);
+
 static inline GstClockTime
 gst_tracepoints_extract_event_latency (GstEvent * event)
 {
@@ -45,19 +53,10 @@ gst_tracepoints_extract_event_latency (GstEvent * event)
   return latency;
 }
 
-struct GstFlowTracepointQOSEventData;
-static inline GstClockTime
-gst_tracepoints_extract_qos_event_diff (GstEvent * event,
-    struct GstFlowTracepointQOSEventData *event_data);
-static inline gdouble
-gst_tracepoints_extract_qos_event_proportion (GstEvent * event,
-    struct GstFlowTracepointQOSEventData *event_data);
-
 #define GST_TRACEPOINTS_CREATE_PROBES
 #define TRACEPOINT_CREATE_PROBES
 #define TRACEPOINT_DEFINE
 #include "gst_tracepoints.h"
-
 static const gchar *
 gst_tracepoints_get_pad_element_name (GstPad * pad)
 {
@@ -107,49 +106,157 @@ gst_tracepoints_get_thread_id (void)
   return thread_id;
 }
 
-static GstBufferListItem
-gst_tracepoints_trace_buffer_list_item (GstBuffer ** buffer, guint group,
+static gboolean
+gst_tracepoints_trace_buffer_list_item (GstBuffer ** buffer,
     guint idx, gpointer user_data)
 {
   if (*buffer != NULL) {
-    GST_TRACEPOINT (gst_flow_data, *buffer,
-        GST_TRACEPOINT_DATA_TYPE_BUFFER, NULL);
+    GST_TRACEPOINT (gst_flow_data, *buffer, GST_TRACEPOINT_DATA_TYPE_BUFFER);
   }
 
-  return GST_BUFFER_LIST_CONTINUE;
+  return TRUE;
 }
 
+static GstElement *
+get_real_pad_parent (GstPad * pad)
+{
+  GstObject *parent;
+
+  if (!pad)
+    return NULL;
+
+  parent = GST_OBJECT_PARENT (pad);
+
+  /* if parent of pad is a ghost-pad, then pad is a proxy_pad */
+  if (parent && GST_IS_GHOST_PAD (parent)) {
+    pad = GST_PAD_CAST (parent);
+    parent = GST_OBJECT_PARENT (pad);
+  }
+  return GST_ELEMENT_CAST (parent);
+}
+
+static GQuark latency_probe_id;
+static GQuark latency_probe_pad;
+static GQuark latency_probe_number;
+static int latency_probe_initialized = 0;
+static int latency_probe_count = 1;
+
+static void
+gst_latency_tracer_init (void)
+{
+  if (!latency_probe_initialized) {
+    latency_probe_initialized = 1;
+    latency_probe_id = g_quark_from_static_string ("latency_probe.id");
+    latency_probe_pad = g_quark_from_static_string ("latency_probe.pad");
+    latency_probe_number = g_quark_from_static_string ("latency_probe.number");
+  }
+}
+
+#if GST_CHECK_VERSION(1, 0, 0)
+#define GST_ELEMENT_IS_SINK GST_ELEMENT_FLAG_SINK
+#define GST_ELEMENT_IS_SOURCE GST_ELEMENT_FLAG_SOURCE
+#endif
+
 void
-_priv_gst_tracepoints_trace_buffer_list (GstBufferList * list)
+receive_latency_probe (GstPad * pad, GstEvent * event)
 {
-  gst_buffer_list_foreach (list, gst_tracepoints_trace_buffer_list_item, NULL);
+
+  GstElement *parent;
+  if (!(GST_ENABLED (gst_latency_measurement_start)))
+    return;
+  parent = get_real_pad_parent (pad);
+  if (parent && (!GST_IS_BIN (parent)) &&
+      GST_OBJECT_FLAG_IS_SET (parent, GST_ELEMENT_IS_SINK)) {
+
+    if (GST_EVENT_TYPE (event) == GST_EVENT_CUSTOM_DOWNSTREAM) {
+      const GstStructure *data = gst_event_get_structure (event);
+
+      gst_latency_tracer_init ();
+
+      if (gst_structure_get_name_id (data) == latency_probe_id) {
+        GstPad *origin_pad;
+        guint64 origin_number;
+
+        gst_structure_id_get (data,
+            latency_probe_pad, GST_TYPE_PAD, &origin_pad,
+            latency_probe_number, G_TYPE_UINT, &origin_number, NULL);
+        GST_TRACEPOINT (gst_latency_measurement_end, pad, origin_number);
+      }
+    }
+  }
+}
+
+static void
+send_latency_probe (GstPad * pad, int id)
+{
+  GstEvent *latency_probe;
+  gst_latency_tracer_init ();
+  latency_probe = gst_event_new_custom (GST_EVENT_CUSTOM_DOWNSTREAM,
+#if GST_CHECK_VERSION(1, 0, 0)
+      gst_structure_new_id (latency_probe_id,
+          latency_probe_pad, GST_TYPE_PAD, pad,
+          latency_probe_number, G_TYPE_UINT, id, NULL));
+#else
+      gst_structure_id_new (latency_probe_id,
+          latency_probe_pad, GST_TYPE_PAD, pad,
+          latency_probe_number, G_TYPE_UINT, id, NULL));
+#endif
+  gst_pad_push_event (pad, latency_probe);
 }
 
-static inline void
-gst_tracepoints_extract_qos_event_data (GstEvent * event,
-    struct GstFlowTracepointQOSEventData *event_data)
+int
+mark_latency_probe_start (GstPad * pad)
 {
-  if (!event_data->data_ready) {
-    event_data->data_ready = TRUE;
-    gst_event_parse_qos_full (event, &event_data->type, &event_data->proportion,
-        &event_data->diff, &event_data->timestamp);
+  int lpn = 0;
+  GstElement *parent;
+  if (!(GST_ENABLED (gst_latency_measurement_start)))
+    return 0;
+  gst_latency_tracer_init ();
+
+  parent = get_real_pad_parent (GST_PAD_PEER (pad));
+  if (GST_STATE (parent) != GST_STATE_PLAYING)
+    return 0;
+  if (parent && (!GST_IS_BIN (parent)) &&
+      GST_OBJECT_FLAG_IS_SET (parent, GST_ELEMENT_IS_SOURCE)) {
+    lpn = latency_probe_count++;
+    GST_TRACEPOINT (gst_latency_measurement_start, GST_PAD_PEER (pad), lpn);
   }
+  return lpn;
 }
 
-static inline GstClockTime
-gst_tracepoints_extract_qos_event_diff (GstEvent * event,
-    struct GstFlowTracepointQOSEventData *event_data)
+void
+send_latency_probe_push (GstPad * pad, int id)
+{
+  if (id == 0)
+    return;
+  if (!(GST_ENABLED (gst_latency_measurement_start)))
+    return;
+  send_latency_probe (GST_PAD_PEER (pad), id);
+}
+
+void
+send_latency_probe_pull (GstPad * pad)
 {
-  gst_tracepoints_extract_qos_event_data (event, event_data);
-  return event_data->diff;
+  GstElement *parent;
+  int id;
+  if (!(GST_ENABLED (gst_latency_measurement_start)))
+    return;
+  parent = get_real_pad_parent (pad);
+  if (GST_STATE (parent) != GST_STATE_PLAYING)
+    return;
+  if (parent && (!GST_IS_BIN (parent)) &&
+      GST_OBJECT_FLAG_IS_SET (parent, GST_ELEMENT_IS_SOURCE)) {
+    id = latency_probe_count++;
+    GST_TRACEPOINT (gst_latency_measurement_start, pad, id);
+    send_latency_probe (pad, id);
+  }
 }
 
-static inline gdouble
-gst_tracepoints_extract_qos_event_proportion (GstEvent * event,
-    struct GstFlowTracepointQOSEventData *event_data)
+void
+_priv_gst_tracepoints_trace_buffer_list (GstBufferList * list)
 {
-  gst_tracepoints_extract_qos_event_data (event, event_data);
-  return event_data->proportion;
+  gst_buffer_list_foreach (list,
+      (GstBufferListFunc) gst_tracepoints_trace_buffer_list_item, NULL);
 }
 
 #endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
diff --git a/gst/gst_tracepoints.h b/gst/gst_tracepoints.h
index 4fc6303..550e46e 100644
--- a/gst/gst_tracepoints.h
+++ b/gst/gst_tracepoints.h
@@ -22,38 +22,48 @@
 
 #ifndef _GST_TRACEPOINTS_H
 
+#include "gstversion.h"
 #include "gstpad.h"
 #include "gstghostpad.h"
 #include "gstbufferlist.h"
 #include "gstevent.h"
-
-extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad);
-extern void _priv_gst_tracepoints_trace_buffer_list (GstBufferList *list);
-
-enum GstFlowTracepointType {
+#include "gstbuffer.h"
+
+extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad * gpad);
+extern void _priv_gst_tracepoints_trace_buffer_list (GstBufferList * list);
+extern GstStaticCaps _priv_gst_tracepoints_caps;
+extern void send_latency_probe_push (GstPad * pad, int id);
+extern void send_latency_probe_pull (GstPad * pad);
+extern void receive_latency_probe (GstPad * pad, GstEvent * event);
+extern int mark_latency_probe_start (GstPad * pad);
+
+enum GstFlowTracepointType
+{
   GST_TRACEPOINT_FLAG_ENTER = 0,
   GST_TRACEPOINT_FLAG_EXIT = 1,
   GST_TRACEPOINT_FLAG_ERROR = 2,
   GST_TRACEPOINT_FLAG_DROPPED = 3,
 };
 
-enum GstFlowTracepointKind {
+enum GstFlowTracepointKind
+{
   GST_TRACEPOINT_FLAG_PUSH = 0,
   GST_TRACEPOINT_FLAG_PULL = 1,
   GST_TRACEPOINT_FLAG_SEND_EVENT = 2,
 };
 
-typedef enum GstFlowTracepointDataType {
+typedef enum GstFlowTracepointDataType
+{
   GST_TRACEPOINT_DATA_TYPE_BUFFER = 0,
   GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST = 1,
 } GstFlowTracepointDataType;
 
-typedef struct GstFlowTracepointQOSEventData {
-    GstQOSType type;
-    gdouble proportion;
-    GstClockTimeDiff diff;
-    GstClockTime timestamp;
-    gboolean data_ready;
+typedef struct GstFlowTracepointQOSEventData
+{
+  GstQOSType type;
+  gdouble proportion;
+  GstClockTimeDiff jitter;
+  GstClockTime timestamp;
 } GstFlowTracepointQOSEventData;
 
 #define GST_TRACEPOINT_HELPER2(...) __VA_ARGS__
@@ -86,128 +96,194 @@ typedef struct GstFlowTracepointQOSEventData {
 
 #include <lttng/tracepoint.h>
 
-GST_TRACEPOINT_EVENT (gst_flow,
-                      TP_ARGS (GstPad *, pad,
-                               void *, data,
-                               GstFlowReturn, result,
-                               enum GstFlowTracepointKind, tracepoint_kind,
-                               enum GstFlowTracepointType, tracepoint_type),
-                      TP_FIELDS (ctf_gst_pad_field (pad, pad)
-                                 ctf_gst_data_field (data, data)
-                                 ctf_gst_flow_return_field (flow_return, result)
-                                 ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_tracepoint_type_field (tracepoint_type, tracepoint_type)
-                                 ctf_gst_tracepoint_kind_field (tracepoint_kind, tracepoint_kind)
-                                 ctf_string (element_name,
-                                             gst_tracepoints_get_pad_element_name_if_needed (pad, tracepoint_type))))
-
-GST_TRACEPOINT_EVENT (gst_flow_data,
-                      TP_ARGS (void *, data, GstFlowTracepointDataType, data_type, int *, trace_is_on),
-                      TP_FIELDS (ctf_integer (guint, size, (data_type == GST_TRACEPOINT_DATA_TYPE_BUFFER) ? ((GstBuffer *) (data))->size : 0)
-                                 ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_data_type_field (data_type, ((trace_is_on ? (*trace_is_on = 1) : 0), data_type))))
-
-GST_TRACEPOINT_EVENT (gst_flow_event,
-                      TP_ARGS (GstEvent *, event, int *, trace_is_on),
-                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_event_type_field (event_type, ((trace_is_on ? (*trace_is_on = 1) : 0), event))))
-
-GST_TRACEPOINT_EVENT (gst_flow_event_latency,
-                      TP_ARGS (GstEvent *, event),
-                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_time_field (latency, gst_tracepoints_extract_event_latency (event))))
-
-GST_TRACEPOINT_EVENT (gst_flow_event_qos,
-                      TP_ARGS (GstEvent *, event, GstFlowTracepointQOSEventData *, event_data),
-                      TP_FIELDS (ctf_gst_thread_id_field (thread_id)
-                                 ctf_gst_time_field (diff, gst_tracepoints_extract_qos_event_diff (event, event_data))
-                                 ctf_float (gdouble, proportion, gst_tracepoints_extract_qos_event_proportion (event, event_data))))
+/* This ought to be defined in LTTNG */
+#define GST_ENABLED(name) __tracepoint_Gst##___##name.state
 
-#endif /* _GST_TRACEPOINTS_H */
 
+GST_TRACEPOINT_EVENT (gst_flow,
+    TP_ARGS (GstPad *, pad,
+        void *, data,
+        GstFlowReturn, result,
+        enum GstFlowTracepointKind, tracepoint_kind,
+        enum GstFlowTracepointType, tracepoint_type),
+    TP_FIELDS (ctf_gst_pad_field (pad, pad)
+        ctf_gst_data_field (data, data)
+        ctf_gst_flow_return_field (flow_return, result)
+        ctf_gst_thread_id_field (thread_id)
+        ctf_gst_tracepoint_type_field (tracepoint_type, tracepoint_type)
+        ctf_gst_tracepoint_kind_field (tracepoint_kind, tracepoint_kind)
+        ctf_string (element_name,
+            gst_tracepoints_get_pad_element_name_if_needed (pad,
+                tracepoint_type))))
+#if GST_CHECK_VERSION(1, 0, 0)
+GST_TRACEPOINT_EVENT (gst_flow_data,
+    TP_ARGS (void *, data, GstFlowTracepointDataType, data_type),
+    TP_FIELDS (ctf_integer (guint, size,
+            (data_type ==
+                GST_TRACEPOINT_DATA_TYPE_BUFFER) ?
+            gst_buffer_get_size ((GstBuffer *) (data)) : 0)
+        ctf_gst_thread_id_field (thread_id)
+        ctf_gst_data_type_field (data_type, data_type)))
+#else
+GST_TRACEPOINT_EVENT (gst_flow_data,
+    TP_ARGS (void *, data, GstFlowTracepointDataType, data_type),
+    TP_FIELDS (ctf_integer (guint, size,
+            (data_type == GST_TRACEPOINT_DATA_TYPE_BUFFER) ?
+            ((GstBuffer *) (data))->size : 0)
+        ctf_gst_thread_id_field (thread_id)
+        ctf_gst_data_type_field (data_type, data_type)))
+#endif
+    GST_TRACEPOINT_EVENT (gst_flow_event,
+    TP_ARGS (GstEvent *, event), TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+        ctf_gst_event_type_field (event_type, event)))
+
+    GST_TRACEPOINT_EVENT (gst_flow_event_latency,
+    TP_ARGS (GstEvent *, event), TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+        ctf_gst_time_field (latency,
+            gst_tracepoints_extract_event_latency (event))))
+
+    GST_TRACEPOINT_EVENT (gst_flow_event_qos,
+    TP_ARGS (GstFlowTracepointQOSEventData *, event),
+    TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+        ctf_gst_time_field (jitter, event->jitter)
+        ctf_integer (GstQOSType, type, event->type)
+        ctf_float (gdouble, proportion, event->proportion)))
+#if GST_CHECK_VERSION(1, 0, 0)
+GST_TRACEPOINT_EVENT (gst_flow_event_caps,
+    TP_ARGS (GstCaps *, caps, char const *, str),
+    TP_FIELDS (ctf_gst_thread_id_field (thread_id)
+        ctf_integer (unsigned long, flags, GST_CAPS_FLAGS (caps))
+        ctf_string (text, str)))
+#endif
+GST_TRACEPOINT_EVENT (gst_latency_measurement_start,
+    TP_ARGS (GstPad *, pad,
+        int, id), TP_FIELDS (ctf_integer (guint32, id, (guint32) (id))
+        ctf_string (element_name, gst_tracepoints_get_pad_element_name (pad))
+    )
+    )
+GST_TRACEPOINT_EVENT (gst_latency_measurement_end,
+    TP_ARGS (GstPad *, pad,
+        int, id), TP_FIELDS (ctf_integer (guint32, id, (guint32) (id))
+        ctf_string (element_name, gst_tracepoints_get_pad_element_name (pad))
+    )
+    )
+GST_TRACEPOINT_EVENT (gst_latency_measurement_passed,
+    TP_ARGS (GstPad *, pad,
+        int, id), TP_FIELDS (ctf_integer (guint32, id, (guint32) (id))
+        ctf_string (element_name, gst_tracepoints_get_pad_element_name (pad))
+    )
+    )
+#endif                          /* _GST_TRACEPOINTS_H */
 #include <lttng/tracepoint-event.h>
-
+#define GST_FLOW_TRACEPOINT_PUSH_DECLARATION() \
+    int gst_latency_trace_msg_id = 0
 #define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data) \
-    GST_TRACEPOINT (gst_flow, pad, data, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ENTER)
-
+    GST_TRACEPOINT (gst_flow, pad, data, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ENTER); \
+    gst_latency_trace_msg_id = mark_latency_probe_start(pad);
 #define GST_FLOW_TRACEPOINT_PUSH_EXIT(pad, ret) \
-    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_EXIT)
-
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_EXIT); \
+    send_latency_probe_push(pad, gst_latency_trace_msg_id);
 #define GST_FLOW_TRACEPOINT_PUSH_ERROR(pad, ret) \
     GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ERROR)
-
 #define GST_FLOW_TRACEPOINT_PUSH_DROPPED(pad) \
     GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_DROPPED)
-
 #define GST_FLOW_TRACEPOINT_PULL_ENTER(pad) \
-    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ENTER)
-
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ENTER); \
+    send_latency_probe_pull(pad)
 #define GST_FLOW_TRACEPOINT_PULL_EXIT(pad, data, ret) \
     GST_TRACEPOINT (gst_flow, pad, data, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_EXIT)
-
 #define GST_FLOW_TRACEPOINT_PULL_ERROR(pad, ret) \
     GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ERROR)
-
 #define GST_FLOW_TRACEPOINT_PULL_DROPPED(pad) \
     GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_DROPPED)
-
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER(pad, event)                \
-    GST_TRACEPOINT (gst_flow, pad, event, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ENTER)
-
+    GST_TRACEPOINT (gst_flow, pad, event, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ENTER); \
+    receive_latency_probe(pad, event);
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret) \
-  GST_TRACEPOINT (gst_flow, pad, NULL, (ret) ? GST_FLOW_OK : GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_EXIT)
-
+    GST_TRACEPOINT (gst_flow, pad, NULL, (ret) ? GST_FLOW_OK : GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_EXIT)
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad) \
     GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ERROR)
-
 #define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad) \
     GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_DROPPED)
-
 #define GST_FLOW_TRACEPOINT_BUFFER(buffer) \
-  GST_TRACEPOINT (gst_flow_data, buffer, GST_TRACEPOINT_DATA_TYPE_BUFFER, NULL)
-
+  GST_TRACEPOINT (gst_flow_data, buffer, GST_TRACEPOINT_DATA_TYPE_BUFFER)
+/*
+ * The following logic defines a generic tracepoint which will
+ * dispatch to typed tracepoints depending on the (runtime) event type.
+ * This implies gst_flow_event to be enabled whenever any of the
+ * specialized events are enabled.
+ */
+#if GST_CHECK_VERSION(1, 0, 0)
 #define GST_FLOW_TRACEPOINT_EVENT(event)                                \
-    do {                                                                \
-        int trace_is_on = 0;                                            \
-        GST_TRACEPOINT (gst_flow_event, event, &trace_is_on);           \
-        if (trace_is_on) {                                              \
-            switch(event->type) {                                       \
-            case GST_EVENT_LATENCY:                                     \
-                GST_TRACEPOINT (gst_flow_event_latency, event);         \
-                break;                                                  \
-            case GST_EVENT_QOS:                                         \
-                {                                                       \
-                    GstFlowTracepointQOSEventData event_data;           \
-                    event_data.data_ready = FALSE;                      \
-                    GST_TRACEPOINT (gst_flow_event_qos, event, &event_data); \
-                }                                                       \
-                break;                                                  \
-            default:                                                    \
-                break;                                                  \
-            }                                                           \
-        }                                                               \
-    } while (0)
-
+do {                                                                    \
+  if (GST_ENABLED(gst_flow_event)) {					\
+    switch(event->type) {						\
+      case GST_EVENT_LATENCY:						\
+        GST_TRACEPOINT (gst_flow_event_latency, event);			\
+	break;								\
+      case GST_EVENT_QOS:					       	\
+        {						      		\
+          GstFlowTracepointQOSEventData qos_event;	       		\
+	  gst_event_parse_qos (event,					\
+	    &qos_event.type, &qos_event.proportion,                     \
+            &qos_event.jitter, &qos_event.timestamp);                   \
+	  GST_TRACEPOINT (gst_flow_event_qos, &qos_event);	        \
+        }								\
+        break;								\
+      case GST_EVENT_CAPS:						\
+	{								\
+          GstCaps *caps = gst_static_caps_get (&_priv_gst_tracepoints_caps); \
+	  gchar *str = 0;						\
+          gst_event_parse_caps(event, &caps);				\
+	  str = gst_caps_to_string(caps);				\
+	  GST_TRACEPOINT(gst_flow_event_caps, caps, str);		\
+	  g_free(str);							\
+        }								\
+	break;								\
+      default:								\
+	GST_TRACEPOINT (gst_flow_event, event);				\
+	break;								\
+    }									\
+  }									\
+} while (0)
+#else
+#define GST_FLOW_TRACEPOINT_EVENT(event)                                \
+do {                                                                    \
+  if (GST_ENABLED(gst_flow_event)) {					\
+    switch(event->type) {						\
+      case GST_EVENT_LATENCY:						\
+        GST_TRACEPOINT (gst_flow_event_latency, event);			\
+	break;								\
+      case GST_EVENT_QOS:					       	\
+        {						      		\
+          GstFlowTracepointQOSEventData qos_event;	       		\
+          gst_event_parse_qos(event, &qos_event.proportion,		\
+            &qos_event.jitter, &qos_event.timestamp);			\
+	  GST_TRACEPOINT (gst_flow_event_qos, &qos_event);	        \
+        }								\
+        break;								\
+      default:								\
+	GST_TRACEPOINT (gst_flow_event, event);				\
+	break;								\
+    }									\
+  }									\
+} while (0)
+#endif
 #define GST_FLOW_TRACEPOINT_DATA(data, is_buffer)                       \
     do {                                                                \
-      int trace_is_on = 0;                                              \
-      GST_TRACEPOINT (gst_flow_data, data, G_LIKELY (is_buffer) ? GST_TRACEPOINT_DATA_TYPE_BUFFER : GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST, &trace_is_on); \
-      if (trace_is_on && G_UNLIKELY (!is_buffer)) {                     \
+      GST_TRACEPOINT (gst_flow_data, data, G_LIKELY (is_buffer) ? GST_TRACEPOINT_DATA_TYPE_BUFFER : GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST); \
+      if (GST_ENABLED(gst_flow_data) && G_UNLIKELY (!is_buffer)) {	\
           _priv_gst_tracepoints_trace_buffer_list (data);               \
       }                                                                 \
   } while (0)
-
 #define GST_FLOW_TRACEPOINT_BUFFER_LIST(list)                           \
   do {                                                                  \
-    int trace_is_on = 0;                                                \
-    GST_TRACEPOINT (gst_flow_data, list, GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST, &trace_is_on); \
-    if (trace_is_on) {                                                  \
+    GST_TRACEPOINT (gst_flow_data, list, GST_TRACEPOINT_DATA_TYPE_BUFFER_LIST); \
+    if (GST_ENABLED(gst_flow_data)) {					\
       _priv_gst_tracepoints_trace_buffer_list (list);                   \
     }                                                                   \
   } while (0)
-
 #define GST_TRACEPOINT(...) tracepoint (Gst, __VA_ARGS__)
-
 #else /* !GST_ENABLE_LTTNG_TRACEPOINTS */
 
 #define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data)
-- 
1.8.3.2

