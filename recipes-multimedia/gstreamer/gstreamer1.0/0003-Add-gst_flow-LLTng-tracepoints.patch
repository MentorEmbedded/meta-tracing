From d1273bb861e2bd811c1c368a959f2dfa3976655c Mon Sep 17 00:00:00 2001
From: Alexander Barabash <alexander_barabash@mentor.com>
Date: Tue, 8 Dec 2015 14:56:15 +0200
Subject: [PATCH 03/11] Add gst_flow LLTng tracepoints.

The gst_flow tracepoints trace the flow of data through the gstreamer pipeline.
They can be used to observe latency of the pipeline and its elements.

The following APIs are traced at entry and exit points:

1. Push APIs:
    gst_pad_chain()
    gst_pad_chain_list()
    gst_pad_push()
    gst_pad_push_list()

2. Pull APIs:
    gst_pad_get_range()
    gst_pad_pull_range()

3. Event APIs:
   gst_pad_push_event()
   gst_pad_send_event()

Additionally, the following internal functions are traced:
   gst_pad_push_data()
   gst_pad_chain_data_unchecked()
   gst_pad_get_range_unchecked()

The data stored for each tracepoint:

    -- a unique integer ID of the invoking thread;
    -- the value of the pointer to the pad.

Additionally, at each entry point, the name of the element containing the pad is traced.
For ghost/proxy pads, the name of the element containing the pad's target is traced instead.

At entry points of push and event APIs, and at successful exit points if pull APIs,
the value of the pointer to the data is traced.

At exit points, the call result is traced.
---
 gst/gst_tracepoints.c                              | 56 +++++++++++++
 gst/gst_tracepoints.h                              | 92 +++++++++++++++++++++-
 gst/gstghostpad.c                                  |  2 +
 ...gst_tracepoints.c => gstghostpad_tracepoints.h} | 18 ++---
 gst/gstpad.c                                       | 49 ++++++++++++
 5 files changed, 202 insertions(+), 15 deletions(-)
 copy gst/{gst_tracepoints.c => gstghostpad_tracepoints.h} (74%)

--- a/gst/gst_tracepoints.c
+++ b/gst/gst_tracepoints.c
@@ -26,10 +26,66 @@
 #include "config.h"
 
 #ifdef GST_ENABLE_LTTNG_TRACEPOINTS
+#include "glib.h"
+#include "gstpad.h"
+#include "gstelement.h"
+
+enum GstFlowTracepointType;
+static const gchar *gst_tracepoints_get_pad_element_name_if_needed (GstPad *
+   pad, enum GstFlowTracepointType tracepoint_type);
+static guint16 gst_tracepoints_get_thread_id (void);
 
 #define GST_TRACEPOINTS_CREATE_PROBES
 #define TRACEPOINT_CREATE_PROBES
 #define TRACEPOINT_DEFINE
 #include "gst_tracepoints.h"
+static const gchar *
+gst_tracepoints_get_pad_element_name (GstPad * pad)
+{
+  const gchar *name = "";
+
+  if (pad != NULL) {
+    if (GST_IS_GHOST_PAD (pad)) {
+      name =
+          gst_tracepoints_get_pad_element_name (_priv_gst_ghostpad_get_target
+          (GST_GHOST_PAD (pad)));
+    } else if (GST_IS_PROXY_PAD (pad)) {
+      name =
+          gst_tracepoints_get_pad_element_name (GST_PAD_PEER (GST_PROXY_PAD
+              (pad)));
+    } else if (GST_PAD_PARENT (pad)) {
+      name = GST_ELEMENT_NAME (GST_PAD_PARENT (pad));
+    }
+  }
+
+  return name;
+}
+
+static const gchar *
+gst_tracepoints_get_pad_element_name_if_needed (GstPad * pad,
+    enum GstFlowTracepointType tracepoint_type)
+{
+  if (tracepoint_type == GST_TRACEPOINT_FLAG_ENTER) {
+    return gst_tracepoints_get_pad_element_name (pad);
+  } else {
+    return "";
+  }
+}
+
+static guint16
+gst_tracepoints_get_thread_id (void)
+{
+  static gint thread_counter;
+  static GPrivate key;
+  gintptr thread_id = (gintptr) g_private_get (&key);
+  if (G_UNLIKELY (thread_id == 0)) {
+    do {
+      thread_id = g_atomic_int_add (&thread_counter, 1) + 1;
+      thread_id = thread_id & 0xFFFF;   /* Leave 16 bits. */
+    } while (thread_id == 0);
+    g_private_set (&key, (gpointer) thread_id);
+  }
+  return thread_id;
+}
 
 #endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
--- a/gst/gst_tracepoints.h
+++ b/gst/gst_tracepoints.h
@@ -22,11 +22,37 @@
 
 #ifndef _GST_TRACEPOINTS_H
 
+#include "gstpad.h"
+#include "gstghostpad.h"
+#include "gstbufferlist.h"
+
+extern GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad);
+
+enum GstFlowTracepointType {
+  GST_TRACEPOINT_FLAG_ENTER = 0,
+  GST_TRACEPOINT_FLAG_EXIT = 1,
+  GST_TRACEPOINT_FLAG_ERROR = 2,
+  GST_TRACEPOINT_FLAG_DROPPED = 3,
+};
+
+enum GstFlowTracepointKind {
+  GST_TRACEPOINT_FLAG_PUSH = 0,
+  GST_TRACEPOINT_FLAG_PULL = 1,
+  GST_TRACEPOINT_FLAG_SEND_EVENT = 2,
+};
+
 #define GST_TRACEPOINT_HELPER2(...) __VA_ARGS__
 #define GST_TRACEPOINT_HELPER(...) GST_TRACEPOINT_HELPER2 (__VA_ARGS__)
 #define GST_TRACEPOINT_EVENT(name, args, fields) \
     TRACEPOINT_EVENT (TRACEPOINT_PROVIDER, name, GST_TRACEPOINT_HELPER (args), GST_TRACEPOINT_HELPER (fields))
 
+#define ctf_gst_pad_field(name, ptr) ctf_integer_hex (gintptr, name, (gintptr) (ptr))
+#define ctf_gst_data_field(name, ptr) ctf_integer_hex (gintptr, name, (gintptr) (ptr))
+#define ctf_gst_flow_return_field(name, value) ctf_integer_hex (gint, name, (gint) (value))
+#define ctf_gst_thread_id_field(name) ctf_integer (guint16, name, gst_tracepoints_get_thread_id ())
+#define ctf_gst_tracepoint_type_field(name, type) ctf_integer (guint8, name, (guint8) (type))
+#define ctf_gst_tracepoint_kind_field(name, kind) ctf_integer (guint8, name, (guint8) (kind))
+
 #endif /* _GST_TRACEPOINTS_H */
 
 #ifdef GST_ENABLE_LTTNG_TRACEPOINTS
@@ -42,18 +68,78 @@
 
 #include <lttng/tracepoint.h>
 
-GST_TRACEPOINT_EVENT (gst_sample_event,
-                      TP_ARGS (int, event_argument),
-                      TP_FIELDS (ctf_integer(int, event_argument, event_argument)))
+GST_TRACEPOINT_EVENT (gst_flow,
+                      TP_ARGS (GstPad *, pad,
+                               void *, data,
+                               GstFlowReturn, result,
+                               enum GstFlowTracepointKind, tracepoint_kind,
+                               enum GstFlowTracepointType, tracepoint_type),
+                      TP_FIELDS (ctf_gst_pad_field (pad, pad)
+                                 ctf_gst_data_field (data, data)
+                                 ctf_gst_flow_return_field (flow_return, result)
+                                 ctf_gst_thread_id_field (thread_id)
+                                 ctf_gst_tracepoint_type_field (tracepoint_type, tracepoint_type)
+                                 ctf_gst_tracepoint_kind_field (tracepoint_kind, tracepoint_kind)
+                                 ctf_string (element_name,
+                                             gst_tracepoints_get_pad_element_name_if_needed (pad, tracepoint_type))))
 
 #endif /* _GST_TRACEPOINTS_H */
 
 #include <lttng/tracepoint-event.h>
 
+#define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data) \
+    GST_TRACEPOINT (gst_flow, pad, data, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_PUSH_EXIT(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_PUSH_ERROR(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_PUSH_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PUSH, GST_TRACEPOINT_FLAG_DROPPED)
+
+#define GST_FLOW_TRACEPOINT_PULL_ENTER(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_PULL_EXIT(pad, data, ret) \
+    GST_TRACEPOINT (gst_flow, pad, data, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_PULL_ERROR(pad, ret) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, ret, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_PULL_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_PULL, GST_TRACEPOINT_FLAG_DROPPED)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER(pad, event)                \
+    GST_TRACEPOINT (gst_flow, pad, event, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ENTER)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret) \
+  GST_TRACEPOINT (gst_flow, pad, NULL, (ret) ? GST_FLOW_OK : GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_EXIT)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_ERROR, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_ERROR)
+
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad) \
+    GST_TRACEPOINT (gst_flow, pad, NULL, GST_FLOW_OK, GST_TRACEPOINT_FLAG_SEND_EVENT, GST_TRACEPOINT_FLAG_DROPPED)
+
 #define GST_TRACEPOINT(...) tracepoint (Gst, __VA_ARGS__)
 
 #else /* !GST_ENABLE_LTTNG_TRACEPOINTS */
 
+#define GST_FLOW_TRACEPOINT_PUSH_ENTER(pad, data)
+#define GST_FLOW_TRACEPOINT_PUSH_EXIT(pad, ret)
+#define GST_FLOW_TRACEPOINT_PUSH_ERROR(pad, ret)
+#define GST_FLOW_TRACEPOINT_PUSH_DROPPED(pad)
+#define GST_FLOW_TRACEPOINT_PULL_ENTER(pad)
+#define GST_FLOW_TRACEPOINT_PULL_EXIT(pad, data, ret)
+#define GST_FLOW_TRACEPOINT_PULL_ERROR(pad, ret)
+#define GST_FLOW_TRACEPOINT_PULL_DROPPED(pad)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER(pad, event)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT(pad, ret)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR(pad)
+#define GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED(pad)
+
 #define GST_TRACEPOINT(...)
 
 #endif /* !GST_ENABLE_LTTNG_TRACEPOINTS */
--- a/gst/gstghostpad.c
+++ b/gst/gstghostpad.c
@@ -882,3 +882,5 @@
     return FALSE;
   }
 }
+
+#include "gstghostpad_tracepoints.h"
--- /dev/null
+++ b/gst/gstghostpad_tracepoints.h
@@ -0,0 +1,33 @@
+/* GStreamer
+ * Copyright (C) 2013 Mentor Graphics, Inc.
+ *
+ * gstghostpad_tracepoints.h: Support for tracing events on GstGhostPads.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include "glib.h"
+#include "gstpad.h"
+#include "gstelement.h"
+
+#include "gst_tracepoints.h"
+
+#ifdef GST_ENABLE_LTTNG_TRACEPOINTS
+GstPad *_priv_gst_ghostpad_get_target (GstGhostPad *gpad) {
+  return GST_PROXY_PAD_TARGET (gpad);
+}
+
+#endif /* GST_ENABLE_LTTNG_TRACEPOINTS */
--- a/gst/gstpad.c
+++ b/gst/gstpad.c
@@ -97,6 +97,7 @@
 #include "gsttracerutils.h"
 #include "gstvalue.h"
 #include "glib-compat-private.h"
+#include "gst_tracepoints.h"
 
 GST_DEBUG_CATEGORY_STATIC (debug_dataflow);
 #define GST_CAT_DEFAULT GST_CAT_PADS
@@ -4125,6 +4126,7 @@
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4197,6 +4199,7 @@
 
   RELEASE_PARENT (parent);
 
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
   GST_PAD_STREAM_UNLOCK (pad);
 
   return ret;
@@ -4204,6 +4207,7 @@
   /* ERRORS */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_FLUSHING);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "chaining, but pad was flushing");
     GST_OBJECT_UNLOCK (pad);
@@ -4213,6 +4217,7 @@
   }
 eos:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_EOS);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad, "chaining, but pad was EOS");
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
@@ -4221,6 +4226,7 @@
   }
 wrong_mode:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_ERROR);
     g_critical ("chain on pad %s:%s but it was not in push mode",
         GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
@@ -4243,9 +4249,11 @@
       case GST_FLOW_CUSTOM_SUCCESS:
       case GST_FLOW_CUSTOM_SUCCESS_1:
         GST_DEBUG_OBJECT (pad, "dropped or handled buffer");
+        GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
         ret = GST_FLOW_OK;
         break;
       default:
+        GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
         GST_DEBUG_OBJECT (pad, "an error occurred %s", gst_flow_get_name (ret));
         break;
     }
@@ -4262,6 +4270,7 @@
 no_function:
   {
     RELEASE_PARENT (parent);
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     gst_mini_object_unref (GST_MINI_OBJECT_CAST (data));
     g_critical ("chain on pad %s:%s but it has no chainfunction",
         GST_DEBUG_PAD_NAME (pad));
@@ -4378,6 +4387,7 @@
   gboolean handled = FALSE;
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PUSH_ENTER (pad, data);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4438,6 +4448,7 @@
     PROBE_NO_DATA (pad, GST_PAD_PROBE_TYPE_PUSH | GST_PAD_PROBE_TYPE_IDLE,
         probe_stopped, ret);
   }
+  GST_FLOW_TRACEPOINT_PUSH_EXIT (pad, ret);
   GST_OBJECT_UNLOCK (pad);
 
   return ret;
@@ -4446,6 +4457,7 @@
   /* ERRORS */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_FLUSHING);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but pad was flushing");
     pad->ABI.abi.last_flowret = GST_FLOW_FLUSHING;
@@ -4455,6 +4467,7 @@
   }
 eos:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_EOS);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad, "pushing, but pad was EOS");
     pad->ABI.abi.last_flowret = GST_FLOW_EOS;
     GST_OBJECT_UNLOCK (pad);
@@ -4463,6 +4476,7 @@
   }
 wrong_mode:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_ERROR);
     g_critical ("pushing on pad %s:%s but it was not activated in push mode",
         GST_DEBUG_PAD_NAME (pad));
     pad->ABI.abi.last_flowret = GST_FLOW_ERROR;
@@ -4472,6 +4486,7 @@
   }
 events_error:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "error pushing events, return %s", gst_flow_get_name (ret));
     pad->ABI.abi.last_flowret = ret;
@@ -4492,9 +4507,11 @@
       case GST_FLOW_CUSTOM_SUCCESS:
       case GST_FLOW_CUSTOM_SUCCESS_1:
         GST_DEBUG_OBJECT (pad, "dropped or handled buffer");
+        GST_FLOW_TRACEPOINT_PUSH_DROPPED (pad);
         ret = GST_FLOW_OK;
         break;
       default:
+        GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, ret);
         GST_DEBUG_OBJECT (pad, "an error occurred %s", gst_flow_get_name (ret));
         break;
     }
@@ -4503,6 +4520,7 @@
   }
 not_linked:
   {
+    GST_FLOW_TRACEPOINT_PUSH_ERROR (pad, GST_FLOW_NOT_LINKED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pushing, but it was not linked");
     pad->ABI.abi.last_flowret = GST_FLOW_NOT_LINKED;
@@ -4602,6 +4620,7 @@
   GST_PAD_STREAM_LOCK (pad);
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4653,11 +4672,13 @@
 
   *buffer = res_buf;
 
+  GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
   return ret;
 
   /* ERRORS */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_FLUSHING);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "getrange, but pad was flushing");
     pad->ABI.abi.last_flowret = GST_FLOW_FLUSHING;
@@ -4667,6 +4688,7 @@
   }
 wrong_mode:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_ERROR);
     g_critical ("getrange on pad %s:%s but it was not activated in pull mode",
         GST_DEBUG_PAD_NAME (pad));
     pad->ABI.abi.last_flowret = GST_FLOW_ERROR;
@@ -4676,6 +4698,7 @@
   }
 events_error:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad, "error pushing events");
     pad->ABI.abi.last_flowret = ret;
     GST_OBJECT_UNLOCK (pad);
@@ -4684,6 +4707,7 @@
   }
 no_parent:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_FLUSHING);
     GST_DEBUG_OBJECT (pad, "no parent");
     pad->ABI.abi.last_flowret = GST_FLOW_FLUSHING;
     GST_OBJECT_UNLOCK (pad);
@@ -4692,6 +4716,7 @@
   }
 no_function:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_SUPPORTED);
     g_critical ("getrange on pad %s:%s but it has no getrangefunction",
         GST_DEBUG_PAD_NAME (pad));
     RELEASE_PARENT (parent);
@@ -4716,6 +4741,7 @@
       }
     }
     pad->ABI.abi.last_flowret = ret;
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
 
@@ -4723,12 +4749,14 @@
   }
 probe_stopped_unref:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "probe returned %s", gst_flow_get_name (ret));
     /* if we drop here, it signals EOS */
     if (ret == GST_FLOW_CUSTOM_SUCCESS)
       ret = GST_FLOW_EOS;
     pad->ABI.abi.last_flowret = ret;
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
     if (*buffer == NULL)
@@ -4738,6 +4766,7 @@
 get_range_failed:
   {
     pad->ABI.abi.last_flowret = ret;
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_OBJECT_UNLOCK (pad);
     GST_PAD_STREAM_UNLOCK (pad);
     GST_CAT_LEVEL_LOG (GST_CAT_SCHEDULING,
@@ -4854,6 +4883,9 @@
   GST_TRACER_PAD_PULL_RANGE_PRE (pad, offset, size);
 
   GST_OBJECT_LOCK (pad);
+
+  GST_FLOW_TRACEPOINT_PULL_ENTER (pad);
+
   if (G_UNLIKELY (GST_PAD_IS_FLUSHING (pad)))
     goto flushing;
 
@@ -4899,12 +4931,15 @@
 
   *buffer = res_buf;
 
+  GST_FLOW_TRACEPOINT_PULL_EXIT (pad, *buffer, ret);
+
   GST_TRACER_PAD_PULL_RANGE_POST (pad, *buffer, ret);
   return ret;
 
   /* ERROR recovery here */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_FLUSHING);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pullrange, but pad was flushing");
     pad->ABI.abi.last_flowret = GST_FLOW_FLUSHING;
@@ -4914,6 +4949,7 @@
   }
 wrong_mode:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_ERROR);
     g_critical ("pullrange on pad %s:%s but it was not activated in pull mode",
         GST_DEBUG_PAD_NAME (pad));
     pad->ABI.abi.last_flowret = GST_FLOW_ERROR;
@@ -4939,11 +4975,13 @@
       }
     }
     pad->ABI.abi.last_flowret = ret;
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_OBJECT_UNLOCK (pad);
     goto done;
   }
 not_linked:
   {
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, GST_FLOW_NOT_LINKED);
     GST_CAT_LOG_OBJECT (GST_CAT_SCHEDULING, pad,
         "pulling range, but it was not linked");
     pad->ABI.abi.last_flowret = GST_FLOW_NOT_LINKED;
@@ -4954,6 +4992,7 @@
 pull_range_failed:
   {
     pad->ABI.abi.last_flowret = ret;
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     GST_OBJECT_UNLOCK (pad);
     GST_CAT_LEVEL_LOG (GST_CAT_SCHEDULING,
         (ret >= GST_FLOW_EOS) ? GST_LEVEL_INFO : GST_LEVEL_WARNING,
@@ -4972,6 +5011,7 @@
     pad->ABI.abi.last_flowret = ret;
     GST_OBJECT_UNLOCK (pad);
 
+    GST_FLOW_TRACEPOINT_PULL_ERROR (pad, ret);
     if (*buffer == NULL)
       gst_buffer_unref (res_buf);
     goto done;
@@ -5461,6 +5501,7 @@
   GstObject *parent;
 
   GST_OBJECT_LOCK (pad);
+  GST_FLOW_TRACEPOINT_SEND_EVENT_ENTER (pad, event);
 
   event = apply_pad_offset (pad, event, GST_PAD_IS_SRC (pad));
 
@@ -5610,11 +5651,14 @@
   if (need_unlock)
     GST_PAD_STREAM_UNLOCK (pad);
 
+  GST_FLOW_TRACEPOINT_SEND_EVENT_EXIT (pad, ret == GST_FLOW_OK);
+
   return ret;
 
   /* ERROR handling */
 flushing:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
       GST_PAD_STREAM_UNLOCK (pad);
@@ -5635,6 +5679,7 @@
   }
 eos:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
       GST_PAD_STREAM_UNLOCK (pad);
@@ -5656,9 +5701,11 @@
       case GST_FLOW_CUSTOM_SUCCESS_1:
       case GST_FLOW_CUSTOM_SUCCESS:
         GST_DEBUG_OBJECT (pad, "dropped or handled event");
+        GST_FLOW_TRACEPOINT_SEND_EVENT_DROPPED (pad);
         ret = GST_FLOW_OK;
         break;
       default:
+        GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
         GST_DEBUG_OBJECT (pad, "an error occurred %s", gst_flow_get_name (ret));
         break;
     }
@@ -5666,6 +5713,7 @@
   }
 no_function:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     g_warning ("pad %s:%s has no event handler, file a bug.",
         GST_DEBUG_PAD_NAME (pad));
     GST_OBJECT_UNLOCK (pad);
@@ -5676,6 +5724,7 @@
   }
 no_parent:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_DEBUG_OBJECT (pad, "no parent");
     GST_OBJECT_UNLOCK (pad);
     if (need_unlock)
@@ -5685,6 +5734,7 @@
   }
 precheck_failed:
   {
+    GST_FLOW_TRACEPOINT_SEND_EVENT_ERROR (pad);
     GST_DEBUG_OBJECT (pad, "pre event check failed");
     RELEASE_PARENT (parent);
     if (need_unlock)
